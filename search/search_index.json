{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Creando este sitio En este cuaderno haremos un recorrido por las herramientas utilizadas para organizar esta colecci\u00f3n de manuales. Alojamiento Cuando vamos a crear un sitio web, el primer paso es buscar un alojamiento en la red para nuestros documentos. Seguramente lo m\u00e1s sencillo ser\u00eda poner en marcha un blog , con la ayuda de servicios tan populares como Blogger o Wordpress , que nos permiten organizar los contenidos de forma bastante simple. Pero encuentro que son sitios orientados a publicar una lista de art\u00edculos por fecha, no estando especializados en el dise\u00f1o de manuales t\u00e9cnicos, con su \u00edndice de cap\u00edtulos y todo eso, De todas formas he visto mucha gente que, haciendo un apa\u00f1o, se arregla con esta soluci\u00f3n. Otra posibilidad ser\u00eda utilizar algo en la l\u00ednea de wikilibros , pero es un recurso con el que debo confesar que no me siento muy a gusto. En realidad, lo que yo andaba buscando es algo que, adem\u00e1s de recoger mis apuntes, me permitiera experimentar un poco con el dise\u00f1o web. Una tercera opci\u00f3n ser\u00eda configurar nuestra propia m\u00e1quina como servidor, instalando un software de gesti\u00f3n de contenidos y conectado a la red las veinticuatro horas del d\u00eda. Aunque debo decir que, para un uso personal, no creo que sea necesario complicarse tanto la vida. Investigando un poco, encontr\u00e9 Read the Docs , un sitio web concebido para publicar manuales, algo que se ajustaba bastante bien a mi idea. Read the Docs genera la documentaci\u00f3n a partir de archivos alojados en repositorios como GitHub , el popular sitio de software compartido y trabajo en equipo. Podemos guardar nuestros documentos en esta segunda plataforma, y Read the Docs los tomar\u00e1 y construir\u00e1 una p\u00e1gina web con esos materiales. El caso es que descubr\u00ed que GitHub tambi\u00e9n cuenta con un servicio similar llamado GitHub Pages , por lo que tras un per\u00edodo inicial de experimentos, decid\u00ed prescindir de Read the Docs y usar GitHub Pages para publicar mis cuadernos. Nota: Se podr\u00eda decir que GitHub es l\u00cdder como plataforma de desarrollo compartido de software, pero en junio de 2018 sus creadores lo vendieron a Microsoft por la astron\u00f3mica cantidad de 7.500 millones de d\u00f3lares. El mensaje que Microsoft public\u00f3 para confirmar la noticia afirmaba su compromiso de apoyar al mundo del software libre. \u00bfCuales son las intenciones del gigante de la inform\u00e1tica? Lo cierto es que la operaci\u00f3n no ha estado exenta de pol\u00e9mica. El tiempo dir\u00e1 como evoluciona GitHub \u2026 El nombre del dominio Una vez seleccionado el alojamiento, necesitamos un dominio , es decir, el nombre que nos va a identificar en Internet, algo as\u00ed como www.mipagina.com . Lo primero es comprobar que el nombre que escojamos est\u00e1 libre. En principio bastar\u00eda con introducir una b\u00fasqueda en nuestro navegador web y ver si obtenemos alg\u00fan resultado. Si aparece otra p\u00e1gina que se llama as\u00ed, ya podemos ir pensando en otra denominaci\u00f3n. Si por el contrario, se muestra un mensaje \u201c no se encuentra el servidor \u201d, no cantemos victoria todav\u00eda. Quiz\u00e1s el nombre haya sido adquirido pero no est\u00e1 siendo utilizado. Pero es un buen inicio. Una vez escogido un nombre de dominio, el siguiente paso ser\u00e1 registrarlo . Podemos hacerlo nosotros mismos o buscar un alojamiento que proporcione ese servicio. Por ejemplo, una cuenta de pago en Wordpress , adem\u00e1s de permitirnos crear un blog, incluye tener un nombre a la medida. Si no queremos pagar por un dominio, la alternativa es hacer uso de los subdominios que proporcionan los servicios de alojamiento. En el caso de los citados: para blogger : mipagina.blogspot.com si usamos wordpress : mipagina.worpress.com usando github pages : mipagina.github.io con read the docs : mipagina.readthedocs.io Estas plataformas no solo proporcionan el nombre de un subdominio sin coste alguno. Tambi\u00e9n permiten asociar un nombre que ya tengamos registrado al sitio web que estamos creando. Explorando GitHub GitHub es un inmenso repositorio de software compartido, que ha sido concebido para coordinar trabajos desarrollados en equipo, aunque tambi\u00e9n puede alojar proyectos personales. Podemos experimentar un poco acudiendo a su p\u00e1gina web y explorando alguno de los miles de proyectos all\u00ed ubicados. La p\u00e1gina principal es https://github.com/ . Cuando introducimos esa URL en nuestro navegador, se muestra lo siguiente: Los proyectos de software se alojan bajo una cuenta de usuario. En la p\u00e1gina de portada, el recuadro editable de la barra superior nos permite hacer b\u00fasquedas introduciendo nombres de usuario o de proyectos. Si conocemos el nombre del usuario, otra forma de acceso es introducir directamente en nuestro navegador web la URL: https://github.com/nombreUsuario Por ejemplo, si tecleamos https://github.com/torvalds veremos la lista de proyectos de software que Linus Torvalds , el creador del sistema operativo Linux , tiene alojados en GitHub . Ahora que Microsoft se ha convertido en propietario de GitHub , afirmando su compromiso con el software libre , no est\u00e1 dem\u00e1s curiosear un poco en su lista de proyectos : Pulsando sobre cualquier proyecto, podemos ver la lista de archivos que lo componen. O bien, introducir directamente la URL: https://github.com/nombreUsuario/nombreProyecto Por ejemplo, para ver el repositorio donde se aloja el popular editor Visual Studio Code de Microsoft, tecleamos https://github.com/Microsoft/vscode : La vista de un repositorio incluye la lista de ficheros all\u00ed almacenados, con frecuencia organizados en carpetas. Es costumbre que el directorio ra\u00edz incluya un archivo de texto llamado README.md para mostrar un resumen del proyecto. GitHub lo suele visualizar a continuaci\u00f3n de la lista de archivos: Los archivos con la extensi\u00f3n .md o .markdown son documentos de texto markdown , un formato muy popular entre los usuarios de GitHub para redactar documentos, como veremos m\u00e1s adelante.","title":"Introducci\u00f3n"},{"location":"index.html#creando-este-sitio","text":"En este cuaderno haremos un recorrido por las herramientas utilizadas para organizar esta colecci\u00f3n de manuales.","title":"Creando este sitio"},{"location":"index.html#alojamiento","text":"Cuando vamos a crear un sitio web, el primer paso es buscar un alojamiento en la red para nuestros documentos. Seguramente lo m\u00e1s sencillo ser\u00eda poner en marcha un blog , con la ayuda de servicios tan populares como Blogger o Wordpress , que nos permiten organizar los contenidos de forma bastante simple. Pero encuentro que son sitios orientados a publicar una lista de art\u00edculos por fecha, no estando especializados en el dise\u00f1o de manuales t\u00e9cnicos, con su \u00edndice de cap\u00edtulos y todo eso, De todas formas he visto mucha gente que, haciendo un apa\u00f1o, se arregla con esta soluci\u00f3n. Otra posibilidad ser\u00eda utilizar algo en la l\u00ednea de wikilibros , pero es un recurso con el que debo confesar que no me siento muy a gusto. En realidad, lo que yo andaba buscando es algo que, adem\u00e1s de recoger mis apuntes, me permitiera experimentar un poco con el dise\u00f1o web. Una tercera opci\u00f3n ser\u00eda configurar nuestra propia m\u00e1quina como servidor, instalando un software de gesti\u00f3n de contenidos y conectado a la red las veinticuatro horas del d\u00eda. Aunque debo decir que, para un uso personal, no creo que sea necesario complicarse tanto la vida. Investigando un poco, encontr\u00e9 Read the Docs , un sitio web concebido para publicar manuales, algo que se ajustaba bastante bien a mi idea. Read the Docs genera la documentaci\u00f3n a partir de archivos alojados en repositorios como GitHub , el popular sitio de software compartido y trabajo en equipo. Podemos guardar nuestros documentos en esta segunda plataforma, y Read the Docs los tomar\u00e1 y construir\u00e1 una p\u00e1gina web con esos materiales. El caso es que descubr\u00ed que GitHub tambi\u00e9n cuenta con un servicio similar llamado GitHub Pages , por lo que tras un per\u00edodo inicial de experimentos, decid\u00ed prescindir de Read the Docs y usar GitHub Pages para publicar mis cuadernos. Nota: Se podr\u00eda decir que GitHub es l\u00cdder como plataforma de desarrollo compartido de software, pero en junio de 2018 sus creadores lo vendieron a Microsoft por la astron\u00f3mica cantidad de 7.500 millones de d\u00f3lares. El mensaje que Microsoft public\u00f3 para confirmar la noticia afirmaba su compromiso de apoyar al mundo del software libre. \u00bfCuales son las intenciones del gigante de la inform\u00e1tica? Lo cierto es que la operaci\u00f3n no ha estado exenta de pol\u00e9mica. El tiempo dir\u00e1 como evoluciona GitHub \u2026","title":"Alojamiento"},{"location":"index.html#el-nombre-del-dominio","text":"Una vez seleccionado el alojamiento, necesitamos un dominio , es decir, el nombre que nos va a identificar en Internet, algo as\u00ed como www.mipagina.com . Lo primero es comprobar que el nombre que escojamos est\u00e1 libre. En principio bastar\u00eda con introducir una b\u00fasqueda en nuestro navegador web y ver si obtenemos alg\u00fan resultado. Si aparece otra p\u00e1gina que se llama as\u00ed, ya podemos ir pensando en otra denominaci\u00f3n. Si por el contrario, se muestra un mensaje \u201c no se encuentra el servidor \u201d, no cantemos victoria todav\u00eda. Quiz\u00e1s el nombre haya sido adquirido pero no est\u00e1 siendo utilizado. Pero es un buen inicio. Una vez escogido un nombre de dominio, el siguiente paso ser\u00e1 registrarlo . Podemos hacerlo nosotros mismos o buscar un alojamiento que proporcione ese servicio. Por ejemplo, una cuenta de pago en Wordpress , adem\u00e1s de permitirnos crear un blog, incluye tener un nombre a la medida. Si no queremos pagar por un dominio, la alternativa es hacer uso de los subdominios que proporcionan los servicios de alojamiento. En el caso de los citados: para blogger : mipagina.blogspot.com si usamos wordpress : mipagina.worpress.com usando github pages : mipagina.github.io con read the docs : mipagina.readthedocs.io Estas plataformas no solo proporcionan el nombre de un subdominio sin coste alguno. Tambi\u00e9n permiten asociar un nombre que ya tengamos registrado al sitio web que estamos creando.","title":"El nombre del dominio"},{"location":"index.html#explorando-github","text":"GitHub es un inmenso repositorio de software compartido, que ha sido concebido para coordinar trabajos desarrollados en equipo, aunque tambi\u00e9n puede alojar proyectos personales. Podemos experimentar un poco acudiendo a su p\u00e1gina web y explorando alguno de los miles de proyectos all\u00ed ubicados. La p\u00e1gina principal es https://github.com/ . Cuando introducimos esa URL en nuestro navegador, se muestra lo siguiente: Los proyectos de software se alojan bajo una cuenta de usuario. En la p\u00e1gina de portada, el recuadro editable de la barra superior nos permite hacer b\u00fasquedas introduciendo nombres de usuario o de proyectos. Si conocemos el nombre del usuario, otra forma de acceso es introducir directamente en nuestro navegador web la URL: https://github.com/nombreUsuario Por ejemplo, si tecleamos https://github.com/torvalds veremos la lista de proyectos de software que Linus Torvalds , el creador del sistema operativo Linux , tiene alojados en GitHub . Ahora que Microsoft se ha convertido en propietario de GitHub , afirmando su compromiso con el software libre , no est\u00e1 dem\u00e1s curiosear un poco en su lista de proyectos : Pulsando sobre cualquier proyecto, podemos ver la lista de archivos que lo componen. O bien, introducir directamente la URL: https://github.com/nombreUsuario/nombreProyecto Por ejemplo, para ver el repositorio donde se aloja el popular editor Visual Studio Code de Microsoft, tecleamos https://github.com/Microsoft/vscode : La vista de un repositorio incluye la lista de ficheros all\u00ed almacenados, con frecuencia organizados en carpetas. Es costumbre que el directorio ra\u00edz incluya un archivo de texto llamado README.md para mostrar un resumen del proyecto. GitHub lo suele visualizar a continuaci\u00f3n de la lista de archivos: Los archivos con la extensi\u00f3n .md o .markdown son documentos de texto markdown , un formato muy popular entre los usuarios de GitHub para redactar documentos, como veremos m\u00e1s adelante.","title":"Explorando GitHub"},{"location":"001Github.html","text":"Github En este cap\u00edtulo veremos como darnos de alta y hacer uso de esta plataforma. Creando una cuenta nueva Para registrarnos como usuarios necesitamos una cuenta de correo. Puede ser una buena idea crear previamente una nueva para no mezclar estas cosas con nuestro correo personal. Seguidamente, en la p\u00e1gina inicial de GitHub veremos dos enlaces: Sign In , para acceder si ya tenemos un c\u00f3digo de usuario y contrase\u00f1a Sign Up , para crear una nueva cuenta de usuario. Pulsamos en el enlace [Sign_up] , o bien introducimos directamente nuestras credenciales en el formulario que se facilita en la p\u00e1gina principal, nuevo nombre de usuario, e-mail y la contrase\u00f1a que queremos establecer. A continuaci\u00f3n veremos un asistente que nos pedir\u00e1 que indiquemos el tipo de cuenta: gratis o de pago. Estas \u00faltimas permiten un mayor espacio de almacenamiento, y la posibilidad de que los repositorios sean privados. Atenci\u00f3n: La privacidad de los repositorios se refiere a los archivos que subamos a GitHb. Pero si hacemos uso de GitHub Pages para convertir nuestros documentos y mostrarlos como p\u00e1ginas web, estas ser\u00e1n p\u00fablicas. GitHub Pages no cuenta con la posibilidad de crear sitios web privados, accesibles solo para personas autorizadas. El siguiente paso del proceso de alta es cumplimentar una encuesta. Pulsamos en el bot\u00f3n [Submit] , al final del formulario. A continuaci\u00f3n tenemos la p\u00e1gina principal de nuestra cuenta de usuario, con una lista de proyectos que por ahora est\u00e1 vac\u00eda: Antes de seguir adelante, debemos abrir nuestro gestor de correo y buscar el mensaje que nos ha enviado GitHub , donde se nos facilita un enlace en el que debemos pulsar para confirmar que se trata de una direcci\u00f3n de correo real. La p\u00e1gina principal Cada vez que nos identifiquemos con nuestro c\u00f3digo de usuario tendremos una sesi\u00f3n abierta que se mantendr\u00e1 en ese estado aunque cerremos la ventana del navegador. Siempre que visualicemos cualquier p\u00e1gina de GitHub , en la esquina superior izquierda tenemos el logo de este servicio: un \u201c octogato \u201c Pulsando sobre ese icono volvemos a la p\u00e1gina principal de GitHub , donde si tenemos una sesi\u00f3n abierta se mostrar\u00e1 nuestra lista de proyectos. En la esquina superior de la derecha vemos unos iconos muy \u00fatiles. Pulsando en el s\u00edmbolo [+] podemos crear nuevos proyectos. En esa esquina veremos tambi\u00e9n un icono con nuestra foto de perfil (que por ahora es un s\u00edmbolo abstracto). Pulsando aqu\u00ed obtenemos una lista desplegable con varias opciones: visualizar el manual de ayuda de GitHub , acceder a nuestra configuraci\u00f3n de usuario, o cerrar la sesi\u00f3n [Sign_out] . Es importante dejar la sesi\u00f3n correctamente cerrada, para evitar accidentes indeseados. Configurar la cuenta Para revisar nuestro perfil de usuario tenemos que pulsar en la esquina superior derecha y en el men\u00fa desplegable seleccionar \u201c Your Profile \u201d. Creando un proyecto Cada usuario puede alojar varios proyectos en su cuenta, cada uno en un repositorio diferente. Para crear un proyecto nuevo podemos pulsar en el bot\u00f3n [Start a Project] de la p\u00e1gina principal, o bien en el icono [+] de la esquina superior derecha. Aparece la p\u00e1gina de creaci\u00f3n de nuevo repositorio: Introducimos el nombre de repositorio (que es lo mismo que el nombre del proyecto), una descripci\u00f3n, y seleccionamos si se trata de un repositorio p\u00fablico o privado. Los privados no pueden ser visualizados por usuarios no autorizados, pero requieren una cuenta de pago. Los p\u00fablicos son visibles para todo el mundo, incluso para quienes no sean usuarios de GitHub . Adem\u00e1s se permite que otros usuarios copien los contenidos para su propio uso. A fin de cuentas, GitHub es un servicio para compartir software. Se nos dar\u00e1 la opci\u00f3n de empezar con un repositorio vac\u00edo, o iniciarlo con tres archivos de texto opcionales. Se recomienda incluir el primero de ellos como m\u00ednimo: Archivo README, que contiene una presentaci\u00f3n del proyecto y se utiliza a efectos de documentaci\u00f3n. Licencia de uso. Teniendo en cuenta que la filosof\u00eda de GitHub es compartir documentos, posiblemente querremos especificar unas condiciones de uso para evitar que alguien se apropie de nuestro trabajo y se asigne derechos de copyright. Podemos elegir entre varios tipos de licencias: licencia apache 2.0 licencia GNU, en varios formatos licencia MIT licencia BSD licencia Eclipse licencia Mozilla 2.0 Dependiendo de nuestra elecci\u00f3n, el texto que se mostrar\u00e1 otorgar\u00e1 unos permisos y limitaciones diferentes. Pulsar aqu\u00ed para ver diferentes tipos de licencias y hacernos una idea. Archivo \u201c.gitignore\u201d. Si editamos los documentos en nuestro ordenador local, tendremos que subirlos posteriormente al repositorio GitHub , con lo que tendremos los archivos por duplicado. El problema es coordinar que cuando se modifica un documento en cualquiera de los dos entornos, ambos est\u00e9n sincronizados. Esta sincronizaci\u00f3n se lleva a cabo con la ayuda de un software llamado git , que actualiza el entorno m\u00e1s desfasado (el local o el remoto), sustituyendo la versi\u00f3n m\u00e1s antigua del fichero por la m\u00e1s nueva. El archivo .gitignore contiene la lista de archivos y carpetas que no ser\u00e1n tenidos en cuenta en esa sincronizaci\u00f3n. Nota: En los sistemas operativos tipo UNIX (Linux, MacOS, etc) la forma de hacer que un fichero sea oculto es ponerle un punto \u201c.\u201d como prefijo del nombre. Finalmente pulsamos en el bot\u00f3n [ Create Repository ] . Editando archivos Tras crear el repositorio, aparece la ventana principal del mismo: Hacia la mitad de la ventana tenemos la lista de archivos. Por ahora solo tenemos un fichero llamado README.md con el prop\u00f3sito de documentar el proyecto. Debajo de la lista se muestra el contenido de README.md . Pulsando con el rat\u00f3n sobre cualquier documento, se visualiza el contenido del mismo: GitHub intentar\u00e1 presentar ese contenido de acuerdo a su extensi\u00f3n. Un archivo .jpg , por ejemplo, se mostrar\u00e1 como imagen, y un archivo .md o .markdown , como texto. Este formato es el m\u00e1s popular de GitHub para crear archivos de texto que requieran de una presentaci\u00f3n un poco elaborada (cabeceras, tipos de letra, im\u00e1genes, enlaces, etc). Al visualizar un archivo, encima del mismo, y hacia la derecha, se muestran algunos iconos de utilidad: Pulsar sobre el icono del lapicero para editar el documento e introducir modificaciones. Pulsar sobre el icono de la papelera para eliminarlo. El bot\u00f3n raw muestra el fichero en formato de \u201ctexto plano\u201d, no llevando a cabo adaptaciones para mostrar su aspecto final. El bot\u00f3n blame muestra cada l\u00ednea de texto indicando quien la modific\u00f3 y en que fecha. Resulta \u00fatil en proyectos de equipo. El bot\u00f3n history muestra el log de cambios del fichero. Advertencia: \u00a1Cuidado con el icono del lapicero cuando estamos visualizando repositorios de otros usuarios!. En principio no deber\u00eda permitirnos editar un archivo que no es nuestro, pero si hemos entrado a \u201cGitHub\u201d con nuestra cuenta de usuario y contrase\u00f1a, lo que sucede es que se crea autom\u00e1ticamente una copia (\u201cfork\u201d) en nuestra cuenta, y nos permite editar la nueva versi\u00f3n derivada de la original. Al propietario le aparecer\u00e1 un mensaje indicando que alguien ha iniciado un nuevo proyecto basado en el suyo. Si modificamos cualquier documento debemos finalizar la edici\u00f3n pulsando en la parte inferior de la p\u00e1gina sobre el bot\u00f3n [commit_changes] para guardar los cambios realizados. A\u00f1adiendo archivos a un repositorio Para subir archivos desde nuestro ordenador personal, accedemos a la p\u00e1gina principal del proyecto y pulsamos en el bot\u00f3n [upload_files] : Se muestra la siguiente p\u00e1gina: Pulsamos sobre el enlace [choose your files] o bien arrastramos directamente los archivos sobre el panel: ficheros de texto, im\u00e1genes, pdfs, etc. Finalmente bajamos hasta el pie de p\u00e1gina y pulsamos en el bot\u00f3n [ Commit Changes ] para que se lleve a cabo la operaci\u00f3n. Advertencia: Cada operaci\u00f3n de subida de archivos tiene un l\u00edmite en cuanto a n\u00famero de ficheros y tama\u00f1o. Es posible que tengamos que hacer la operaci\u00f3n en varias etapas, limitando el n\u00famero de archivos en cada una de ellas. En cuanto a las im\u00e1genes demasiado grandes, es recomendable utilizar previamente alguna herramienta de conversi\u00f3n que permita reducir el tama\u00f1o de la imagen. Otra posibilidad es crear directamente un archivo de texto desde cero. En la p\u00e1gina principal del repositorio, pulsar sobre el bot\u00f3n [Create new file] . Aparecer\u00e1 un panel de edici\u00f3n para introducir el texto: En la parte superior tenemos un recuadro para asignar un nombre al archivo. A\u00f1adiendo un car\u00e1cter / convertiremos lo que hay a su izquierda en nombre de subcarpeta. Usando la tecla de borrado hacia atr\u00e1s, podemos borrar el nombre de la carpeta y cambiarlo por otra, que si no existe, se crear\u00e1. Pulsando en el bot\u00f3n inferior [ Commit Changes ] se guardar\u00e1n los cambios. El bot\u00f3n est\u00e1 desactivado hasta que no asignemos un nombre al documento. Cambiando el nombre de un archivo Para modificar el nombre de un archivo, moverlo a otra carpeta, o ponerlo en una nueva, seleccionar dicho archivo, pulsar en el icono del lapicero, y en la p\u00e1gina de edici\u00f3n, modificar el nombre. Para cambiarlo de carpeta, usar la tecla de borrado hacia atr\u00e1s para modificar el nombre de la misma. Haciendo una copia del repositorio Una vez que hemos creado los primeros documentos, podemos descargar una copia a nuestro ordenador personal pulsando en el bot\u00f3n [download] en la lista de archivos. Seleccionamos la opci\u00f3n Download zip , que baja un archivo .zip con todo los contenidos del repositorio. Tambi\u00e9n podemos usar GitHub Desktop , un software para sincronizar proyectos de GitHub con los contenidos de nuestra m\u00e1quina local. Veremos su funcionamiento en otro cap\u00edtulo de este cuaderno. Crear una rama (branch) Dentro de un proyecto podemos crear varias \u201cramas\u201d de desarrollo, es decir, versiones en paralelo. Podemos tener, por ejemplo, una versi\u00f3n estable del proyecto y una de trabajo donde vamos introduciendo las modificaciones sin afectar a la versi\u00f3n principal. Por defecto cada repositorio se crea con una rama llamada master . Cuando creamos una nueva rama, lo que hacemos es clonar la existente para seguir trabajando en la copia e introducir cambios. Para crear una rama a partir de la actual, debemos situarnos en el repositorio en cuesti\u00f3n y en la cabecera de la lista de archivos pulsamos sobre el bot\u00f3n [branch] . Se despliega un men\u00fa para seleccionar alguna de las ramas que tengamos vigentes. El men\u00fa cuenta con un recuadro de edici\u00f3n que permite introducir un nuevo nombre. A medida que lo escribimos se crea una nueva entrada en la lista desplegable. La seleccionamos. Tras crear la nueva rama, todos los archivos de la anterior se copian autom\u00e1ticamente. Podemos usar el bot\u00f3n [branch] para pasar de una rama a otra. Pull request Tras introducir modificaciones en la rama \u201cde pruebas\u201d lanzaremos una \u201cpull request\u201d, es decir, una petici\u00f3n para que la rama padre incorpore (pull) los commits de nuestra rama actual. Para ver esto con m\u00e1s detalle, GitHub proporciona un tutorial sobre como crear repositorios, ramas y pull requests . La operaci\u00f3n \u201cpull request\u201d mostrar\u00e1 las diferencias entre ambas ramas: cambios, adiciones y eliminaciones, que se ven en diferentes colores. El primer paso es seleccionar la rama que contiene la versi\u00f3n m\u00e1s actualizada, con los cambios introducidos. En la cabecera de la lista de archivos, junto al selector de ramas, tenemos el bot\u00f3n [new pull request] . Esto nos muestra la lista de cambios realizados. Tras comprobarlo, pulsamos sobre el bot\u00f3n [create pull request] . A continuaci\u00f3n se mostrar\u00e1 nuestra lista de peticiones pendientes y una comprobaci\u00f3n de conflictos. Si todo est\u00e1 OK, podemos pulsar sobre el bot\u00f3n [merge pull request] para actualizar la rama master . Si todo va bien, visualizaremos el mensaje Pull request successfully merged and closed . Se nos da la opci\u00f3n de suprimir la rama de trabajo, ya que ahora est\u00e1 duplicada con la master . La lista de pulls request se visualiza pulsando en la barra superior de la p\u00e1gina del proyecto, en el enlace [ pull resquests ] . Para volver a la lista de archivos, pulsar sobre el icono [code] . Los botones Watch, Star, y Fork Estos tres botones se muestran en la esquina superior derecha de cada repositorio de GitHub . Podemos tener seguidores de un proyecto, que recibir\u00e1n un e-mail cada vez que hagamos cambios. Pulsando en el enlace [watch] de un repositorio ajeno, si somos un usuario registrado podemos convertirnos en seguidores del proyecto. A la derecha se muestra el n\u00famero de seguidores, y pulsando sobre el mismo, la lista. Para hacer uso de las notificaciones tenemos que configurar nuestra cuenta. En el panel principal de usuario pulsar sobre [ Edit profile ] y seguidamente en [Notifications] . El bot\u00f3n [Star] es una forma de marcar los repositorios que nos gustan. El bot\u00f3n [Fork] permite que copiemos el proyecto a nuestro espacio de trabajo creando nuestra propia versi\u00f3n. Eliminar un repositorio Si hemos creado un repositorio que queremos eliminar, entrar en la p\u00e1gina principal del mismo, donde se muestra la lista de archivos, pulsar en el enlace [settings] y hacer uso de la opci\u00f3n que aparece al final, [delete this repository] . Por supuesto, perderemos todos los contenidos si no los hemos respaldado previamente. Convertir un repositorio GitHub en privado Si tenemos una cuenta de pago, seleccionar el repositorio, pulsar sobre el icono [settings] , y hacer uso de la opci\u00f3n que aparece al final de la configuraci\u00f3n del repositorio, Make this repository private . Los repositorios privados solo est\u00e1n disponibles para cuentas de pago. Configurar o eliminar una cuenta de usuario de GitHub Para modificar la configuraci\u00f3n de nuestra cuenta debemos iniciar una sesi\u00f3n de GitHub con nuestro nombre de usuario y password. Si no estamos en la p\u00e1gina principal de nuestra cuenta, en la esquina superior derecha de cualquier p\u00e1gina pulsar sobre el men\u00fa desplegable, y seguidamente en la opci\u00f3n [ your profile ] . Pulsar sobre el bot\u00f3n [ Edit Profile ] y seguidamente en la opci\u00f3n [Account] . Las opciones son: cambiar la password cambiar el nombre de usuario eliminar la cuenta de usuario \u00a1Cuidado con las dos \u00faltimas opciones!. El nombre de usario puede estar ligado a otros recursos y cambiarlo puede darnos bastantes quebraderos de cabeza. Y obviamente, eliminar la cuenta de usuario supone la p\u00e9rdida de todos los contenidos si no los tenemos respaldados en nuestro ordenador o en otro recurso de red. La documentaci\u00f3n de GitHub Pulsando en el icono de nuestro perfil, en la esquina superior derecha, veremos que la opci\u00f3n Help nos da acceso al manual de GitHub . Tambi\u00e9n contamos con una excelente colecci\u00f3n de tutoriales. V\u00e9ase por ejemplo: Tutoriales Github Mastering Markdown Getting started with Github Pages","title":"Github"},{"location":"001Github.html#github","text":"En este cap\u00edtulo veremos como darnos de alta y hacer uso de esta plataforma.","title":"Github"},{"location":"001Github.html#creando-una-cuenta-nueva","text":"Para registrarnos como usuarios necesitamos una cuenta de correo. Puede ser una buena idea crear previamente una nueva para no mezclar estas cosas con nuestro correo personal. Seguidamente, en la p\u00e1gina inicial de GitHub veremos dos enlaces: Sign In , para acceder si ya tenemos un c\u00f3digo de usuario y contrase\u00f1a Sign Up , para crear una nueva cuenta de usuario. Pulsamos en el enlace [Sign_up] , o bien introducimos directamente nuestras credenciales en el formulario que se facilita en la p\u00e1gina principal, nuevo nombre de usuario, e-mail y la contrase\u00f1a que queremos establecer. A continuaci\u00f3n veremos un asistente que nos pedir\u00e1 que indiquemos el tipo de cuenta: gratis o de pago. Estas \u00faltimas permiten un mayor espacio de almacenamiento, y la posibilidad de que los repositorios sean privados. Atenci\u00f3n: La privacidad de los repositorios se refiere a los archivos que subamos a GitHb. Pero si hacemos uso de GitHub Pages para convertir nuestros documentos y mostrarlos como p\u00e1ginas web, estas ser\u00e1n p\u00fablicas. GitHub Pages no cuenta con la posibilidad de crear sitios web privados, accesibles solo para personas autorizadas. El siguiente paso del proceso de alta es cumplimentar una encuesta. Pulsamos en el bot\u00f3n [Submit] , al final del formulario. A continuaci\u00f3n tenemos la p\u00e1gina principal de nuestra cuenta de usuario, con una lista de proyectos que por ahora est\u00e1 vac\u00eda: Antes de seguir adelante, debemos abrir nuestro gestor de correo y buscar el mensaje que nos ha enviado GitHub , donde se nos facilita un enlace en el que debemos pulsar para confirmar que se trata de una direcci\u00f3n de correo real.","title":"Creando una cuenta nueva"},{"location":"001Github.html#la-pagina-principal","text":"Cada vez que nos identifiquemos con nuestro c\u00f3digo de usuario tendremos una sesi\u00f3n abierta que se mantendr\u00e1 en ese estado aunque cerremos la ventana del navegador. Siempre que visualicemos cualquier p\u00e1gina de GitHub , en la esquina superior izquierda tenemos el logo de este servicio: un \u201c octogato \u201c Pulsando sobre ese icono volvemos a la p\u00e1gina principal de GitHub , donde si tenemos una sesi\u00f3n abierta se mostrar\u00e1 nuestra lista de proyectos. En la esquina superior de la derecha vemos unos iconos muy \u00fatiles. Pulsando en el s\u00edmbolo [+] podemos crear nuevos proyectos. En esa esquina veremos tambi\u00e9n un icono con nuestra foto de perfil (que por ahora es un s\u00edmbolo abstracto). Pulsando aqu\u00ed obtenemos una lista desplegable con varias opciones: visualizar el manual de ayuda de GitHub , acceder a nuestra configuraci\u00f3n de usuario, o cerrar la sesi\u00f3n [Sign_out] . Es importante dejar la sesi\u00f3n correctamente cerrada, para evitar accidentes indeseados.","title":"La p\u00e1gina principal"},{"location":"001Github.html#configurar-la-cuenta","text":"Para revisar nuestro perfil de usuario tenemos que pulsar en la esquina superior derecha y en el men\u00fa desplegable seleccionar \u201c Your Profile \u201d.","title":"Configurar la cuenta"},{"location":"001Github.html#creando-un-proyecto","text":"Cada usuario puede alojar varios proyectos en su cuenta, cada uno en un repositorio diferente. Para crear un proyecto nuevo podemos pulsar en el bot\u00f3n [Start a Project] de la p\u00e1gina principal, o bien en el icono [+] de la esquina superior derecha. Aparece la p\u00e1gina de creaci\u00f3n de nuevo repositorio: Introducimos el nombre de repositorio (que es lo mismo que el nombre del proyecto), una descripci\u00f3n, y seleccionamos si se trata de un repositorio p\u00fablico o privado. Los privados no pueden ser visualizados por usuarios no autorizados, pero requieren una cuenta de pago. Los p\u00fablicos son visibles para todo el mundo, incluso para quienes no sean usuarios de GitHub . Adem\u00e1s se permite que otros usuarios copien los contenidos para su propio uso. A fin de cuentas, GitHub es un servicio para compartir software. Se nos dar\u00e1 la opci\u00f3n de empezar con un repositorio vac\u00edo, o iniciarlo con tres archivos de texto opcionales. Se recomienda incluir el primero de ellos como m\u00ednimo: Archivo README, que contiene una presentaci\u00f3n del proyecto y se utiliza a efectos de documentaci\u00f3n. Licencia de uso. Teniendo en cuenta que la filosof\u00eda de GitHub es compartir documentos, posiblemente querremos especificar unas condiciones de uso para evitar que alguien se apropie de nuestro trabajo y se asigne derechos de copyright. Podemos elegir entre varios tipos de licencias: licencia apache 2.0 licencia GNU, en varios formatos licencia MIT licencia BSD licencia Eclipse licencia Mozilla 2.0 Dependiendo de nuestra elecci\u00f3n, el texto que se mostrar\u00e1 otorgar\u00e1 unos permisos y limitaciones diferentes. Pulsar aqu\u00ed para ver diferentes tipos de licencias y hacernos una idea. Archivo \u201c.gitignore\u201d. Si editamos los documentos en nuestro ordenador local, tendremos que subirlos posteriormente al repositorio GitHub , con lo que tendremos los archivos por duplicado. El problema es coordinar que cuando se modifica un documento en cualquiera de los dos entornos, ambos est\u00e9n sincronizados. Esta sincronizaci\u00f3n se lleva a cabo con la ayuda de un software llamado git , que actualiza el entorno m\u00e1s desfasado (el local o el remoto), sustituyendo la versi\u00f3n m\u00e1s antigua del fichero por la m\u00e1s nueva. El archivo .gitignore contiene la lista de archivos y carpetas que no ser\u00e1n tenidos en cuenta en esa sincronizaci\u00f3n. Nota: En los sistemas operativos tipo UNIX (Linux, MacOS, etc) la forma de hacer que un fichero sea oculto es ponerle un punto \u201c.\u201d como prefijo del nombre. Finalmente pulsamos en el bot\u00f3n [ Create Repository ] .","title":"Creando un proyecto"},{"location":"001Github.html#editando-archivos","text":"Tras crear el repositorio, aparece la ventana principal del mismo: Hacia la mitad de la ventana tenemos la lista de archivos. Por ahora solo tenemos un fichero llamado README.md con el prop\u00f3sito de documentar el proyecto. Debajo de la lista se muestra el contenido de README.md . Pulsando con el rat\u00f3n sobre cualquier documento, se visualiza el contenido del mismo: GitHub intentar\u00e1 presentar ese contenido de acuerdo a su extensi\u00f3n. Un archivo .jpg , por ejemplo, se mostrar\u00e1 como imagen, y un archivo .md o .markdown , como texto. Este formato es el m\u00e1s popular de GitHub para crear archivos de texto que requieran de una presentaci\u00f3n un poco elaborada (cabeceras, tipos de letra, im\u00e1genes, enlaces, etc). Al visualizar un archivo, encima del mismo, y hacia la derecha, se muestran algunos iconos de utilidad: Pulsar sobre el icono del lapicero para editar el documento e introducir modificaciones. Pulsar sobre el icono de la papelera para eliminarlo. El bot\u00f3n raw muestra el fichero en formato de \u201ctexto plano\u201d, no llevando a cabo adaptaciones para mostrar su aspecto final. El bot\u00f3n blame muestra cada l\u00ednea de texto indicando quien la modific\u00f3 y en que fecha. Resulta \u00fatil en proyectos de equipo. El bot\u00f3n history muestra el log de cambios del fichero. Advertencia: \u00a1Cuidado con el icono del lapicero cuando estamos visualizando repositorios de otros usuarios!. En principio no deber\u00eda permitirnos editar un archivo que no es nuestro, pero si hemos entrado a \u201cGitHub\u201d con nuestra cuenta de usuario y contrase\u00f1a, lo que sucede es que se crea autom\u00e1ticamente una copia (\u201cfork\u201d) en nuestra cuenta, y nos permite editar la nueva versi\u00f3n derivada de la original. Al propietario le aparecer\u00e1 un mensaje indicando que alguien ha iniciado un nuevo proyecto basado en el suyo. Si modificamos cualquier documento debemos finalizar la edici\u00f3n pulsando en la parte inferior de la p\u00e1gina sobre el bot\u00f3n [commit_changes] para guardar los cambios realizados.","title":"Editando archivos"},{"location":"001Github.html#anadiendo-archivos-a-un-repositorio","text":"Para subir archivos desde nuestro ordenador personal, accedemos a la p\u00e1gina principal del proyecto y pulsamos en el bot\u00f3n [upload_files] : Se muestra la siguiente p\u00e1gina: Pulsamos sobre el enlace [choose your files] o bien arrastramos directamente los archivos sobre el panel: ficheros de texto, im\u00e1genes, pdfs, etc. Finalmente bajamos hasta el pie de p\u00e1gina y pulsamos en el bot\u00f3n [ Commit Changes ] para que se lleve a cabo la operaci\u00f3n. Advertencia: Cada operaci\u00f3n de subida de archivos tiene un l\u00edmite en cuanto a n\u00famero de ficheros y tama\u00f1o. Es posible que tengamos que hacer la operaci\u00f3n en varias etapas, limitando el n\u00famero de archivos en cada una de ellas. En cuanto a las im\u00e1genes demasiado grandes, es recomendable utilizar previamente alguna herramienta de conversi\u00f3n que permita reducir el tama\u00f1o de la imagen. Otra posibilidad es crear directamente un archivo de texto desde cero. En la p\u00e1gina principal del repositorio, pulsar sobre el bot\u00f3n [Create new file] . Aparecer\u00e1 un panel de edici\u00f3n para introducir el texto: En la parte superior tenemos un recuadro para asignar un nombre al archivo. A\u00f1adiendo un car\u00e1cter / convertiremos lo que hay a su izquierda en nombre de subcarpeta. Usando la tecla de borrado hacia atr\u00e1s, podemos borrar el nombre de la carpeta y cambiarlo por otra, que si no existe, se crear\u00e1. Pulsando en el bot\u00f3n inferior [ Commit Changes ] se guardar\u00e1n los cambios. El bot\u00f3n est\u00e1 desactivado hasta que no asignemos un nombre al documento.","title":"A\u00f1adiendo archivos a un repositorio"},{"location":"001Github.html#cambiando-el-nombre-de-un-archivo","text":"Para modificar el nombre de un archivo, moverlo a otra carpeta, o ponerlo en una nueva, seleccionar dicho archivo, pulsar en el icono del lapicero, y en la p\u00e1gina de edici\u00f3n, modificar el nombre. Para cambiarlo de carpeta, usar la tecla de borrado hacia atr\u00e1s para modificar el nombre de la misma.","title":"Cambiando el nombre de un archivo"},{"location":"001Github.html#haciendo-una-copia-del-repositorio","text":"Una vez que hemos creado los primeros documentos, podemos descargar una copia a nuestro ordenador personal pulsando en el bot\u00f3n [download] en la lista de archivos. Seleccionamos la opci\u00f3n Download zip , que baja un archivo .zip con todo los contenidos del repositorio. Tambi\u00e9n podemos usar GitHub Desktop , un software para sincronizar proyectos de GitHub con los contenidos de nuestra m\u00e1quina local. Veremos su funcionamiento en otro cap\u00edtulo de este cuaderno.","title":"Haciendo una copia del repositorio"},{"location":"001Github.html#crear-una-rama-branch","text":"Dentro de un proyecto podemos crear varias \u201cramas\u201d de desarrollo, es decir, versiones en paralelo. Podemos tener, por ejemplo, una versi\u00f3n estable del proyecto y una de trabajo donde vamos introduciendo las modificaciones sin afectar a la versi\u00f3n principal. Por defecto cada repositorio se crea con una rama llamada master . Cuando creamos una nueva rama, lo que hacemos es clonar la existente para seguir trabajando en la copia e introducir cambios. Para crear una rama a partir de la actual, debemos situarnos en el repositorio en cuesti\u00f3n y en la cabecera de la lista de archivos pulsamos sobre el bot\u00f3n [branch] . Se despliega un men\u00fa para seleccionar alguna de las ramas que tengamos vigentes. El men\u00fa cuenta con un recuadro de edici\u00f3n que permite introducir un nuevo nombre. A medida que lo escribimos se crea una nueva entrada en la lista desplegable. La seleccionamos. Tras crear la nueva rama, todos los archivos de la anterior se copian autom\u00e1ticamente. Podemos usar el bot\u00f3n [branch] para pasar de una rama a otra.","title":"Crear una rama (branch)"},{"location":"001Github.html#pull-request","text":"Tras introducir modificaciones en la rama \u201cde pruebas\u201d lanzaremos una \u201cpull request\u201d, es decir, una petici\u00f3n para que la rama padre incorpore (pull) los commits de nuestra rama actual. Para ver esto con m\u00e1s detalle, GitHub proporciona un tutorial sobre como crear repositorios, ramas y pull requests . La operaci\u00f3n \u201cpull request\u201d mostrar\u00e1 las diferencias entre ambas ramas: cambios, adiciones y eliminaciones, que se ven en diferentes colores. El primer paso es seleccionar la rama que contiene la versi\u00f3n m\u00e1s actualizada, con los cambios introducidos. En la cabecera de la lista de archivos, junto al selector de ramas, tenemos el bot\u00f3n [new pull request] . Esto nos muestra la lista de cambios realizados. Tras comprobarlo, pulsamos sobre el bot\u00f3n [create pull request] . A continuaci\u00f3n se mostrar\u00e1 nuestra lista de peticiones pendientes y una comprobaci\u00f3n de conflictos. Si todo est\u00e1 OK, podemos pulsar sobre el bot\u00f3n [merge pull request] para actualizar la rama master . Si todo va bien, visualizaremos el mensaje Pull request successfully merged and closed . Se nos da la opci\u00f3n de suprimir la rama de trabajo, ya que ahora est\u00e1 duplicada con la master . La lista de pulls request se visualiza pulsando en la barra superior de la p\u00e1gina del proyecto, en el enlace [ pull resquests ] . Para volver a la lista de archivos, pulsar sobre el icono [code] .","title":"Pull request"},{"location":"001Github.html#los-botones-watch-star-y-fork","text":"Estos tres botones se muestran en la esquina superior derecha de cada repositorio de GitHub . Podemos tener seguidores de un proyecto, que recibir\u00e1n un e-mail cada vez que hagamos cambios. Pulsando en el enlace [watch] de un repositorio ajeno, si somos un usuario registrado podemos convertirnos en seguidores del proyecto. A la derecha se muestra el n\u00famero de seguidores, y pulsando sobre el mismo, la lista. Para hacer uso de las notificaciones tenemos que configurar nuestra cuenta. En el panel principal de usuario pulsar sobre [ Edit profile ] y seguidamente en [Notifications] . El bot\u00f3n [Star] es una forma de marcar los repositorios que nos gustan. El bot\u00f3n [Fork] permite que copiemos el proyecto a nuestro espacio de trabajo creando nuestra propia versi\u00f3n.","title":"Los botones Watch, Star, y Fork"},{"location":"001Github.html#eliminar-un-repositorio","text":"Si hemos creado un repositorio que queremos eliminar, entrar en la p\u00e1gina principal del mismo, donde se muestra la lista de archivos, pulsar en el enlace [settings] y hacer uso de la opci\u00f3n que aparece al final, [delete this repository] . Por supuesto, perderemos todos los contenidos si no los hemos respaldado previamente.","title":"Eliminar un repositorio"},{"location":"001Github.html#convertir-un-repositorio-github-en-privado","text":"Si tenemos una cuenta de pago, seleccionar el repositorio, pulsar sobre el icono [settings] , y hacer uso de la opci\u00f3n que aparece al final de la configuraci\u00f3n del repositorio, Make this repository private . Los repositorios privados solo est\u00e1n disponibles para cuentas de pago.","title":"Convertir un repositorio GitHub en privado"},{"location":"001Github.html#configurar-o-eliminar-una-cuenta-de-usuario-de-github","text":"Para modificar la configuraci\u00f3n de nuestra cuenta debemos iniciar una sesi\u00f3n de GitHub con nuestro nombre de usuario y password. Si no estamos en la p\u00e1gina principal de nuestra cuenta, en la esquina superior derecha de cualquier p\u00e1gina pulsar sobre el men\u00fa desplegable, y seguidamente en la opci\u00f3n [ your profile ] . Pulsar sobre el bot\u00f3n [ Edit Profile ] y seguidamente en la opci\u00f3n [Account] . Las opciones son: cambiar la password cambiar el nombre de usuario eliminar la cuenta de usuario \u00a1Cuidado con las dos \u00faltimas opciones!. El nombre de usario puede estar ligado a otros recursos y cambiarlo puede darnos bastantes quebraderos de cabeza. Y obviamente, eliminar la cuenta de usuario supone la p\u00e9rdida de todos los contenidos si no los tenemos respaldados en nuestro ordenador o en otro recurso de red.","title":"Configurar o eliminar una cuenta de usuario de GitHub"},{"location":"001Github.html#la-documentacion-de-github","text":"Pulsando en el icono de nuestro perfil, en la esquina superior derecha, veremos que la opci\u00f3n Help nos da acceso al manual de GitHub . Tambi\u00e9n contamos con una excelente colecci\u00f3n de tutoriales. V\u00e9ase por ejemplo: Tutoriales Github Mastering Markdown Getting started with Github Pages","title":"La documentaci\u00f3n de GitHub"},{"location":"002CrearPaginaWeb.html","text":"Creando un sitio web Una vez que nos hemos dado de alta en GitHub y estamos preparados para crear documentos en esa plataforma, vamos a desarrollar un sitio web experimental a partir de nuestros contenidos. Organizar los repositorios GitHub Pages es un servicio especial de GitHub que convierte documentos en p\u00e1ginas web. Podemos tener tantos sitios web como queramos, uno por repositorio. Las personas que quieran acceder a nuestra p\u00e1gina deben introducir como URL: https://nombreUsuario.github.io/nombreProyecto sustituyendo nombreUsuario y nombreProyecto por lo que corresponda. Podemos crear un sitio gen\u00e9rico a nivel de usuario, accesible mediante la URL: https://nombreUsuario.github.io Para ello debemos poner la documentaci\u00f3n en un repositorio cuyo nombre ser\u00e1 \u201cnombreUsuario.github.io\u201d. En mi caso particular, tengo lo siguiente: el nombre de usuario es cuadernosdenotas para la p\u00e1gina de portada tengo un repositorio llamado cuadernosdenotas.github.io para cada cuaderno tengo otro repositorio con el nombre que corresponda, accesible mediante la URL cuadernosdenotas.github.io/ nombrecuaderno . Se puede examinar esta disposici\u00f3n accediendo a mi lista de repositorios . Para los ejemplos que vienen a continuaci\u00f3n, he creado un usuario \u201cde pruebas\u201d llamado flxc . Nuestra primera p\u00e1gina Comenzamos por crear un nuevo repositorio llamado github.com/flxc/prueba , con un archivo README.md. Vamos a crear un sitio web a partir de ese repositorio. Cada p\u00e1gina ser\u00e1 un archivo HTML. Lo habitual es que la p\u00e1gina principal sea un texto llamado index.html . Dejaremos README.md como documentaci\u00f3n. Con la lista de archivos del repositorio a la vista, pulsamos sobre el bot\u00f3n \u201c Create new file \u201d e introducimos lo siguiente: <!DOCTYPE html> < html > < head > </ head > < body > < h1 > Mi primera p\u00e1gina web </ h1 > < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. </ p > < p > Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </ p > </ body > </ html > y lo guardamos como index.html . Lo que vemos es el t\u00edpico archivo de texto en formato html , que es el est\u00e1ndar b\u00e1sico de las p\u00e1ginas web. El contenido de los ficheros es una mezcla de texto y etiquetas < > . Estas \u00faltimas representan instrucciones para el navegador. Ahora tendremos dos archivos, uno de texto en formato markdown llamado readme.md con una descripci\u00f3n del proyecto, y el otro en formato html llamado index.html , que contiene el texto de nuestra primera p\u00e1gina web. Vamos a decirle a GitHub que queremos convertir todo esto en un sitio web. En la p\u00e1gina principal del repositorio, pulsamos en el enlace [settings] . Esto nos da acceso a la p\u00e1gina de configuraci\u00f3n del repositorio. Bajamos hasta el apartado GitHub Pages , y en el subapartado Source tenemos un bot\u00f3n para seleccionar la rama/carpeta donde se ubican los documentos. Cambiamos none por master branch y pulsamos en el bot\u00f3n [Save] para activar el generador de p\u00e1ginas. Se pone en marcha el generador del sitio web. Podemos ver el estado del mismo entrando en esta p\u00e1gina settings , apartado GitHub Pages , y viendo el mensaje que se muestra, que puede ser: GitHub Pages is currently disabled . La generaci\u00f3n autom\u00e1tica de p\u00e1ginas web est\u00e1 desactivada (podemos desactivarla seleccionando de nuevo none como rama del repositorio). Your site is ready to be published at https://nombreusuario.github.io/ . Se est\u00e1 llevando a cabo la compilaci\u00f3n. N\u00f3tese que GitHub Pages puede tener unos l\u00edmites, y si hemos rebasado el n\u00famero m\u00e1ximo de compilaciones por hora, este mensaje se mantendr\u00e1 hasta que se desbloquee el generador. Your site is published at https://nombreusuario.github.io/ (sobre fondo verde). Se ha ejecutado la compilaci\u00f3n con \u00e9xito. Your site is having problems building: texto de error (sobre fondo amarillo). Se ha producido un fallo de compilaci\u00f3n. Nota: La compilaci\u00f3n y generaci\u00f3n de p\u00e1ginas se mantiene activada de forma permanente y actuar\u00e1 cada vez que modifiquemos cualquier archivo del repositorio, refrescando nuestro sitio web. Si vamos a introducir muchas modificaciones, conviene desactivar el servicio temporalmente seleccionando la opci\u00f3n None en la lista Source de la p\u00e1gina settings . Cuando se muestre el mensaje: Your site is published at https://usuario.github.io/repositorio/ podemos pulsar sobre ese enlace para examinar nuestra nueva p\u00e1gina web. El resultado es el siguiente: El formato html Las etiquetas HTML obedecen a un est\u00e1ndar denominado Hipertext Markup Language , coordinado por un consorcio mundial llamado w3c . Veamos una breve explicaci\u00f3n de las etiquetas utilizadas en este primer ejemplo: La primera etiqueta es <!DOCTYPE html> . Le dice al navegador que lo que viene a continuaci\u00f3n es un documento que se ajusta a ese est\u00e1ndar. La etiqueta <html> delimita el comienzo del documento. Se corresponde con la etiqueta final </html> que sirve como etiqueta de cierre. La etiqueta <head> delimita el comienzo de la cabecera del documento. Se corresponde con la etiqueta </head> que sirve de etiqueta de cierre de esa secci\u00f3n. La cabecera del documento se utiliza para incorporar definiciones e informaci\u00f3n acerca de la p\u00e1gina web. Por ahora, hemos dejado esta secci\u00f3n vac\u00eda. La etiqueta <body> y su correspondiente etiqueta de cierre </body> delimitan el \u201ccuerpo\u201d del documento, es decir, el texto y elementos visibles. Las etiquetas <p> y </p> delimitan p\u00e1rrafos. Si queremos un p\u00e1rrafo de t\u00edtulo, lo delimitaremos con etiquetas <h1> ... </h1> . En un documento estructurado en cap\u00edtulos, subcap\u00edtulos y apartados, se admiten hasta seis niveles de l\u00edneas de cabeceras, siendo las de nivel 1 las que se muestran m\u00e1s resaltadas. Se representa con etiquetas que van de <h1> hasta <h6> y sus correspondientes etiquetas de cierre de </h1> hasta </h6> . Nota: HTML es un formato complejo. Otras etiquetas permiten representar enlaces, im\u00e1genes, tablas, listas, y un largo etc\u00e9tera. Nota: En el formato HTML, las l\u00edneas en blanco, saltos de l\u00ednea, sangrado y espaciado extra en general, ser\u00e1 ignorado por el navegador en el momento de visualizar la p\u00e1gina. Estilos Cambiando el tipo de letra, los colores, alineaci\u00f3n, espaciado, etc. crearemos p\u00e1ginas m\u00e1s vistosas. Podemos establecer unas reglas de estilo y ponerlas en un archivo especial llamado \u201c hoja de estilos \u201d. Supongamos que, por ejemplo, queremos lo siguiente: cuerpo de la p\u00e1gina, representado por la etiqueta body : poner un fondo de color beige suave. cabeceras de nivel uno, representadas por etiquetas <h1> : texto blanco sobre fondo verde. Alineaci\u00f3n del texto: centrado. resto de p\u00e1rrafos delimitados por etiquetas <p> : texto en color verde oscuro. Para cada tipo de elemento creamos una colecci\u00f3n de definiciones de atributos, donde cada uno de ellos se escribe en formato atributo:valor . Cada atributo se delimita con un punto y coma final, y el conjunto de definiciones se delimita entre llaves. Por ejemplo, para las cabeceras, escribir\u00edamos: h1 { background-color : green ; color : white ; text-align : center ; } Este formato se denomina css ( cascading style sheets ), y su sintaxis, nombres y posibles valores de atributos siguen las normas establecidas por el w3c . Vamos a crear un archivo llamado estilos.css con el siguiente contenido: body { background-color : cornsilk ;} h1 { background-color : green ; color : white ; text-align : center ; } p { color : darkgreen ; } Nota: Al igual que sucede con el formato HTML, las l\u00edneas en blanco, saltos de l\u00ednea, sangrado y espaciado extra en general, ser\u00e1 ignorado por el navegador en el momento de visualizar la p\u00e1gina. Hemos asignado nombres de colores de acuerdo a los est\u00e1ndares css . V\u00e9ase la referencia aqu\u00ed . Tambi\u00e9n podr\u00edamos usar los c\u00f3digos de cada color, precedidos por un car\u00e1cter # : body { background-color : #FFF8DC ;} En el archivo index.html tenemos que indicar que queremos enlazar con esa hoja de estilos . Para ello utilizaremos la etiqueta <link> , que colocaremos en las definiciones de la secci\u00f3n <head >. Aprovecharemos para incluir una definici\u00f3n del t\u00edtulo que queremos visualizar en la barra superior de la ventana del navegador: <!DOCTYPE html> < html > < head > < title > Mi primera p\u00e1gina web </ title > < link rel = \"stylesheet\" href = \"estilos.css\" > </ head > < body > < h1 > Mi primera p\u00e1gina web </ h1 > < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. </ p > < p > Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </ p > </ body > </ html > Toda etiqueta html sirve para delimitar un elemento de la p\u00e1gina web, y los atributos del elemento se pueden establecer en la etiqueta de apertura usando el formato: < etiqueta atributo1 = \"valor 1\" atributo2 = \"valor 2\" > texto </ etiqueta > El texto entre la etiqueta de apertura y la de cierre es el elemento delimitado por esas etiquetas. Cuando una etiqueta es un elemento en si misma, como sucede con <link> , no habr\u00e1 etiqueta de cierre y se dice que tenemos un elemento \u201cvac\u00edo\u201d. Los atributos se escriben siempre en la etiqueta de apertura, y se separan con espacios en blanco. En este caso utilizamos el atributo rel para establecer que el archivo enlazado es una \u201choja de estilos\u201d y el atributo href para hacer referencia al nombre del archivo a enlazar: < link rel = \"stylesheet\" href = \"estilos.css\" > Tras modificar index.html y crear estilos.css , al refrescarse la p\u00e1gina web veremos que ha cambiado el aspecto: La propiedad style Lo anterior sirve para establecer las reglas de estilo para todos los elementos del mismo tipo (cabeceras, p\u00e1rrafos, etc.). Pero\u2026 \u00bfcomo podemos cambiar el estilo de un elemento individual sin afectar a los otros? Escribiendo las reglas de estilo directamente en la etiqueta de apertura del elemento. Utilizaremos el atributo style : < h1 style = \" ...reglas de estilo... \" > Mi primera p\u00e1gina web </ h1 > Las reglas de estilo se escriben en formato: atributo1 : valor1 ; atributo1 : valor1 ; atributo1 : valor1 ; con lo que en nuestro ejemplo tendremos: < h1 style = \"background-color: green; color:white; text-align:center;\" > Mi primera p\u00e1gina web </ h1 > Recu\u00e9rdese que el espaciado y saltos de l\u00ednea son irrelevantes en archivos html . Otra forma de asignar un estilo a un elemento individual es asignarle un nombre mediante el atributo id : < h1 id = \"cabecera\" > Mi primera p\u00e1gina web </ h1 > Esto nos permite hacer referencia a ese elemento en la hoja de estilos: body { background-color : cornsilk ;} # cabecera { background-color : green ; color : white ; text-align : center ; } p { color : darkgreen ; } En formato css , para hacer referencia a un elemento por su id , este debe escribirse con un prefijo # . \u00bfComo podemos asignar un estilo especial a varios elementos sin que afecte a todos los del mismo tipo? Supongamos que queremos resaltar en color rojo los p\u00e1rrafos pares y no hacerlo con los impares. La soluci\u00f3n es agrupar los elementos afectados, y asignarles un nombre de \u201cclase\u201d: < p class = \"pares\" > texto del p\u00e1rrafo </ p > Ahota tenemos varios p\u00e1rrafos declarados como miembros de la clase \u201cpares\u201d. Tenemos que definir el atributo \u201cclass\u201d en todos ellos. En la hoja de estilos, las clases van precedidas por un punto \u201c.\u201d . pares { color=red ;} Enlaces a otras p\u00e1ginas En nuestro sitio web podemos crear tantos archivos HTML como queramos, cada uno representando una p\u00e1gina, aunque la que se visualizar\u00e1 autom\u00e1ticamente ser\u00e1 siempre index.html . Para visualizar el resto de las p\u00e1ginas, tenemos que insertar enlaces en los textos. Para ello incluimos una etiqueta en formato: < a > texto del enlace </ a > . Por ejemplo: < h1 > Mi primera p\u00e1gina web </ h1 > < h2 > Indice de p\u00e1ginas </ h2 > < p > Cap\u00edtulo 1: < a > pulsar aqu\u00ed </ a ></ p > < p > Cap\u00edtulo 2: < a > pulsar aqu\u00ed </ a ></ p > < p > Cap\u00edtulo 3: < a > pulsar aqu\u00ed </ a ></ p > Y para cada l\u00ednea visualizaremos el texto: Cap\u00edtulo x: pulsar aqu\u00ed V\u00e9ase que el texto del enlace forma parte del p\u00e1rrafo. Pero nos falta indicar para cada enlace cual es el archivo a enlazar. Para este prop\u00f3sito, usaremos el atributo href de la etiqueta <a> : < h1 > Indice de p\u00e1ginas </ h1 > < p > Cap\u00edtulo 1: < a href = \"capitulo1.html\" > pulsar qu\u00ed </ a ></ p > < p > Cap\u00edtulo 2: < a href = \"capitulo2.html\" > pulsar qu\u00ed </ a ></ p > < p > Cap\u00edtulo 3: < a href = \"capitulo3.html\" > pulsar qu\u00ed </ a ></ p > Seguidamente tendremos que crear los archivos enlazados. Con eso, nuestro sitio web tendr\u00e1 seis archivos: readme.md index.html estilos.css capitulo1.html capitulo2.html capitulo3.html Archivos markdown La redacci\u00f3n de documentos extensos en formato .html puede llegar a ser bastante farragosa por culpa de la presencia de etiquetas. Por este motivo, GitHub permite que redactemos los documentos en formato markdown , y al generar el sitio web, har\u00e1 la conversi\u00f3n autom\u00e1tica a html , a\u00f1adiendo al texto las etiquetas necesarias. Siguiendo con el ejemplo anterior, vamos a borrar el archivo index.html , y crear uno llamado index.md , con el siguiente contenido: --- title: Creando este sitio author: jf --- # Mi primera p\u00e1gina web Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. El formato markdown resulta c\u00f3modo de redactar, pero exige respetar algunas normas: Los p\u00e1rrafos deben separarse con una l\u00ednea en blanco entre ellos. Si queremos un p\u00e1rrafo resaltado como t\u00edtulo, debemos ponerle un car\u00e1cter # como prefijo, con un espacio en blanco separ\u00e1ndolo del texto. En la conversi\u00f3n, se sustituir\u00e1 ese car\u00e1cter por las correspondientes etiquetas <h1> . GitHub cuenta con la posibilidad de establecer \u201cpropiedades del documento\u201d en forma de metadatos , que se definen en una secci\u00f3n opcional de cabecera llamada front-matter . Se delimita entre dos l\u00edneas formadas por tres guiones cada una. Cada metadato se escribe en formato nombre : valor . Nota: A diferencia de los formatos HTML y CSS, en los archivos markdown el sangrado a la izquierda del texto tiene valor sint\u00e1ctico. Se deben respetar unas reglas de escritura que veremos en un cap\u00edtulo posterior. Para generar el sitio web a partir de archivos markdown , GitHub utiliza internamente un software conversor llamado Jekyll . Este programa plantea algunos requerimientos: Tenemos que a\u00f1adir un archivo de configuraci\u00f3n llamado _config.yml (n\u00f3tese el prefijo en forma de subrayado), que contenga una lista de definiciones de par\u00e1metros del proceso de conversi\u00f3n. En su m\u00ednima expresi\u00f3n, el contenido de este archivo podr\u00eda ser: title : Mi sitio web Debemos poner nuestra hoja de estilos en una carpeta llamada css Hay que crear un archivo html que sirva como plantilla por defecto para las conversiones. Se llamar\u00e1 default.html y se alojar\u00e1 en la carpeta _layouts . En conjunto, nuestra primera p\u00e1gina a partir de archivos markdown requerir\u00e1 lo siguiente: index.md , un documento en formato markdown que se convertir\u00e1 en index.html . readme.md , un documento con un resumen del proyecto, a efectos de documentaci\u00f3n. No es imprescindible. _config.yml , un archivo con la configuraci\u00f3n del proceso de conversi\u00f3n, donde cada l\u00ednea es una pareja parametro:valor . css/estilos.css , un archivo con definiciones de estilos _layouts/default.html ser\u00e1 la plantilla en formato html, a utilizar para la conversi\u00f3n de todas las p\u00e1ginas, incluyendo index.html . El contenido de la plantilla default.html podr\u00eda ser algo as\u00ed como: <!DOCTYPE html> <html> <head> <title> {{ site . title }} </title> <link rel=\"stylesheet\" href=\"css/estilos.css\"> </head> <body> {{ content }} </body> </html> Las marcas delimitadas entre {{ }} ser\u00e1n sustituidas durante el proceso de conversi\u00f3n por los contenidos. La marca {{ content }} ser\u00e1 sustituida por el texto del archivo markdown , una vez transformado a html . La marca {{ site.title }} ser\u00e1 sustuida por el par\u00e1metro title definido en el archivo de configuraci\u00f3n _config.yml . Tras hacer todos estos cambios, si activamos el proceso de conversi\u00f3n desde la p\u00e1gina settings , el resultado deber\u00eda ser el mismo que cuando hemos creado el sitio web a partir de archivos .html directamente: Nota: Los archivos HTML generados por Jekyll no se muestran en el listado de archivos del repositorio. Par\u00e1metros La conversi\u00f3n se puede configurar mediante los par\u00e1metros definidos en el front-matter de cada p\u00e1gina, o bien en el archivo de configuraci\u00f3n del proyecto, _config.yml . La diferencia entre unos y otros es que los primeros afectan a la p\u00e1gina en cuesti\u00f3n, y los segundos, a todo el proyecto. La forma de influir en los resultados depende del uso que hagamos de ellos en la plantilla. Si por ejemplo, escribimos {{ site.title }} se insertar\u00e1 el t\u00edtulo definido en el archivo de configuraci\u00f3n. Si escribimos {{ page.title }} , se insertar\u00e1 el t\u00edtulo definido en el front-matter de la p\u00e1gina. Temas Un tema es un conjunto de plantillas y hojas de estilo que podemos utilizar como embri\u00f3n de diferentes proyectos. Cuando creamos un proyecto desde cero, podemos usar un tema creado por nosotros, o bien uno de los que GitHub nos proporciona para contribuir a mejorar el aspecto de nuestro sitio web. V\u00e9ase la lista de esos temas en esta p\u00e1gina . Pulsando sobre cualquiera de ellos, podemos ir al repositorio del mismo, donde descubriremos una colecci\u00f3n de archivos de plantilla y estilos que GitHub Pages tomar\u00e1 para unirlos a nuestros documentos y formar la p\u00e1gina web definitiva. No tenemos por que limitarnos a lo proporcionado por GitHub ; existen cientos de temas de terceros disponibles en la red. V\u00e9ase una amplia colecci\u00f3n en p\u00e1ginas como esta o en esta otra . En realidad, el uso de esos temas no se limita a GitHub , sino que podemos utilizarlos all\u00e1 donde usemos Jekyll para generar p\u00e1ginas web. Generalmente el procedimiento para usar un tema es copiar todo su contenido en nuestro repositorio. En el caso de muchos de ellos (y en particular los proporcionados por GitHub ), bastar\u00e1 con hacer menci\u00f3n al tema que queremos utilizar en el archivo de configuraci\u00f3n _config.yml . Por ejemplo: title : Mi p\u00e1gina web theme : jekyll - theme - cayman y en este caso el proceso de conversi\u00f3n tomar\u00e1 autom\u00e1ticamente los archivos ubicados en el repositorio del tema en cuesti\u00f3n. Aplicando un tema Para crear un proyecto con un tema de los proporcionados por GitHub , vamos a comenzar con un proyecto en blanco. Entramos en la p\u00e1gina settings , apartado GitHub Pages , seleccionamos la rama master , y al pulsar en el bot\u00f3n [Choose a Theme] se mostrar\u00e1 una lista de plantillas disponibles. Seleccionamos una de ellas y pulsamos en el bot\u00f3n [ Select Theme ] Se gener\u00e1 autom\u00e1ticamente un nuevo archivo readme.md con un texto \u201cde pruebas\u201d en formato markdown : Pulsamos en el bot\u00f3n Commit para guardarlo. GitHub crear\u00e1 un archivo index.html a partir de readme.md o de index.md . Si se encuentra con los dos, ignorar\u00e1 readme.md . Vamos a cambiar el nombre de readme.md por index.md . Esta ser\u00e1 nuestra p\u00e1gina principal, que GitHub convertir\u00e1 a index.html . V\u00e9ase que tambi\u00e9n se ha creado autom\u00e1ticamente el archivo _config.yml con las variables de configuraci\u00f3n del proyecto. Lo modificaremos para adaptar la p\u00e1gina a nuestro gusto. Comencemos por a\u00f1adir las variables title y description , que ser\u00e1 lo que este tema muestra en la cabecera de la p\u00e1gina. theme : jekyll - theme - cayman title : Mi p\u00e1gina personal description : mi primera p\u00e1gina El resultado final es el siguiente: Finalmente, nuestro primer proyecto tiene por ahora dos archivos creados de forma autom\u00e1tica y uno que crearemos manualmente: index.md - Archivo de texto en formato markdown con el texto de nuestra primera p\u00e1gina. La extensi\u00f3n de los ficheros puede ser \u201c.md\u201d o \u201c.markdown\u201d. _config.yml - Archivo de texto en formato yml . Contiene las variables de configuraci\u00f3n del proyecto. readme.md - Una descripci\u00f3n del proyecto en formato markdown . Se mostrar\u00e1 al visitar el repositorio GitHub . El resto de archivos se toman autom\u00e1ticamente del repositorio del tema, con la excepci\u00f3n de aquellos que creemos en nuestro repositorio con el mismo nombre y carpeta, que tendr\u00e1n prioridad. Acerca de Jekyll GitHub Pages utiliza como software generador de HTML el mencionado programa Jekyll , cuyo manual de uso est\u00e1 en su p\u00e1gina web . En las plantillas se utiliza como complemento del texto HTML el lenguaje de marcas {{ ... }} Liquid cuya referencia podemos encontrar aqu\u00ed . Sin embargo, Jekyll no es privativo de GitHub Pages . Un ejemplo de uso lo tenemos en Cloudcannon , un alojamiento web comercial que tambi\u00e9n lo utiliza. Tiene una fant\u00e1stica colecci\u00f3n de tutoriales para aprender a utilizarlo. Otro ejemplo digno de ser examinado es The Programming Historian , un sitio web dedicado al alojamiento de manuales t\u00e9cnicos. En esta p\u00e1gina tenemos uno que explica como utilizar GitHub Pages . De hecho, este sitio tambi\u00e9n est\u00e1 creado usando GitHUb Pages y Jekyll . Explorando su repositorio de documentos podemos aprender bastante acerca de todo el proceso.","title":"Creando un sitio web"},{"location":"002CrearPaginaWeb.html#creando-un-sitio-web","text":"Una vez que nos hemos dado de alta en GitHub y estamos preparados para crear documentos en esa plataforma, vamos a desarrollar un sitio web experimental a partir de nuestros contenidos.","title":"Creando un sitio web"},{"location":"002CrearPaginaWeb.html#organizar-los-repositorios","text":"GitHub Pages es un servicio especial de GitHub que convierte documentos en p\u00e1ginas web. Podemos tener tantos sitios web como queramos, uno por repositorio. Las personas que quieran acceder a nuestra p\u00e1gina deben introducir como URL: https://nombreUsuario.github.io/nombreProyecto sustituyendo nombreUsuario y nombreProyecto por lo que corresponda. Podemos crear un sitio gen\u00e9rico a nivel de usuario, accesible mediante la URL: https://nombreUsuario.github.io Para ello debemos poner la documentaci\u00f3n en un repositorio cuyo nombre ser\u00e1 \u201cnombreUsuario.github.io\u201d. En mi caso particular, tengo lo siguiente: el nombre de usuario es cuadernosdenotas para la p\u00e1gina de portada tengo un repositorio llamado cuadernosdenotas.github.io para cada cuaderno tengo otro repositorio con el nombre que corresponda, accesible mediante la URL cuadernosdenotas.github.io/ nombrecuaderno . Se puede examinar esta disposici\u00f3n accediendo a mi lista de repositorios . Para los ejemplos que vienen a continuaci\u00f3n, he creado un usuario \u201cde pruebas\u201d llamado flxc .","title":"Organizar los repositorios"},{"location":"002CrearPaginaWeb.html#nuestra-primera-pagina","text":"Comenzamos por crear un nuevo repositorio llamado github.com/flxc/prueba , con un archivo README.md. Vamos a crear un sitio web a partir de ese repositorio. Cada p\u00e1gina ser\u00e1 un archivo HTML. Lo habitual es que la p\u00e1gina principal sea un texto llamado index.html . Dejaremos README.md como documentaci\u00f3n. Con la lista de archivos del repositorio a la vista, pulsamos sobre el bot\u00f3n \u201c Create new file \u201d e introducimos lo siguiente: <!DOCTYPE html> < html > < head > </ head > < body > < h1 > Mi primera p\u00e1gina web </ h1 > < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. </ p > < p > Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </ p > </ body > </ html > y lo guardamos como index.html . Lo que vemos es el t\u00edpico archivo de texto en formato html , que es el est\u00e1ndar b\u00e1sico de las p\u00e1ginas web. El contenido de los ficheros es una mezcla de texto y etiquetas < > . Estas \u00faltimas representan instrucciones para el navegador. Ahora tendremos dos archivos, uno de texto en formato markdown llamado readme.md con una descripci\u00f3n del proyecto, y el otro en formato html llamado index.html , que contiene el texto de nuestra primera p\u00e1gina web. Vamos a decirle a GitHub que queremos convertir todo esto en un sitio web. En la p\u00e1gina principal del repositorio, pulsamos en el enlace [settings] . Esto nos da acceso a la p\u00e1gina de configuraci\u00f3n del repositorio. Bajamos hasta el apartado GitHub Pages , y en el subapartado Source tenemos un bot\u00f3n para seleccionar la rama/carpeta donde se ubican los documentos. Cambiamos none por master branch y pulsamos en el bot\u00f3n [Save] para activar el generador de p\u00e1ginas. Se pone en marcha el generador del sitio web. Podemos ver el estado del mismo entrando en esta p\u00e1gina settings , apartado GitHub Pages , y viendo el mensaje que se muestra, que puede ser: GitHub Pages is currently disabled . La generaci\u00f3n autom\u00e1tica de p\u00e1ginas web est\u00e1 desactivada (podemos desactivarla seleccionando de nuevo none como rama del repositorio). Your site is ready to be published at https://nombreusuario.github.io/ . Se est\u00e1 llevando a cabo la compilaci\u00f3n. N\u00f3tese que GitHub Pages puede tener unos l\u00edmites, y si hemos rebasado el n\u00famero m\u00e1ximo de compilaciones por hora, este mensaje se mantendr\u00e1 hasta que se desbloquee el generador. Your site is published at https://nombreusuario.github.io/ (sobre fondo verde). Se ha ejecutado la compilaci\u00f3n con \u00e9xito. Your site is having problems building: texto de error (sobre fondo amarillo). Se ha producido un fallo de compilaci\u00f3n. Nota: La compilaci\u00f3n y generaci\u00f3n de p\u00e1ginas se mantiene activada de forma permanente y actuar\u00e1 cada vez que modifiquemos cualquier archivo del repositorio, refrescando nuestro sitio web. Si vamos a introducir muchas modificaciones, conviene desactivar el servicio temporalmente seleccionando la opci\u00f3n None en la lista Source de la p\u00e1gina settings . Cuando se muestre el mensaje: Your site is published at https://usuario.github.io/repositorio/ podemos pulsar sobre ese enlace para examinar nuestra nueva p\u00e1gina web. El resultado es el siguiente:","title":"Nuestra primera p\u00e1gina"},{"location":"002CrearPaginaWeb.html#el-formato-html","text":"Las etiquetas HTML obedecen a un est\u00e1ndar denominado Hipertext Markup Language , coordinado por un consorcio mundial llamado w3c . Veamos una breve explicaci\u00f3n de las etiquetas utilizadas en este primer ejemplo: La primera etiqueta es <!DOCTYPE html> . Le dice al navegador que lo que viene a continuaci\u00f3n es un documento que se ajusta a ese est\u00e1ndar. La etiqueta <html> delimita el comienzo del documento. Se corresponde con la etiqueta final </html> que sirve como etiqueta de cierre. La etiqueta <head> delimita el comienzo de la cabecera del documento. Se corresponde con la etiqueta </head> que sirve de etiqueta de cierre de esa secci\u00f3n. La cabecera del documento se utiliza para incorporar definiciones e informaci\u00f3n acerca de la p\u00e1gina web. Por ahora, hemos dejado esta secci\u00f3n vac\u00eda. La etiqueta <body> y su correspondiente etiqueta de cierre </body> delimitan el \u201ccuerpo\u201d del documento, es decir, el texto y elementos visibles. Las etiquetas <p> y </p> delimitan p\u00e1rrafos. Si queremos un p\u00e1rrafo de t\u00edtulo, lo delimitaremos con etiquetas <h1> ... </h1> . En un documento estructurado en cap\u00edtulos, subcap\u00edtulos y apartados, se admiten hasta seis niveles de l\u00edneas de cabeceras, siendo las de nivel 1 las que se muestran m\u00e1s resaltadas. Se representa con etiquetas que van de <h1> hasta <h6> y sus correspondientes etiquetas de cierre de </h1> hasta </h6> . Nota: HTML es un formato complejo. Otras etiquetas permiten representar enlaces, im\u00e1genes, tablas, listas, y un largo etc\u00e9tera. Nota: En el formato HTML, las l\u00edneas en blanco, saltos de l\u00ednea, sangrado y espaciado extra en general, ser\u00e1 ignorado por el navegador en el momento de visualizar la p\u00e1gina.","title":"El formato html"},{"location":"002CrearPaginaWeb.html#estilos","text":"Cambiando el tipo de letra, los colores, alineaci\u00f3n, espaciado, etc. crearemos p\u00e1ginas m\u00e1s vistosas. Podemos establecer unas reglas de estilo y ponerlas en un archivo especial llamado \u201c hoja de estilos \u201d. Supongamos que, por ejemplo, queremos lo siguiente: cuerpo de la p\u00e1gina, representado por la etiqueta body : poner un fondo de color beige suave. cabeceras de nivel uno, representadas por etiquetas <h1> : texto blanco sobre fondo verde. Alineaci\u00f3n del texto: centrado. resto de p\u00e1rrafos delimitados por etiquetas <p> : texto en color verde oscuro. Para cada tipo de elemento creamos una colecci\u00f3n de definiciones de atributos, donde cada uno de ellos se escribe en formato atributo:valor . Cada atributo se delimita con un punto y coma final, y el conjunto de definiciones se delimita entre llaves. Por ejemplo, para las cabeceras, escribir\u00edamos: h1 { background-color : green ; color : white ; text-align : center ; } Este formato se denomina css ( cascading style sheets ), y su sintaxis, nombres y posibles valores de atributos siguen las normas establecidas por el w3c . Vamos a crear un archivo llamado estilos.css con el siguiente contenido: body { background-color : cornsilk ;} h1 { background-color : green ; color : white ; text-align : center ; } p { color : darkgreen ; } Nota: Al igual que sucede con el formato HTML, las l\u00edneas en blanco, saltos de l\u00ednea, sangrado y espaciado extra en general, ser\u00e1 ignorado por el navegador en el momento de visualizar la p\u00e1gina. Hemos asignado nombres de colores de acuerdo a los est\u00e1ndares css . V\u00e9ase la referencia aqu\u00ed . Tambi\u00e9n podr\u00edamos usar los c\u00f3digos de cada color, precedidos por un car\u00e1cter # : body { background-color : #FFF8DC ;} En el archivo index.html tenemos que indicar que queremos enlazar con esa hoja de estilos . Para ello utilizaremos la etiqueta <link> , que colocaremos en las definiciones de la secci\u00f3n <head >. Aprovecharemos para incluir una definici\u00f3n del t\u00edtulo que queremos visualizar en la barra superior de la ventana del navegador: <!DOCTYPE html> < html > < head > < title > Mi primera p\u00e1gina web </ title > < link rel = \"stylesheet\" href = \"estilos.css\" > </ head > < body > < h1 > Mi primera p\u00e1gina web </ h1 > < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. </ p > < p > Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </ p > </ body > </ html > Toda etiqueta html sirve para delimitar un elemento de la p\u00e1gina web, y los atributos del elemento se pueden establecer en la etiqueta de apertura usando el formato: < etiqueta atributo1 = \"valor 1\" atributo2 = \"valor 2\" > texto </ etiqueta > El texto entre la etiqueta de apertura y la de cierre es el elemento delimitado por esas etiquetas. Cuando una etiqueta es un elemento en si misma, como sucede con <link> , no habr\u00e1 etiqueta de cierre y se dice que tenemos un elemento \u201cvac\u00edo\u201d. Los atributos se escriben siempre en la etiqueta de apertura, y se separan con espacios en blanco. En este caso utilizamos el atributo rel para establecer que el archivo enlazado es una \u201choja de estilos\u201d y el atributo href para hacer referencia al nombre del archivo a enlazar: < link rel = \"stylesheet\" href = \"estilos.css\" > Tras modificar index.html y crear estilos.css , al refrescarse la p\u00e1gina web veremos que ha cambiado el aspecto:","title":"Estilos"},{"location":"002CrearPaginaWeb.html#la-propiedad-style","text":"Lo anterior sirve para establecer las reglas de estilo para todos los elementos del mismo tipo (cabeceras, p\u00e1rrafos, etc.). Pero\u2026 \u00bfcomo podemos cambiar el estilo de un elemento individual sin afectar a los otros? Escribiendo las reglas de estilo directamente en la etiqueta de apertura del elemento. Utilizaremos el atributo style : < h1 style = \" ...reglas de estilo... \" > Mi primera p\u00e1gina web </ h1 > Las reglas de estilo se escriben en formato: atributo1 : valor1 ; atributo1 : valor1 ; atributo1 : valor1 ; con lo que en nuestro ejemplo tendremos: < h1 style = \"background-color: green; color:white; text-align:center;\" > Mi primera p\u00e1gina web </ h1 > Recu\u00e9rdese que el espaciado y saltos de l\u00ednea son irrelevantes en archivos html . Otra forma de asignar un estilo a un elemento individual es asignarle un nombre mediante el atributo id : < h1 id = \"cabecera\" > Mi primera p\u00e1gina web </ h1 > Esto nos permite hacer referencia a ese elemento en la hoja de estilos: body { background-color : cornsilk ;} # cabecera { background-color : green ; color : white ; text-align : center ; } p { color : darkgreen ; } En formato css , para hacer referencia a un elemento por su id , este debe escribirse con un prefijo # . \u00bfComo podemos asignar un estilo especial a varios elementos sin que afecte a todos los del mismo tipo? Supongamos que queremos resaltar en color rojo los p\u00e1rrafos pares y no hacerlo con los impares. La soluci\u00f3n es agrupar los elementos afectados, y asignarles un nombre de \u201cclase\u201d: < p class = \"pares\" > texto del p\u00e1rrafo </ p > Ahota tenemos varios p\u00e1rrafos declarados como miembros de la clase \u201cpares\u201d. Tenemos que definir el atributo \u201cclass\u201d en todos ellos. En la hoja de estilos, las clases van precedidas por un punto \u201c.\u201d . pares { color=red ;}","title":"La propiedad style"},{"location":"002CrearPaginaWeb.html#enlaces-a-otras-paginas","text":"En nuestro sitio web podemos crear tantos archivos HTML como queramos, cada uno representando una p\u00e1gina, aunque la que se visualizar\u00e1 autom\u00e1ticamente ser\u00e1 siempre index.html . Para visualizar el resto de las p\u00e1ginas, tenemos que insertar enlaces en los textos. Para ello incluimos una etiqueta en formato: < a > texto del enlace </ a > . Por ejemplo: < h1 > Mi primera p\u00e1gina web </ h1 > < h2 > Indice de p\u00e1ginas </ h2 > < p > Cap\u00edtulo 1: < a > pulsar aqu\u00ed </ a ></ p > < p > Cap\u00edtulo 2: < a > pulsar aqu\u00ed </ a ></ p > < p > Cap\u00edtulo 3: < a > pulsar aqu\u00ed </ a ></ p > Y para cada l\u00ednea visualizaremos el texto: Cap\u00edtulo x: pulsar aqu\u00ed V\u00e9ase que el texto del enlace forma parte del p\u00e1rrafo. Pero nos falta indicar para cada enlace cual es el archivo a enlazar. Para este prop\u00f3sito, usaremos el atributo href de la etiqueta <a> : < h1 > Indice de p\u00e1ginas </ h1 > < p > Cap\u00edtulo 1: < a href = \"capitulo1.html\" > pulsar qu\u00ed </ a ></ p > < p > Cap\u00edtulo 2: < a href = \"capitulo2.html\" > pulsar qu\u00ed </ a ></ p > < p > Cap\u00edtulo 3: < a href = \"capitulo3.html\" > pulsar qu\u00ed </ a ></ p > Seguidamente tendremos que crear los archivos enlazados. Con eso, nuestro sitio web tendr\u00e1 seis archivos: readme.md index.html estilos.css capitulo1.html capitulo2.html capitulo3.html","title":"Enlaces a otras p\u00e1ginas"},{"location":"002CrearPaginaWeb.html#archivos-markdown","text":"La redacci\u00f3n de documentos extensos en formato .html puede llegar a ser bastante farragosa por culpa de la presencia de etiquetas. Por este motivo, GitHub permite que redactemos los documentos en formato markdown , y al generar el sitio web, har\u00e1 la conversi\u00f3n autom\u00e1tica a html , a\u00f1adiendo al texto las etiquetas necesarias. Siguiendo con el ejemplo anterior, vamos a borrar el archivo index.html , y crear uno llamado index.md , con el siguiente contenido: --- title: Creando este sitio author: jf --- # Mi primera p\u00e1gina web Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. El formato markdown resulta c\u00f3modo de redactar, pero exige respetar algunas normas: Los p\u00e1rrafos deben separarse con una l\u00ednea en blanco entre ellos. Si queremos un p\u00e1rrafo resaltado como t\u00edtulo, debemos ponerle un car\u00e1cter # como prefijo, con un espacio en blanco separ\u00e1ndolo del texto. En la conversi\u00f3n, se sustituir\u00e1 ese car\u00e1cter por las correspondientes etiquetas <h1> . GitHub cuenta con la posibilidad de establecer \u201cpropiedades del documento\u201d en forma de metadatos , que se definen en una secci\u00f3n opcional de cabecera llamada front-matter . Se delimita entre dos l\u00edneas formadas por tres guiones cada una. Cada metadato se escribe en formato nombre : valor . Nota: A diferencia de los formatos HTML y CSS, en los archivos markdown el sangrado a la izquierda del texto tiene valor sint\u00e1ctico. Se deben respetar unas reglas de escritura que veremos en un cap\u00edtulo posterior. Para generar el sitio web a partir de archivos markdown , GitHub utiliza internamente un software conversor llamado Jekyll . Este programa plantea algunos requerimientos: Tenemos que a\u00f1adir un archivo de configuraci\u00f3n llamado _config.yml (n\u00f3tese el prefijo en forma de subrayado), que contenga una lista de definiciones de par\u00e1metros del proceso de conversi\u00f3n. En su m\u00ednima expresi\u00f3n, el contenido de este archivo podr\u00eda ser: title : Mi sitio web Debemos poner nuestra hoja de estilos en una carpeta llamada css Hay que crear un archivo html que sirva como plantilla por defecto para las conversiones. Se llamar\u00e1 default.html y se alojar\u00e1 en la carpeta _layouts . En conjunto, nuestra primera p\u00e1gina a partir de archivos markdown requerir\u00e1 lo siguiente: index.md , un documento en formato markdown que se convertir\u00e1 en index.html . readme.md , un documento con un resumen del proyecto, a efectos de documentaci\u00f3n. No es imprescindible. _config.yml , un archivo con la configuraci\u00f3n del proceso de conversi\u00f3n, donde cada l\u00ednea es una pareja parametro:valor . css/estilos.css , un archivo con definiciones de estilos _layouts/default.html ser\u00e1 la plantilla en formato html, a utilizar para la conversi\u00f3n de todas las p\u00e1ginas, incluyendo index.html . El contenido de la plantilla default.html podr\u00eda ser algo as\u00ed como: <!DOCTYPE html> <html> <head> <title> {{ site . title }} </title> <link rel=\"stylesheet\" href=\"css/estilos.css\"> </head> <body> {{ content }} </body> </html> Las marcas delimitadas entre {{ }} ser\u00e1n sustituidas durante el proceso de conversi\u00f3n por los contenidos. La marca {{ content }} ser\u00e1 sustituida por el texto del archivo markdown , una vez transformado a html . La marca {{ site.title }} ser\u00e1 sustuida por el par\u00e1metro title definido en el archivo de configuraci\u00f3n _config.yml . Tras hacer todos estos cambios, si activamos el proceso de conversi\u00f3n desde la p\u00e1gina settings , el resultado deber\u00eda ser el mismo que cuando hemos creado el sitio web a partir de archivos .html directamente: Nota: Los archivos HTML generados por Jekyll no se muestran en el listado de archivos del repositorio.","title":"Archivos markdown"},{"location":"002CrearPaginaWeb.html#parametros","text":"La conversi\u00f3n se puede configurar mediante los par\u00e1metros definidos en el front-matter de cada p\u00e1gina, o bien en el archivo de configuraci\u00f3n del proyecto, _config.yml . La diferencia entre unos y otros es que los primeros afectan a la p\u00e1gina en cuesti\u00f3n, y los segundos, a todo el proyecto. La forma de influir en los resultados depende del uso que hagamos de ellos en la plantilla. Si por ejemplo, escribimos {{ site.title }} se insertar\u00e1 el t\u00edtulo definido en el archivo de configuraci\u00f3n. Si escribimos {{ page.title }} , se insertar\u00e1 el t\u00edtulo definido en el front-matter de la p\u00e1gina.","title":"Par\u00e1metros"},{"location":"002CrearPaginaWeb.html#temas","text":"Un tema es un conjunto de plantillas y hojas de estilo que podemos utilizar como embri\u00f3n de diferentes proyectos. Cuando creamos un proyecto desde cero, podemos usar un tema creado por nosotros, o bien uno de los que GitHub nos proporciona para contribuir a mejorar el aspecto de nuestro sitio web. V\u00e9ase la lista de esos temas en esta p\u00e1gina . Pulsando sobre cualquiera de ellos, podemos ir al repositorio del mismo, donde descubriremos una colecci\u00f3n de archivos de plantilla y estilos que GitHub Pages tomar\u00e1 para unirlos a nuestros documentos y formar la p\u00e1gina web definitiva. No tenemos por que limitarnos a lo proporcionado por GitHub ; existen cientos de temas de terceros disponibles en la red. V\u00e9ase una amplia colecci\u00f3n en p\u00e1ginas como esta o en esta otra . En realidad, el uso de esos temas no se limita a GitHub , sino que podemos utilizarlos all\u00e1 donde usemos Jekyll para generar p\u00e1ginas web. Generalmente el procedimiento para usar un tema es copiar todo su contenido en nuestro repositorio. En el caso de muchos de ellos (y en particular los proporcionados por GitHub ), bastar\u00e1 con hacer menci\u00f3n al tema que queremos utilizar en el archivo de configuraci\u00f3n _config.yml . Por ejemplo: title : Mi p\u00e1gina web theme : jekyll - theme - cayman y en este caso el proceso de conversi\u00f3n tomar\u00e1 autom\u00e1ticamente los archivos ubicados en el repositorio del tema en cuesti\u00f3n.","title":"Temas"},{"location":"002CrearPaginaWeb.html#aplicando-un-tema","text":"Para crear un proyecto con un tema de los proporcionados por GitHub , vamos a comenzar con un proyecto en blanco. Entramos en la p\u00e1gina settings , apartado GitHub Pages , seleccionamos la rama master , y al pulsar en el bot\u00f3n [Choose a Theme] se mostrar\u00e1 una lista de plantillas disponibles. Seleccionamos una de ellas y pulsamos en el bot\u00f3n [ Select Theme ] Se gener\u00e1 autom\u00e1ticamente un nuevo archivo readme.md con un texto \u201cde pruebas\u201d en formato markdown : Pulsamos en el bot\u00f3n Commit para guardarlo. GitHub crear\u00e1 un archivo index.html a partir de readme.md o de index.md . Si se encuentra con los dos, ignorar\u00e1 readme.md . Vamos a cambiar el nombre de readme.md por index.md . Esta ser\u00e1 nuestra p\u00e1gina principal, que GitHub convertir\u00e1 a index.html . V\u00e9ase que tambi\u00e9n se ha creado autom\u00e1ticamente el archivo _config.yml con las variables de configuraci\u00f3n del proyecto. Lo modificaremos para adaptar la p\u00e1gina a nuestro gusto. Comencemos por a\u00f1adir las variables title y description , que ser\u00e1 lo que este tema muestra en la cabecera de la p\u00e1gina. theme : jekyll - theme - cayman title : Mi p\u00e1gina personal description : mi primera p\u00e1gina El resultado final es el siguiente: Finalmente, nuestro primer proyecto tiene por ahora dos archivos creados de forma autom\u00e1tica y uno que crearemos manualmente: index.md - Archivo de texto en formato markdown con el texto de nuestra primera p\u00e1gina. La extensi\u00f3n de los ficheros puede ser \u201c.md\u201d o \u201c.markdown\u201d. _config.yml - Archivo de texto en formato yml . Contiene las variables de configuraci\u00f3n del proyecto. readme.md - Una descripci\u00f3n del proyecto en formato markdown . Se mostrar\u00e1 al visitar el repositorio GitHub . El resto de archivos se toman autom\u00e1ticamente del repositorio del tema, con la excepci\u00f3n de aquellos que creemos en nuestro repositorio con el mismo nombre y carpeta, que tendr\u00e1n prioridad.","title":"Aplicando un tema"},{"location":"002CrearPaginaWeb.html#acerca-de-jekyll","text":"GitHub Pages utiliza como software generador de HTML el mencionado programa Jekyll , cuyo manual de uso est\u00e1 en su p\u00e1gina web . En las plantillas se utiliza como complemento del texto HTML el lenguaje de marcas {{ ... }} Liquid cuya referencia podemos encontrar aqu\u00ed . Sin embargo, Jekyll no es privativo de GitHub Pages . Un ejemplo de uso lo tenemos en Cloudcannon , un alojamiento web comercial que tambi\u00e9n lo utiliza. Tiene una fant\u00e1stica colecci\u00f3n de tutoriales para aprender a utilizarlo. Otro ejemplo digno de ser examinado es The Programming Historian , un sitio web dedicado al alojamiento de manuales t\u00e9cnicos. En esta p\u00e1gina tenemos uno que explica como utilizar GitHub Pages . De hecho, este sitio tambi\u00e9n est\u00e1 creado usando GitHUb Pages y Jekyll . Explorando su repositorio de documentos podemos aprender bastante acerca de todo el proceso.","title":"Acerca de Jekyll"},{"location":"003Portada.html","text":"La p\u00e1gina de portada Tras ver como se crea un sitio web en GitHub Pages , es el momento de dise\u00f1ar nuestra p\u00e1gina de portada. Primeros pasos La p\u00e1gina principal ser\u00e1 accesible mediante la URL https://NombreUsuario.github.io . Comenzamos por crear un proyecto vac\u00edo con ese nombre. En mi caso, el nombre de usuario ser\u00e1 flxc , y el del repositorio, flxc.github.io . En la p\u00e1gina principal del repositorio pulsamos sobre el bot\u00f3n [settings] y en el apartado GitHub Pages , seleccionamos la rama master , pulsando a continuaci\u00f3n sobre el bot\u00f3n [Choose a theme] . Aparece la ventana de selecci\u00f3n de temas: Para mi colecci\u00f3n de cuadernos, he seleccionado el tema Slate . Pulsamos en el bot\u00f3n [ Select theme ] . Se generar\u00e1 un texto \u201cde pruebas\u201d que guardaremos como index.md . Pulsamos en el bot\u00f3n Commit changes . Tras todo esto, introducimos en el navegador la URL nombreusuario.github.io (en el ejemplo, flxc.github.io) y veremos el primer resultado: Archivo de configuraci\u00f3n Tomamos el archivo _config.yml generado autom\u00e1ticamente: theme : jekyll - theme - slate Y modificamos su contenido: theme : jekyll - theme - slate title : cuadernos de notas description : < br > una colecci\u00f3n personal de apuntes sobre inform\u00e1tica y ordenadores < br >< br > lang : es Los par\u00e1metros title y description son usados por este tema para mostrar esos dos textos en la cabecera de la p\u00e1gina. Las etiquetas <br> se insertar\u00e1n en el html final, y sirven para provocar un salto de l\u00ednea y aumentar el espaciado. El resultado es el siguiente: El par\u00e1metro lang evita que los buscadores y navegadores la consideren como p\u00e1gina en ingl\u00e9s. Una imagen en la cabecera He escogido este tema porque me proporciona una secci\u00f3n de cabecera con texto en color blanco y fondo oscuro. Ideal para sustituir ese fondo por una imagen. Lo primero es hacernos con una fotograf\u00eda que nos guste. Para encontrar im\u00e1genes de libre uso suelo acudir Unsplash o a Pixabay . Para mi p\u00e1gina he escogido esta foto . Lo siguiente es modificar el archivo css de hoja de estilos, cambiando los atributos de la secci\u00f3n de cabecera, y poniendo la foto como imagen de fondo. Lo primero es identificar el elemento cabecera . Vamos a analizar el c\u00f3digo html generado. Abrimos el navegador Chrome e introducimos la URL flxc.github.io . Con nuestra p\u00e1gina a la vista, pulsamos sobre el icono de la esquina superior derecha, y en el men\u00fa desplegado, seleccionamos M\u00e1s herramientas > Herramientas para desarrolladores . Se abre el panel de an\u00e1lisis de Chrome. Seleccionamos la pesta\u00f1a Elements . A la izquierda tenemos el texto HTML de la p\u00e1gina, y a la derecha, las propiedades del elemento seleccionado. Al seleccionar un elemento en el bloque izquierdo, se resalta en la parte superior. Vemos que la cabecera de nuestra p\u00e1gina es un bloque delimitado por las etiquetas <div> ... </div> : < body > <!-- HEADER --> < div id = \"header_wrap\" class = \"outer\" > < header class = \"inner\" > ... contenido de la cabecera </ header > </ div > La etiqueta <!- texto -> se utiliza para a\u00f1adir comentarios en el texto HTML, que ser\u00e1n ignorados por el navegador. Las etiquetas <div> ... </div> delimitan un bloque. Las etiquetas <header> ... </header> delimitan una cabecera de p\u00e1gina. Aqu\u00ed vemos un bloque <div> que encierra a otro <header> . Este segundo deja unos m\u00e1rgenes a izquierda y derecha, por lo que vamos a aplicar la imagen al bloque externo. V\u00e9ase que la etiqueta de apertura del bloque define los atributos id y class . El atributo id hace que podamos hacer referencia a este bloque por su nombre \u201cheader_wrap\u201d. Examinando el repositorio del tema vemos que la hoja de estilos se llama /assets/css/style.scss . As\u00ed que lo que tenemos que hacer es crear en nuestro repositorio un archivo con igual nombre y en la misma carpeta. El contenido ser\u00e1: --- --- @ import \"{{ site.theme }}\" ; # header_wrap { background : url ( portada.jpg ) no-repeat center center ; background-size : cover ; } N\u00f3tese que el archivo lleva extensi\u00f3n .scss en lugar de la habitual .css que utilizamos con las hojas de estilo. Se trata de una versi\u00f3n mejorada que incorpora cosas tales como la etiqueta @import o el front-matter. La inclusi\u00f3n de este \u00faltimo es obligatoria para Jekyll , aunque lo escribamos vac\u00edo, y su ausencia har\u00e1 que la hoja de estilos no tenga efecto. La instrucci\u00f3n @import sirve para incorporar las reglas css definidas por el tema original, y que estas no se pierdan. Recu\u00e9rdese que cuando, en un archivo css hacemos referencia a un elemento por su nombre, el \u201cid\u201d debe ir precedido del car\u00e1cter # . La propiedad background tiene cuatro valores asignados: el nombre del fichero con la fotograf\u00eda. Como no tenemos seguridad de la URL completa, le pedimos al navegador que la deduzca usando la funci\u00f3n url() . No escribimos ning\u00fan nombre de carpeta, por lo que se asume que tenemos que poner la foto en la misma carpeta que el archivo css. el argumento no-repeat evita un mosaico de fotograf\u00edas cuando estas son peque\u00f1as. los argumentos center centran la fotograf\u00eda vertical y horizontalmente. el atributo background-size hace que la fotograf\u00eda cubra todo el espacio. Tras crear este archivo /assets/css/style.scss , subimos la fotograf\u00eda portada.jpg a la misma carpeta assets/css/ . Esperamos a que se genere de nuevo el sitio web, y el resultado es este: Texto de la p\u00e1gina principal Ya hemos visto que escribir en formato markdown es f\u00e1cil. En un cap\u00edtulo posterior repasaremos las reglas de sintaxis. Por ahora nos basta saber que: Los p\u00e1rrafos se separan uno de otro con al menos una l\u00ednea en blanco. Los p\u00e1rrafos de cabecera llevan uno o varios caracteres # como prefijo, con un espacio en blanco entre ese prefijo y el texto. El n\u00famero de caracteres # , de uno a seis, indica el nivel, lo que se traducir\u00e1 en una etiqueta de <h1> a <h6 >. Los enlaces se escriben en formato [texto a mostrar](URL a enlazar) Para enlazar con una URL externa: V\u00e9ase la lista de temas de [GitHub](https://github.com/) en esta [p\u00e1gina](https://pages.github.com/themes/). Para enlazar a otra p\u00e1gina de nuestro repositorio: Pulse [aqu\u00ed](indice.md) para ver el \u00edndice. Las im\u00e1genes se muestran insertando: ! [ texto alternativo ]( imagenes / fotografia . jpg ) El texto alternativo es opcional: ![](imagenes/fotografia.jpg) Una imagen puede servir de enlace al pulsar sobre ella. La ponemos en lugar del texto del enlace: [![](fotografia.jpg)](url a enlazar) Traduciendo texto Analizando el tema original, convendr\u00eda traducir del ingl\u00e9s algunos fragmentos de la plantilla _layouts/default.html . Copiamos ese archivo a nuestro proyecto. Cambiamos el texto del bot\u00f3n en la cabecera: View on GitHub por Ver en GitHub La etiqueta <footer> delimita el pie de p\u00e1gina. Yo lo he dejado as\u00ed: < footer class = \"inner\" > < p class = \"copyright\" > &copy; El taller de jf. Creado en < a href = \"https://pages.github.com\" > GitHub Pages </ a ></ p > < p > Fotograf\u00eda de cabecera: Caspar Rubin en < a href = \"https://unsplash.com/@casparrubin\" > Unsplash </ a ></ p > </ footer > Cambiando el estilo del bot\u00f3n Vamos a a\u00f1adir un \u00faltimo toque. Ajustaremos el estilo el bot\u00f3n View on Github de la cabecera. Analizando el html generado, he descubierto que el bot\u00f3n en cuesti\u00f3n tiene un nombre: id=\u201dforkme_banner\u201d . Abrimos el archivo /assets/css/style.scss y a\u00f1adimos: # forkme_banner { display : block ; position : absolute ; top : 10 px ; right : 10 px ; z-index : 10 ; padding : 10 px 50 px 10 px 10 px ; color : white ; background : url ( ../images/blacktocat.png ) grey no-repeat 95 % 50 % ; font-weight : 700 ; box-shadow : 0 0 10 px rgba ( 0 , 0 , 0 , 0.5 ); border-bottom-left-radius : 10 px ; border-bottom-right-radius : 10 px ; border-top-left-radius : 10 px ; border-top-right-radius : 10 px ; } En resumen: dejo algunos atributos tal y como estaban cambio el color de fondo, de azul a gris las \u00faltimas cuatro l\u00edneas son para a\u00f1adir bordes redondeados en las cuatro esquinas tambi\u00e9n le he a\u00f1adido un poco de margen por encima (estaba pegado al borde superior). Y el resultado es:","title":"La p\u00e1gina de portada"},{"location":"003Portada.html#la-pagina-de-portada","text":"Tras ver como se crea un sitio web en GitHub Pages , es el momento de dise\u00f1ar nuestra p\u00e1gina de portada.","title":"La p\u00e1gina de portada"},{"location":"003Portada.html#primeros-pasos","text":"La p\u00e1gina principal ser\u00e1 accesible mediante la URL https://NombreUsuario.github.io . Comenzamos por crear un proyecto vac\u00edo con ese nombre. En mi caso, el nombre de usuario ser\u00e1 flxc , y el del repositorio, flxc.github.io . En la p\u00e1gina principal del repositorio pulsamos sobre el bot\u00f3n [settings] y en el apartado GitHub Pages , seleccionamos la rama master , pulsando a continuaci\u00f3n sobre el bot\u00f3n [Choose a theme] . Aparece la ventana de selecci\u00f3n de temas: Para mi colecci\u00f3n de cuadernos, he seleccionado el tema Slate . Pulsamos en el bot\u00f3n [ Select theme ] . Se generar\u00e1 un texto \u201cde pruebas\u201d que guardaremos como index.md . Pulsamos en el bot\u00f3n Commit changes . Tras todo esto, introducimos en el navegador la URL nombreusuario.github.io (en el ejemplo, flxc.github.io) y veremos el primer resultado:","title":"Primeros pasos"},{"location":"003Portada.html#archivo-de-configuracion","text":"Tomamos el archivo _config.yml generado autom\u00e1ticamente: theme : jekyll - theme - slate Y modificamos su contenido: theme : jekyll - theme - slate title : cuadernos de notas description : < br > una colecci\u00f3n personal de apuntes sobre inform\u00e1tica y ordenadores < br >< br > lang : es Los par\u00e1metros title y description son usados por este tema para mostrar esos dos textos en la cabecera de la p\u00e1gina. Las etiquetas <br> se insertar\u00e1n en el html final, y sirven para provocar un salto de l\u00ednea y aumentar el espaciado. El resultado es el siguiente: El par\u00e1metro lang evita que los buscadores y navegadores la consideren como p\u00e1gina en ingl\u00e9s.","title":"Archivo de configuraci\u00f3n"},{"location":"003Portada.html#una-imagen-en-la-cabecera","text":"He escogido este tema porque me proporciona una secci\u00f3n de cabecera con texto en color blanco y fondo oscuro. Ideal para sustituir ese fondo por una imagen. Lo primero es hacernos con una fotograf\u00eda que nos guste. Para encontrar im\u00e1genes de libre uso suelo acudir Unsplash o a Pixabay . Para mi p\u00e1gina he escogido esta foto . Lo siguiente es modificar el archivo css de hoja de estilos, cambiando los atributos de la secci\u00f3n de cabecera, y poniendo la foto como imagen de fondo. Lo primero es identificar el elemento cabecera . Vamos a analizar el c\u00f3digo html generado. Abrimos el navegador Chrome e introducimos la URL flxc.github.io . Con nuestra p\u00e1gina a la vista, pulsamos sobre el icono de la esquina superior derecha, y en el men\u00fa desplegado, seleccionamos M\u00e1s herramientas > Herramientas para desarrolladores . Se abre el panel de an\u00e1lisis de Chrome. Seleccionamos la pesta\u00f1a Elements . A la izquierda tenemos el texto HTML de la p\u00e1gina, y a la derecha, las propiedades del elemento seleccionado. Al seleccionar un elemento en el bloque izquierdo, se resalta en la parte superior. Vemos que la cabecera de nuestra p\u00e1gina es un bloque delimitado por las etiquetas <div> ... </div> : < body > <!-- HEADER --> < div id = \"header_wrap\" class = \"outer\" > < header class = \"inner\" > ... contenido de la cabecera </ header > </ div > La etiqueta <!- texto -> se utiliza para a\u00f1adir comentarios en el texto HTML, que ser\u00e1n ignorados por el navegador. Las etiquetas <div> ... </div> delimitan un bloque. Las etiquetas <header> ... </header> delimitan una cabecera de p\u00e1gina. Aqu\u00ed vemos un bloque <div> que encierra a otro <header> . Este segundo deja unos m\u00e1rgenes a izquierda y derecha, por lo que vamos a aplicar la imagen al bloque externo. V\u00e9ase que la etiqueta de apertura del bloque define los atributos id y class . El atributo id hace que podamos hacer referencia a este bloque por su nombre \u201cheader_wrap\u201d. Examinando el repositorio del tema vemos que la hoja de estilos se llama /assets/css/style.scss . As\u00ed que lo que tenemos que hacer es crear en nuestro repositorio un archivo con igual nombre y en la misma carpeta. El contenido ser\u00e1: --- --- @ import \"{{ site.theme }}\" ; # header_wrap { background : url ( portada.jpg ) no-repeat center center ; background-size : cover ; } N\u00f3tese que el archivo lleva extensi\u00f3n .scss en lugar de la habitual .css que utilizamos con las hojas de estilo. Se trata de una versi\u00f3n mejorada que incorpora cosas tales como la etiqueta @import o el front-matter. La inclusi\u00f3n de este \u00faltimo es obligatoria para Jekyll , aunque lo escribamos vac\u00edo, y su ausencia har\u00e1 que la hoja de estilos no tenga efecto. La instrucci\u00f3n @import sirve para incorporar las reglas css definidas por el tema original, y que estas no se pierdan. Recu\u00e9rdese que cuando, en un archivo css hacemos referencia a un elemento por su nombre, el \u201cid\u201d debe ir precedido del car\u00e1cter # . La propiedad background tiene cuatro valores asignados: el nombre del fichero con la fotograf\u00eda. Como no tenemos seguridad de la URL completa, le pedimos al navegador que la deduzca usando la funci\u00f3n url() . No escribimos ning\u00fan nombre de carpeta, por lo que se asume que tenemos que poner la foto en la misma carpeta que el archivo css. el argumento no-repeat evita un mosaico de fotograf\u00edas cuando estas son peque\u00f1as. los argumentos center centran la fotograf\u00eda vertical y horizontalmente. el atributo background-size hace que la fotograf\u00eda cubra todo el espacio. Tras crear este archivo /assets/css/style.scss , subimos la fotograf\u00eda portada.jpg a la misma carpeta assets/css/ . Esperamos a que se genere de nuevo el sitio web, y el resultado es este:","title":"Una imagen en la cabecera"},{"location":"003Portada.html#texto-de-la-pagina-principal","text":"Ya hemos visto que escribir en formato markdown es f\u00e1cil. En un cap\u00edtulo posterior repasaremos las reglas de sintaxis. Por ahora nos basta saber que: Los p\u00e1rrafos se separan uno de otro con al menos una l\u00ednea en blanco. Los p\u00e1rrafos de cabecera llevan uno o varios caracteres # como prefijo, con un espacio en blanco entre ese prefijo y el texto. El n\u00famero de caracteres # , de uno a seis, indica el nivel, lo que se traducir\u00e1 en una etiqueta de <h1> a <h6 >. Los enlaces se escriben en formato [texto a mostrar](URL a enlazar) Para enlazar con una URL externa: V\u00e9ase la lista de temas de [GitHub](https://github.com/) en esta [p\u00e1gina](https://pages.github.com/themes/). Para enlazar a otra p\u00e1gina de nuestro repositorio: Pulse [aqu\u00ed](indice.md) para ver el \u00edndice. Las im\u00e1genes se muestran insertando: ! [ texto alternativo ]( imagenes / fotografia . jpg ) El texto alternativo es opcional: ![](imagenes/fotografia.jpg) Una imagen puede servir de enlace al pulsar sobre ella. La ponemos en lugar del texto del enlace: [![](fotografia.jpg)](url a enlazar)","title":"Texto de la p\u00e1gina principal"},{"location":"003Portada.html#traduciendo-texto","text":"Analizando el tema original, convendr\u00eda traducir del ingl\u00e9s algunos fragmentos de la plantilla _layouts/default.html . Copiamos ese archivo a nuestro proyecto. Cambiamos el texto del bot\u00f3n en la cabecera: View on GitHub por Ver en GitHub La etiqueta <footer> delimita el pie de p\u00e1gina. Yo lo he dejado as\u00ed: < footer class = \"inner\" > < p class = \"copyright\" > &copy; El taller de jf. Creado en < a href = \"https://pages.github.com\" > GitHub Pages </ a ></ p > < p > Fotograf\u00eda de cabecera: Caspar Rubin en < a href = \"https://unsplash.com/@casparrubin\" > Unsplash </ a ></ p > </ footer >","title":"Traduciendo texto"},{"location":"003Portada.html#cambiando-el-estilo-del-boton","text":"Vamos a a\u00f1adir un \u00faltimo toque. Ajustaremos el estilo el bot\u00f3n View on Github de la cabecera. Analizando el html generado, he descubierto que el bot\u00f3n en cuesti\u00f3n tiene un nombre: id=\u201dforkme_banner\u201d . Abrimos el archivo /assets/css/style.scss y a\u00f1adimos: # forkme_banner { display : block ; position : absolute ; top : 10 px ; right : 10 px ; z-index : 10 ; padding : 10 px 50 px 10 px 10 px ; color : white ; background : url ( ../images/blacktocat.png ) grey no-repeat 95 % 50 % ; font-weight : 700 ; box-shadow : 0 0 10 px rgba ( 0 , 0 , 0 , 0.5 ); border-bottom-left-radius : 10 px ; border-bottom-right-radius : 10 px ; border-top-left-radius : 10 px ; border-top-right-radius : 10 px ; } En resumen: dejo algunos atributos tal y como estaban cambio el color de fondo, de azul a gris las \u00faltimas cuatro l\u00edneas son para a\u00f1adir bordes redondeados en las cuatro esquinas tambi\u00e9n le he a\u00f1adido un poco de margen por encima (estaba pegado al borde superior). Y el resultado es:","title":"Cambiando el estilo del bot\u00f3n"},{"location":"004Desktop.html","text":"Github Desktop Hasta ahora hemos visto como darnos de alta en GitHub , crear documentos y p\u00e1ginas web. Pero la edici\u00f3n realizada directamente en la plataforma, no solo consume los recursos de la misma, sino que no permite la existencia de ficheros privados, pruebas, borradores, y un largo etc\u00e9tera. Lo m\u00e1s recomendable es utilizar nuestro ordenador para montar todas las piezas del futuro sitio web, y seguidamente subir los archivos mediante la opci\u00f3n Upload Files u otro mecanismo similar. En este cap\u00edtulo veremos como controlar lo que vamos subiendo, y tener sincronizados ambos repositorios de documentos, el local en nuestro ordenador y el remoto en GitHub . Acerca de git GitHub es una plataforma para el trabajo colaborativo, lo que implica que cuando varias personas trabajan en un proyecto, resulta necesaria alguna herramienta para sincronizar las modificaciones en los archivos. Para lograr este prop\u00f3sito, GitHub utiliza un programa llamado git . Es una herramienta creada en 2005 por Linus Torvalds para gestionar de forma organizada el desarrollo de Linux, y suele incluirse de forma est\u00e1ndar en algunos sistemas operativos. Se distribuye como software libre desde su p\u00e1gina web , donde lo encontraremos disponible para Linux, Windows, Mac OS y UNIX. Aunque nuestro proyecto sea individual, git nos puede servir para simultanear lo que editemos en nuestra m\u00e1quina local y los cambios que hagamos directamente en el repositorio de GitHub , actualizando los archivos con la versi\u00f3n m\u00e1s actual cuando no coincidan. En principio resulta conveniente tener el entorno local como zona de trabajo, y el remoto para publicar los archivos definitivos. Git es un software que tendremos que instalar si no lo tenemos ya. Podemos comprobarlo abriendo un terminal de comandos en nuestra m\u00e1quina y ejecutando: git --version Las operaciones de sincronizaci\u00f3n se llevan a cabo introduciendo comandos en la consola del sistema operativo. V\u00e9ase por ejemplo como subir un repositorio de documentos a GitHub . En esta otra p\u00e1gina tenemos un resumen de los comandos m\u00e1s \u00fatiles. El uso de la l\u00ednea de comandos resulta muy adecuado para usuarios con cierto nivel t\u00e9cnico, pero otras personas pueden sentirse algo intimidadas. Para los usuarios de Windows y MacOS, GitHub pone a su disposici\u00f3n un programa gr\u00e1fico para controlar la sincronizaci\u00f3n de documentos. Se llama \u201cGitHub Desktop\u201d, y vamos a examinarlo en este cap\u00edtulo. Instalando el programa GitHub Desktop se encuentra disponible para su descarga aqu\u00ed . Tenemos la gu\u00eda de usuario en esta otra p\u00e1gina . Al ejecutarlo por primera vez aparece la siguiente ventana: Si no tenemos una cuenta GitHub , pulsando en el enlace create your free account se abrir\u00e1 la ventana del navegador web mostrando p\u00e1gina de alta de GitHub . Como seguramente ya tendremos una cuenta, vamos a pulsar en el enlace Sign into GitHub.com . Introducimos nuestro nombre de usuario y contrase\u00f1a: GitHub Desktop es una forma gr\u00e1fica de utilizar Git para subir archivos. En el repositorio remoto de GitHub se mostrar\u00e1 un historial de cambios indicando quien es el usuario que los ha hecho. Tenemos que configurar Git para que en las transacciones de actualizaci\u00f3n de ficheros incluya nuestro nombre y correo web. No tiene por que coincidir con los datos de nuestro perfil de usuario GitHub , aunque de todas formas, se verificar\u00e1 que el correo que facilitemos es real. \u00bfQueremos que GitHub analice nuestras operaciones para mejorar el servicio? Marcar la casilla si lo deseamos y pulsar en el bot\u00f3n Finish para finalizar este proceso de configuraci\u00f3n inicial. Usando GitHub Desktop Una vez finalizada la configuraci\u00f3n de GitHub Desktop tenemos la ventana principal con el proyecto en el que estamos trabajando (que por ahora est\u00e1 en blanco). El men\u00fa File nos da tres opciones: Crear un nuevo proyecto en el entorno local y subirlo a GitHub Abrir un proyecto existente en el entorno local y subirlo a GitHub Descargar un proyecto ya existente en el repositorio de GitHub Estas tres opciones tambi\u00e9n se muestran como iconos de escritorio en la ventana en blanco de GitHub Dektop Si optamos por descargar un proyecto ya existente, se mostrar\u00e1 una lista de los que tenemos en nuestra cuenta de usuario GitHub : Seleccionar un repositorio y una carpeta de nuestra m\u00e1quina donde guardar la copia. Al pulsar en el bot\u00f3n [Clone] se realizar\u00e1 la descarga de ficheros. Sincronizando archivos Una vez creado un proyecto nuevo o bajado uno del repositorio remoto, este es el aspecto de la ventana de trabajo: En el panel izquierdo tenemos una lista de los cambios realizados en el entorno local. Los archivos est\u00e1n marcados con iconos de colores: amarillo (*): archivo modificado rojo (-): archivo eliminado verde (+): archivo nuevo Tambi\u00e9n podemos marcar/desmarcar los archivos a sincronizar. Si hay alg\u00fan archivo o carpeta que queramos excluir permanentemente del proceso de sincronizaci\u00f3n, incluirlo en el fichero .gitignore , como se explica m\u00e1s adelante. Seleccionando un archivo de la lista, en el panel derecho se mostrar\u00e1 su contenido, se\u00f1alando en color rojo el texto eliminado y en verde lo a\u00f1adido. Una vez revisados los cambios, para actualizar el entorno remoto debemos introducir un comentario en el apartado Summary . Ese texto es obligatorio y se mostrar\u00e1 en el historial de cambios. Pulsar en el bot\u00f3n Commit para guardar la lista de cambios a realizar (n\u00f3tese que este bot\u00f3n esta desactivado hasta que introduzcamos alg\u00fan comentario). La lista de cambios a sincronizar se guarda en una carpeta oculta llamada .git . Ah\u00ed es donde se almacena toda la informaci\u00f3n necesaria para controlar la sincronizaci\u00f3n del proyecto. Mientras no subamos los cambios al entorno remoto, tendremos un nuevo bot\u00f3n Undo que nos permite descartar lo hecho. Para subirlo, n\u00f3tese que en la barra superior, en la zona de la derecha, tenemos un bot\u00f3n que puede mostrar: Fetch - Enlazar con el repositorio remoto Push - Subir los cambios realizados en el repositorio local Pull - Hay cambios realizados en remoto. Pulsar aqu\u00ed para bajarlos y actualizar los archivos locales. Nota: Si en nuestro perfil de usuario GitHub tenemos el correo electr\u00f3nico marcado como \u201cprivado\u201d, no nos dejar\u00e1 subir cambios en ese estado. Tendremos que ir a GituHub , entrar en nuestro perfil, apartado \u201cemails\u201d, y configurar las casillas: Keep my email address private Block command line pushes that expose my email Excluyendo archivos N\u00f3tese que en la lista de documentos a sincronizar pueden aparecer ficheros o carpetas que no deseamos subir al servidor. Por ejemplo: si instalamos Jekyll en nuestro ordenador y lo utilizamos para generar sitios web de pruebas en el entorno local, la carpeta _site contiene las p\u00e1ginas html generadas. El contenido de esa carpeta no hay que subirlo porque GitHub compilar\u00e1 y publicar\u00e1 su propia versi\u00f3n (a menos que queramos utilizar el resultado de la conversi\u00f3n hecha en entorno local). el archivo .DS_Store es un recurso interno de los ordenadores iMac para guardar la configuraci\u00f3n de la carpeta. No tiene nada que ver con GitHub y no lo vamos a subir (de hecho es un asunto reportado como riesgo de seguridad en los Mac). el archivo de configuraci\u00f3n _config.yml que yo utilizo cuando uso Jekyll en mi ordenador, es diferente en ambos entornos, con la configuraci\u00f3n adaptada a cada uno. N\u00f3tese que en los sistemas operativos tipo UNIX (linux, mac) los archivos ocultos se identifican porque llevan un punto como prefijo. Para excluir estos archivos de la configuraci\u00f3n, a\u00f1adimos un archivo .gitignore con la lista de exclusiones: _site/* .DS_Store _config.yml tmp/* El panel izquierdo de GitHub Desktop nos dar\u00e1 la pista de que archivos son los que tenemos que incluir. \u00a1Cuidado! Si modificamos el mismo archivo en remoto y en local, tendremos un conflicto que habr\u00e1 que resolver, porque git no podr\u00e1 establecer cual es la versi\u00f3n buena. Se recomienda evitar este tipo de situaciones. Cambiando de proyecto Si tenemos acceso a m\u00e1s de una cuenta en GitHub , podemos pasar de una a otra mediante el men\u00fa Preferencias > Accounts , haciendo un Sign out en la cuenta actual y un Sign in en aquella a la que nos queramos conectar. Para cambiar a otro repositorio distinto de aquel con el que estamos trabajando, el primer paso es comprobar que lo tenemos en ambos entornos. Si se trata de un proyecto remoto que no hemos bajado todav\u00eda, hacerlo con el men\u00fa File . Si los proyectos est\u00e1n en ambos entornos, para cambiar de un repositorio a otro pulsar en la lista desplegable Current Repository en la barra superior izquierda de GiutHub Desktop . Configuraci\u00f3n El men\u00fa Preferencias permite: Conectarnos / desconectarnos de nuestra sesi\u00f3n en GitHub . Podemos tener varias cuentas de usuario y aqu\u00ed es donde saldr\u00edamos de una para entrar en otra. Configurar nuestra identificaci\u00f3n Git : nombre del usuario que hace las modificaciones y correo electr\u00f3nico. Pesta\u00f1a \u201cAdvanced\u201d: editor de texto asociado, pedir confirmaci\u00f3n para los cambios, etc.","title":"Github Desktop"},{"location":"004Desktop.html#github-desktop","text":"Hasta ahora hemos visto como darnos de alta en GitHub , crear documentos y p\u00e1ginas web. Pero la edici\u00f3n realizada directamente en la plataforma, no solo consume los recursos de la misma, sino que no permite la existencia de ficheros privados, pruebas, borradores, y un largo etc\u00e9tera. Lo m\u00e1s recomendable es utilizar nuestro ordenador para montar todas las piezas del futuro sitio web, y seguidamente subir los archivos mediante la opci\u00f3n Upload Files u otro mecanismo similar. En este cap\u00edtulo veremos como controlar lo que vamos subiendo, y tener sincronizados ambos repositorios de documentos, el local en nuestro ordenador y el remoto en GitHub .","title":"Github Desktop"},{"location":"004Desktop.html#acerca-de-git","text":"GitHub es una plataforma para el trabajo colaborativo, lo que implica que cuando varias personas trabajan en un proyecto, resulta necesaria alguna herramienta para sincronizar las modificaciones en los archivos. Para lograr este prop\u00f3sito, GitHub utiliza un programa llamado git . Es una herramienta creada en 2005 por Linus Torvalds para gestionar de forma organizada el desarrollo de Linux, y suele incluirse de forma est\u00e1ndar en algunos sistemas operativos. Se distribuye como software libre desde su p\u00e1gina web , donde lo encontraremos disponible para Linux, Windows, Mac OS y UNIX. Aunque nuestro proyecto sea individual, git nos puede servir para simultanear lo que editemos en nuestra m\u00e1quina local y los cambios que hagamos directamente en el repositorio de GitHub , actualizando los archivos con la versi\u00f3n m\u00e1s actual cuando no coincidan. En principio resulta conveniente tener el entorno local como zona de trabajo, y el remoto para publicar los archivos definitivos. Git es un software que tendremos que instalar si no lo tenemos ya. Podemos comprobarlo abriendo un terminal de comandos en nuestra m\u00e1quina y ejecutando: git --version Las operaciones de sincronizaci\u00f3n se llevan a cabo introduciendo comandos en la consola del sistema operativo. V\u00e9ase por ejemplo como subir un repositorio de documentos a GitHub . En esta otra p\u00e1gina tenemos un resumen de los comandos m\u00e1s \u00fatiles. El uso de la l\u00ednea de comandos resulta muy adecuado para usuarios con cierto nivel t\u00e9cnico, pero otras personas pueden sentirse algo intimidadas. Para los usuarios de Windows y MacOS, GitHub pone a su disposici\u00f3n un programa gr\u00e1fico para controlar la sincronizaci\u00f3n de documentos. Se llama \u201cGitHub Desktop\u201d, y vamos a examinarlo en este cap\u00edtulo.","title":"Acerca de git"},{"location":"004Desktop.html#instalando-el-programa","text":"GitHub Desktop se encuentra disponible para su descarga aqu\u00ed . Tenemos la gu\u00eda de usuario en esta otra p\u00e1gina . Al ejecutarlo por primera vez aparece la siguiente ventana: Si no tenemos una cuenta GitHub , pulsando en el enlace create your free account se abrir\u00e1 la ventana del navegador web mostrando p\u00e1gina de alta de GitHub . Como seguramente ya tendremos una cuenta, vamos a pulsar en el enlace Sign into GitHub.com . Introducimos nuestro nombre de usuario y contrase\u00f1a: GitHub Desktop es una forma gr\u00e1fica de utilizar Git para subir archivos. En el repositorio remoto de GitHub se mostrar\u00e1 un historial de cambios indicando quien es el usuario que los ha hecho. Tenemos que configurar Git para que en las transacciones de actualizaci\u00f3n de ficheros incluya nuestro nombre y correo web. No tiene por que coincidir con los datos de nuestro perfil de usuario GitHub , aunque de todas formas, se verificar\u00e1 que el correo que facilitemos es real. \u00bfQueremos que GitHub analice nuestras operaciones para mejorar el servicio? Marcar la casilla si lo deseamos y pulsar en el bot\u00f3n Finish para finalizar este proceso de configuraci\u00f3n inicial.","title":"Instalando el programa"},{"location":"004Desktop.html#usando-github-desktop","text":"Una vez finalizada la configuraci\u00f3n de GitHub Desktop tenemos la ventana principal con el proyecto en el que estamos trabajando (que por ahora est\u00e1 en blanco). El men\u00fa File nos da tres opciones: Crear un nuevo proyecto en el entorno local y subirlo a GitHub Abrir un proyecto existente en el entorno local y subirlo a GitHub Descargar un proyecto ya existente en el repositorio de GitHub Estas tres opciones tambi\u00e9n se muestran como iconos de escritorio en la ventana en blanco de GitHub Dektop Si optamos por descargar un proyecto ya existente, se mostrar\u00e1 una lista de los que tenemos en nuestra cuenta de usuario GitHub : Seleccionar un repositorio y una carpeta de nuestra m\u00e1quina donde guardar la copia. Al pulsar en el bot\u00f3n [Clone] se realizar\u00e1 la descarga de ficheros.","title":"Usando GitHub Desktop"},{"location":"004Desktop.html#sincronizando-archivos","text":"Una vez creado un proyecto nuevo o bajado uno del repositorio remoto, este es el aspecto de la ventana de trabajo: En el panel izquierdo tenemos una lista de los cambios realizados en el entorno local. Los archivos est\u00e1n marcados con iconos de colores: amarillo (*): archivo modificado rojo (-): archivo eliminado verde (+): archivo nuevo Tambi\u00e9n podemos marcar/desmarcar los archivos a sincronizar. Si hay alg\u00fan archivo o carpeta que queramos excluir permanentemente del proceso de sincronizaci\u00f3n, incluirlo en el fichero .gitignore , como se explica m\u00e1s adelante. Seleccionando un archivo de la lista, en el panel derecho se mostrar\u00e1 su contenido, se\u00f1alando en color rojo el texto eliminado y en verde lo a\u00f1adido. Una vez revisados los cambios, para actualizar el entorno remoto debemos introducir un comentario en el apartado Summary . Ese texto es obligatorio y se mostrar\u00e1 en el historial de cambios. Pulsar en el bot\u00f3n Commit para guardar la lista de cambios a realizar (n\u00f3tese que este bot\u00f3n esta desactivado hasta que introduzcamos alg\u00fan comentario). La lista de cambios a sincronizar se guarda en una carpeta oculta llamada .git . Ah\u00ed es donde se almacena toda la informaci\u00f3n necesaria para controlar la sincronizaci\u00f3n del proyecto. Mientras no subamos los cambios al entorno remoto, tendremos un nuevo bot\u00f3n Undo que nos permite descartar lo hecho. Para subirlo, n\u00f3tese que en la barra superior, en la zona de la derecha, tenemos un bot\u00f3n que puede mostrar: Fetch - Enlazar con el repositorio remoto Push - Subir los cambios realizados en el repositorio local Pull - Hay cambios realizados en remoto. Pulsar aqu\u00ed para bajarlos y actualizar los archivos locales. Nota: Si en nuestro perfil de usuario GitHub tenemos el correo electr\u00f3nico marcado como \u201cprivado\u201d, no nos dejar\u00e1 subir cambios en ese estado. Tendremos que ir a GituHub , entrar en nuestro perfil, apartado \u201cemails\u201d, y configurar las casillas: Keep my email address private Block command line pushes that expose my email","title":"Sincronizando archivos"},{"location":"004Desktop.html#excluyendo-archivos","text":"N\u00f3tese que en la lista de documentos a sincronizar pueden aparecer ficheros o carpetas que no deseamos subir al servidor. Por ejemplo: si instalamos Jekyll en nuestro ordenador y lo utilizamos para generar sitios web de pruebas en el entorno local, la carpeta _site contiene las p\u00e1ginas html generadas. El contenido de esa carpeta no hay que subirlo porque GitHub compilar\u00e1 y publicar\u00e1 su propia versi\u00f3n (a menos que queramos utilizar el resultado de la conversi\u00f3n hecha en entorno local). el archivo .DS_Store es un recurso interno de los ordenadores iMac para guardar la configuraci\u00f3n de la carpeta. No tiene nada que ver con GitHub y no lo vamos a subir (de hecho es un asunto reportado como riesgo de seguridad en los Mac). el archivo de configuraci\u00f3n _config.yml que yo utilizo cuando uso Jekyll en mi ordenador, es diferente en ambos entornos, con la configuraci\u00f3n adaptada a cada uno. N\u00f3tese que en los sistemas operativos tipo UNIX (linux, mac) los archivos ocultos se identifican porque llevan un punto como prefijo. Para excluir estos archivos de la configuraci\u00f3n, a\u00f1adimos un archivo .gitignore con la lista de exclusiones: _site/* .DS_Store _config.yml tmp/* El panel izquierdo de GitHub Desktop nos dar\u00e1 la pista de que archivos son los que tenemos que incluir. \u00a1Cuidado! Si modificamos el mismo archivo en remoto y en local, tendremos un conflicto que habr\u00e1 que resolver, porque git no podr\u00e1 establecer cual es la versi\u00f3n buena. Se recomienda evitar este tipo de situaciones.","title":"Excluyendo archivos"},{"location":"004Desktop.html#cambiando-de-proyecto","text":"Si tenemos acceso a m\u00e1s de una cuenta en GitHub , podemos pasar de una a otra mediante el men\u00fa Preferencias > Accounts , haciendo un Sign out en la cuenta actual y un Sign in en aquella a la que nos queramos conectar. Para cambiar a otro repositorio distinto de aquel con el que estamos trabajando, el primer paso es comprobar que lo tenemos en ambos entornos. Si se trata de un proyecto remoto que no hemos bajado todav\u00eda, hacerlo con el men\u00fa File . Si los proyectos est\u00e1n en ambos entornos, para cambiar de un repositorio a otro pulsar en la lista desplegable Current Repository en la barra superior izquierda de GiutHub Desktop .","title":"Cambiando de proyecto"},{"location":"004Desktop.html#configuracion","text":"El men\u00fa Preferencias permite: Conectarnos / desconectarnos de nuestra sesi\u00f3n en GitHub . Podemos tener varias cuentas de usuario y aqu\u00ed es donde saldr\u00edamos de una para entrar en otra. Configurar nuestra identificaci\u00f3n Git : nombre del usuario que hace las modificaciones y correo electr\u00f3nico. Pesta\u00f1a \u201cAdvanced\u201d: editor de texto asociado, pedir confirmaci\u00f3n para los cambios, etc.","title":"Configuraci\u00f3n"},{"location":"005Edicion.html","text":"Editar documentos Una vez que hemos instalado Github Desktop y estamos preparados para redactar los documentos en nuestra m\u00e1quina local, prescindiendo del editor on-line de GitHub , el siguiente paso ser\u00e1 escoger un editor de textos. Vaya por delante que para crear archivos markdown , html , css , yml , etc, lo que necesitamos es un editor de \u201ctexto plano\u201d, de los que usan los programadores. El popular Microsoft Word u otro similar no son buenas soluciones en este caso. Escogiendo un editor Al buscar un editor del tipo bloc de notas , descubriremos que en la web hay infinidad de soluciones a nuestra disposici\u00f3n. Entre los usuarios de windows es muy popular Notepad++ , que podemos descargar de su p\u00e1gina web. En el caso de los equipos Mac, se incluye de serie el entorno de desarrollo XCode , que a mi personalmente me parece demasiado complejo. A veces he utilizado TextMate , aunque tambi\u00e9n es muy popular TextWrangler . Una opci\u00f3n multiplataforma cuyo uso est\u00e1 muy extendido es Atom . Por otro lado, Microsoft, en su compromiso con el software libre , proporciona un editor muy potente llamado Visual Studio Code , disponible para Windows, Mac y Linux. Cuenta con herramientas para facilitar el desarrollo de documentos tanto en formato HTML como MarkDown. Un caso especial son los editores on line , p\u00e1ginas web que presentan un panel de edici\u00f3n de texto en la ventana del navegador. Los orientados a crear archivos markdown suelen dividir la ventana en dos partes, de forma que introduciendo el texto del documento en uno de esos paneles, en el otro panel tendremos una previsualizaci\u00f3n del aspecto final de la p\u00e1gina web resultante. Un editor muy popular dentro de esta categor\u00eda es StackEdit . Otro es Dillinger . En esa misma l\u00ednea he encontrado un editor bastante minimalista aqu\u00ed . Imagen: StackEdit en acci\u00f3n. A la izquierda el texto introducido en formato markdown ; a la derecha el aspecto final cuando se convierta en p\u00e1gina web \u00daltimamente suelo utilizar el editor Visual Studio Code de Microsoft. Es software de libre descarga, potente y disponible para varios sistemas operativos. La descarga e instalaci\u00f3n es bastante simple desde su p\u00e1gina web . Una vez iniciado, su aspecto ser\u00e1 el siguiente: Lo que se muestra es un documento de bienvenida llamado Welcome , que podemos cerrar, y que posteriormente podemos recuperar desde el men\u00fa Help . V\u00e9ase que se pueden tener varios documentos abiertos a la vez, que se identifican mediante una pesta\u00f1a en la parte superior. Para cerrar cualquiera de ellos, pulsar en el icono (x) que hay en dicha pesta\u00f1a. Tambi\u00e9n contamos con un panel de navegaci\u00f3n de documentos abiertos, pulsando en el men\u00fa View > Explorer . Uso del editor Podemos cambiar los colores utilizados por el programa mediante el men\u00fa Preferences > Color Theme : Adem\u00e1s de las opciones de men\u00fa, contamos con otros mecanismos para interactuar con el editor. Por ejemplo, para abrir un archivo, podemos: seleccionar la opci\u00f3n de men\u00fa File > Open pulsar el atajo de teclado Ctrl-O (en un Mac suele ser Cmd-O ) introducir el comando File : Open ... en el panel de comandos. La command palette es un panel para introducir comandos que se abre al pulsar sobre el men\u00fa View > Command Palette (o pulsando la tecla de atajo correspondiente). Muestra una lista de comandos que podemos ejecutar, y si introducimos un texto, por ejemplo, la palabra open , dicha lista se reducir\u00e1 para mostrar las entradas que contienen esa palabra. Para ejecutar cualquiera de ellas, seleccionarla y pulsar [Intro] , o bien haciendo clic con el rat\u00f3n: Visual Studio Code cuenta con funcionalidades para facilitar la edici\u00f3n de diferentes tipos de documentos. Por ejemplo, si editamos un archivo [HTML],al introducir el texto contaremos con sugerencias de todo tipo. Tambi\u00e9n se resaltan las etiquetas html en diferentes colores. N\u00f3tese que previamente el editor debe identificar el tipo de archivo, que se establece cuando lo guardamos con un nombre y una extensi\u00f3n. Veamos un ejemplo. Al escribir en formato html, si queremos especificar el color de un elemento, se despliega autom\u00e1ticamente una lista de colores. Si lo que estamos editando es un archivo markdown, tendremos la opci\u00f3n de dividir la pantalla en dos paneles. A la izquierda podemos editar el texto, y a la derecha se previsualizar\u00e1 con su aspecto web: Para activar la previsualizaci\u00f3n, ejecutar el comando Open Preview to the Side , o pulsar en uno de los peque\u00f1os iconos de la esquina superior derecha, en la barra de pesta\u00f1as. Pasando el rat\u00f3n por encima de esos iconos, se muestra una explicaci\u00f3n de la utilidad de cada uno de ellos. Para profundizar en el manejo de Visual Studio Code , podemos acudir a su documentaci\u00f3n en l\u00ednea . El explorador y el terminal Pulsando en la opci\u00f3n de men\u00fa View > Explorer o en el primer icono de la barra lateral izquierda, podemos acceder al panel del explorador: En este panel podemos ver la lista de documentos abiertos en la secci\u00f3n Open Editors . Tambi\u00e9n podemos abrir una carpeta para examinar su contenido. Para ello, pulsar en el bot\u00f3n [ Open Folder ] . Aqu\u00ed vemos como hemos abierto una carpeta y se muestra el contenido. Pulsando sobre una carpeta o archivo, se abre un panel inferior que emula el terminal de comandos del sistema operativo. Se abre con la carpeta seleccionada como directorio actual: La emulaci\u00f3n de terminal nos permite introducir los comandos propios del sistema operativo. El panel del Terminal se cierra pulsando sobre el icono [x] de su esquina superior derecha. La carpeta que hemos abierto en el explorador se puede cerrar mediante el men\u00fa File > Close Folder . Se cerrar\u00e1n los archivos que estamos editando, preguntando previamente si queremos guardar los cambios. Extensiones Visual Studio Code permite la descarga e instalaci\u00f3n de complementos para a\u00f1adir m\u00e1s funcionalidades. Y para ello mantiene un repositorio de contribuciones de la comunidad de desarrolladores, con un proceso de instalaci\u00f3n y desinstalaci\u00f3n muy c\u00f3modo. Vamos a instalar un verificador de ortograf\u00eda. Lo primero es abrir el panel de complementos, pulando en el men\u00fa View > Extensions (o en el icono extensiones de la barra lateral). Se muestra un panel para ver lo que tenemos instalado, las recomendaciones de Microsoft, y explorar en el repositorio para buscar lo m\u00e1s interesante. En la caja superior del panel, introducimos un texto de b\u00fasqueda. En este caso, la palabra \u201cspell\u201d, puesto que buscamos alguna herramienta de ortograf\u00eda: Los complementos disponibles se muestran en una lista ordenada por popularidad. Podemos cambiar el orden pulsando en el icono [...] Pulsando sobre un complemento, se muestra un resumen del mismo, y un bot\u00f3n de [instalar] . En este caso, seleccionamos el m\u00f3dulo Code Spell Checker . Instalamos tambi\u00e9n el diccionario de espa\u00f1ol: Tras reiniciar Visual Studio Code , las palabras no encontradas en el diccionario se muestran subrayadas. En la barra inferior de estado se muestra el estado del verificador de ortograf\u00eda: Pulsando sobre ese estado en la barra inferior, abrimos el configurador de la extensi\u00f3n. Seleccionamos el idioma:","title":"Editar documentos"},{"location":"005Edicion.html#editar-documentos","text":"Una vez que hemos instalado Github Desktop y estamos preparados para redactar los documentos en nuestra m\u00e1quina local, prescindiendo del editor on-line de GitHub , el siguiente paso ser\u00e1 escoger un editor de textos. Vaya por delante que para crear archivos markdown , html , css , yml , etc, lo que necesitamos es un editor de \u201ctexto plano\u201d, de los que usan los programadores. El popular Microsoft Word u otro similar no son buenas soluciones en este caso.","title":"Editar documentos"},{"location":"005Edicion.html#escogiendo-un-editor","text":"Al buscar un editor del tipo bloc de notas , descubriremos que en la web hay infinidad de soluciones a nuestra disposici\u00f3n. Entre los usuarios de windows es muy popular Notepad++ , que podemos descargar de su p\u00e1gina web. En el caso de los equipos Mac, se incluye de serie el entorno de desarrollo XCode , que a mi personalmente me parece demasiado complejo. A veces he utilizado TextMate , aunque tambi\u00e9n es muy popular TextWrangler . Una opci\u00f3n multiplataforma cuyo uso est\u00e1 muy extendido es Atom . Por otro lado, Microsoft, en su compromiso con el software libre , proporciona un editor muy potente llamado Visual Studio Code , disponible para Windows, Mac y Linux. Cuenta con herramientas para facilitar el desarrollo de documentos tanto en formato HTML como MarkDown. Un caso especial son los editores on line , p\u00e1ginas web que presentan un panel de edici\u00f3n de texto en la ventana del navegador. Los orientados a crear archivos markdown suelen dividir la ventana en dos partes, de forma que introduciendo el texto del documento en uno de esos paneles, en el otro panel tendremos una previsualizaci\u00f3n del aspecto final de la p\u00e1gina web resultante. Un editor muy popular dentro de esta categor\u00eda es StackEdit . Otro es Dillinger . En esa misma l\u00ednea he encontrado un editor bastante minimalista aqu\u00ed . Imagen: StackEdit en acci\u00f3n. A la izquierda el texto introducido en formato markdown ; a la derecha el aspecto final cuando se convierta en p\u00e1gina web \u00daltimamente suelo utilizar el editor Visual Studio Code de Microsoft. Es software de libre descarga, potente y disponible para varios sistemas operativos. La descarga e instalaci\u00f3n es bastante simple desde su p\u00e1gina web . Una vez iniciado, su aspecto ser\u00e1 el siguiente: Lo que se muestra es un documento de bienvenida llamado Welcome , que podemos cerrar, y que posteriormente podemos recuperar desde el men\u00fa Help . V\u00e9ase que se pueden tener varios documentos abiertos a la vez, que se identifican mediante una pesta\u00f1a en la parte superior. Para cerrar cualquiera de ellos, pulsar en el icono (x) que hay en dicha pesta\u00f1a. Tambi\u00e9n contamos con un panel de navegaci\u00f3n de documentos abiertos, pulsando en el men\u00fa View > Explorer .","title":"Escogiendo un editor"},{"location":"005Edicion.html#uso-del-editor","text":"Podemos cambiar los colores utilizados por el programa mediante el men\u00fa Preferences > Color Theme : Adem\u00e1s de las opciones de men\u00fa, contamos con otros mecanismos para interactuar con el editor. Por ejemplo, para abrir un archivo, podemos: seleccionar la opci\u00f3n de men\u00fa File > Open pulsar el atajo de teclado Ctrl-O (en un Mac suele ser Cmd-O ) introducir el comando File : Open ... en el panel de comandos. La command palette es un panel para introducir comandos que se abre al pulsar sobre el men\u00fa View > Command Palette (o pulsando la tecla de atajo correspondiente). Muestra una lista de comandos que podemos ejecutar, y si introducimos un texto, por ejemplo, la palabra open , dicha lista se reducir\u00e1 para mostrar las entradas que contienen esa palabra. Para ejecutar cualquiera de ellas, seleccionarla y pulsar [Intro] , o bien haciendo clic con el rat\u00f3n: Visual Studio Code cuenta con funcionalidades para facilitar la edici\u00f3n de diferentes tipos de documentos. Por ejemplo, si editamos un archivo [HTML],al introducir el texto contaremos con sugerencias de todo tipo. Tambi\u00e9n se resaltan las etiquetas html en diferentes colores. N\u00f3tese que previamente el editor debe identificar el tipo de archivo, que se establece cuando lo guardamos con un nombre y una extensi\u00f3n. Veamos un ejemplo. Al escribir en formato html, si queremos especificar el color de un elemento, se despliega autom\u00e1ticamente una lista de colores. Si lo que estamos editando es un archivo markdown, tendremos la opci\u00f3n de dividir la pantalla en dos paneles. A la izquierda podemos editar el texto, y a la derecha se previsualizar\u00e1 con su aspecto web: Para activar la previsualizaci\u00f3n, ejecutar el comando Open Preview to the Side , o pulsar en uno de los peque\u00f1os iconos de la esquina superior derecha, en la barra de pesta\u00f1as. Pasando el rat\u00f3n por encima de esos iconos, se muestra una explicaci\u00f3n de la utilidad de cada uno de ellos. Para profundizar en el manejo de Visual Studio Code , podemos acudir a su documentaci\u00f3n en l\u00ednea .","title":"Uso del editor"},{"location":"005Edicion.html#el-explorador-y-el-terminal","text":"Pulsando en la opci\u00f3n de men\u00fa View > Explorer o en el primer icono de la barra lateral izquierda, podemos acceder al panel del explorador: En este panel podemos ver la lista de documentos abiertos en la secci\u00f3n Open Editors . Tambi\u00e9n podemos abrir una carpeta para examinar su contenido. Para ello, pulsar en el bot\u00f3n [ Open Folder ] . Aqu\u00ed vemos como hemos abierto una carpeta y se muestra el contenido. Pulsando sobre una carpeta o archivo, se abre un panel inferior que emula el terminal de comandos del sistema operativo. Se abre con la carpeta seleccionada como directorio actual: La emulaci\u00f3n de terminal nos permite introducir los comandos propios del sistema operativo. El panel del Terminal se cierra pulsando sobre el icono [x] de su esquina superior derecha. La carpeta que hemos abierto en el explorador se puede cerrar mediante el men\u00fa File > Close Folder . Se cerrar\u00e1n los archivos que estamos editando, preguntando previamente si queremos guardar los cambios.","title":"El explorador y el terminal"},{"location":"005Edicion.html#extensiones","text":"Visual Studio Code permite la descarga e instalaci\u00f3n de complementos para a\u00f1adir m\u00e1s funcionalidades. Y para ello mantiene un repositorio de contribuciones de la comunidad de desarrolladores, con un proceso de instalaci\u00f3n y desinstalaci\u00f3n muy c\u00f3modo. Vamos a instalar un verificador de ortograf\u00eda. Lo primero es abrir el panel de complementos, pulando en el men\u00fa View > Extensions (o en el icono extensiones de la barra lateral). Se muestra un panel para ver lo que tenemos instalado, las recomendaciones de Microsoft, y explorar en el repositorio para buscar lo m\u00e1s interesante. En la caja superior del panel, introducimos un texto de b\u00fasqueda. En este caso, la palabra \u201cspell\u201d, puesto que buscamos alguna herramienta de ortograf\u00eda: Los complementos disponibles se muestran en una lista ordenada por popularidad. Podemos cambiar el orden pulsando en el icono [...] Pulsando sobre un complemento, se muestra un resumen del mismo, y un bot\u00f3n de [instalar] . En este caso, seleccionamos el m\u00f3dulo Code Spell Checker . Instalamos tambi\u00e9n el diccionario de espa\u00f1ol: Tras reiniciar Visual Studio Code , las palabras no encontradas en el diccionario se muestran subrayadas. En la barra inferior de estado se muestra el estado del verificador de ortograf\u00eda: Pulsando sobre ese estado en la barra inferior, abrimos el configurador de la extensi\u00f3n. Seleccionamos el idioma:","title":"Extensiones"},{"location":"006Markdown.html","text":"Markdown Para crear documentos de texto, en GitHub el formato m\u00e1s popular es MarkDown . Consiste en crear archivos de \u201c texto plano \u201d respetando unas reglas de sintaxis que explicaremos en este cap\u00edtulo. Introducci\u00f3n Markdown es una sintaxis sencilla y f\u00e1cil de editar, ideada en 2004 por John Gruber . Se trata de un proyecto que ha evolucionado muy poco desde su creaci\u00f3n, lo que ha dado lugar a que surjan diferentes versiones mejoradas. GitHub utiliza una propia denominada GitHub Flavored Markdown , cuya referencia podemos encontrar en varias gu\u00edas y tutoriales de GitHub : Tutorial Gu\u00eda de escritura Como incluir tablas Como incluir bloques de c\u00f3digo Como incluir enlaces Especificaciones Algunos generadores de html permiten configurar el proceso y seleccionar una u otra versi\u00f3n. McDocs, el generador que estoy usando para los cuadernos de notas, utiliza la versi\u00f3n Python Markdown . Visual Studio Code utiliza su propio generador de html a efectos de previsualizaci\u00f3n, por lo que es posible que algunas de las opciones que estamos utilizando no tengan el mismo aspecto final que en el editor. Tambi\u00e9n existen extensiones que podemos instalar en nuestro equipo para ampliar las opciones de sintaxis: tablas, notas a pie de p\u00e1gina, \u00edndices, y otros muchos elementos no contemplados en la versi\u00f3n original de markdown . Podemos ver esas especificaciones originales en la p\u00e1gina web de John Gruber, daringfirewall . Los archivos fuente de esta documentaci\u00f3n est\u00e1n escritos en formato markdown , y resultan interesantes como ejemplo que podemos estudiar. Se encuentran disponibles en: p\u00e1gina main p\u00e1gina basics p\u00e1gina syntax P\u00e1rrafos Al convertir de formato markdown a html , como norma general todas las l\u00edneas de texto consecutivas ser\u00e1n unidas en una sola, ignorando los saltos de l\u00ednea. Es decir, lo siguiente: Markdown es un lenguaje de marcas creado por John Gruber con el prop\u00f3sito de contar con una sintaxis sencilla y legible. \u2026 al convertirse a HTML obtendremos: Markdown es un lenguaje de marcas creado por John Gruber con el prop\u00f3sito de contar con una sintaxis sencilla y legible. Puede ser una buena idea escribir los textos fuente de forma que en cada l\u00ednea pongamos una frase, limitando el tama\u00f1o de las l\u00edneas y mejorando la legibilidad, en la seguridad de que en la conversi\u00f3n se unir\u00e1n los textos para formar el p\u00e1rrafo completo. Nota: Algunos generadores pueden comportarse de forma diferente, insertando una marca <br> de salto de l\u00ednea all\u00e1 donde lo escribamos. Un ejemplo de esto es el editor on-line Stack Edit \u00bfComo conseguimos que dos p\u00e1rrafos se muestren por separado en el resultado final? La soluci\u00f3n es insertar una l\u00ednea en blanco entre ellos: Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas. Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea en blanco para separarlo del primero. Lo que mostrar\u00e1: Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas. Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea en blanco para separarlo del primero. Se considera l\u00ednea en blanco aquella que no contiene caracteres o solo tiene espacios en blanco. Si escribimos varias l\u00edneas en blanco entre dos p\u00e1rrafos, el exceso ser\u00e1 ignorado y contar\u00e1n como una sola. Sangrado de p\u00e1rrafos Llamamos p\u00e1rrafo sangrado a aquel en el que todas sus l\u00edneas tienen espacios en blanco a la izquierda. Por ejemplo: Primer p\u00e1rrafo est\u00e1ndar. Este es un p\u00e1rrafo con sangr\u00eda. Tiene 4 espacios a la izquierda. Markdown utiliza la sangr\u00eda con prop\u00f3sitos especiales, y por lo tanto, debemos evitar todo tipo de espaciado a la izquierda excepto para esos casos particulares. L\u00edneas de cabecera Dividir un texto en p\u00e1rrafos lo hace m\u00e1s legible. Pero en el caso de documentos extensos, quiz\u00e1s queramos dotarlos de una estructura de secciones y subsecciones. Para ello, basta con colocar al inicio de cada secci\u00f3n una l\u00ednea especial de cabecera. Esto se consigue escribi\u00e9ndola precedida de uno o m\u00e1s caracteres # . Por ejemplo: # T\u00edtulo del documento Texto del documento El p\u00e1rrafo de t\u00edtulo se mostrar\u00e1 con un tipo de letra especial resaltado, y el car\u00e1cter (o caracteres) # se suprimir\u00e1 del resultado final. N\u00f3tese que debemos dejar un espacio en blanco entre la marca # y el texto del t\u00edtulo para que tenga efecto. Podemos crear una estructura formada por un t\u00edtulo general del documento, t\u00edtulos a nivel de secci\u00f3n (nivel 2), a nivel de subsecci\u00f3n (nivel 3) y as\u00ed sucesivamente hasta 6 niveles. Por ejemplo: # T\u00edtulo del documento ## Secci\u00f3n 1 ### Subsecci\u00f3n 1.1 P\u00e1rrafo de texto regular ### Subsecci\u00f3n 1.2 Otro p\u00e1rrafo de texto regular Estas l\u00edneas de t\u00edtulo o cabeceras ( headings ) se resaltar\u00e1n con un tipo de letra especial, de acuerdo a su nivel. El nivel se determina de acuerdo al n\u00famero de caracteres # . Opcionalmente podemos \u201ccerrar\u201d las l\u00edneas de t\u00edtulo con m\u00e1s caracteres # a la derecha, que en el resultado final ser\u00e1n suprimidos. Es algo puramente \u201cest\u00e9tico\u201d y ni siquiera hace falta que el n\u00famero de caracteres # coincida con los colocados a la izquierda: ## T\u00edtulo de la secci\u00f3n ###### Si usamos cabeceras, debemos estructurar el documento de la forma adecuada. T\u00e9ngase en cuenta, que se utilizan con muchos prop\u00f3sitos. Las cabeceras sirven, por ejemplo, para insertar de forma autom\u00e1tica una tabla de contenidos, para crear enlaces a una secci\u00f3n o incluso las utilizan los buscadores de Internet. La sintaxis de t\u00edtulos basada en prefijos # es conocida como \u201catx\u201d , y fue inventada por Aaron Swartz , uno de los principales colaboradores en el dise\u00f1o de markdown . Alternativamente existe la posibilidad de utilizar otra forma de sintaxis inspirada en el antiguo formato \u201c Setext \u201d. Se trata de una opci\u00f3n que solo admite dos niveles de cabecera. Los t\u00edtulos se delimitan subrayando con caracteres = las cabeceras de nivel uno, y con guiones las de nivel dos. Por ejemplo: T\u00edtulo del documento ==================== T\u00edtulo de la secci\u00f3n -------------------- P\u00e1rrafo de texto regular El n\u00famero de caracteres de subrayado no tiene por que coincidir con la longitud del t\u00edtulo. Insertar html Markdown fue concebido como una forma sencilla de escribir documentos que ser\u00e1n convertidos al formato web. En resumen, podemos considerar HTML como un formato para publicar contenidos, y markdown como un formato para escribirlos. El problema es que markdown no cubre todas las funcionalidades que proporcionan las etiquetas html, que es una sintaxis de una gran complejidad. La soluci\u00f3n a aplicar es simple; basta con insertar directamente etiquetas html en los textos markdown cuando sea necesario. En general ser\u00e1n respetadas, salvo cuando entren en conflicto con las etiquetas generadas en el proceso de conversi\u00f3n. Las especificaciones de GitHub o del generador que estemos utilizando nos pueden sacar de dudas en caso de conflicto. En l\u00edneas generales, las etiquetas utilizadas para delimitar bloques de texto html, tales como <div> , <table> , <pre> , <p> , etc. , deben separarse del resto del documento con una l\u00ednea en blanco al principio y final del bloque, y las etiquetas de inicio y fin de bloque no deben llevar sangrado alguno. Por ejemplo, si las funcionalidades proporcionadas por markdown para crear tablas no nos convencen, podemos insertar una usando directamente la sintaxis html: P\u00e1rrafo de texto regular markdown <table> <tr> <td> texto de celda </td> </tr> </table> Otro p\u00e1rrafo de texto regular markdown N\u00f3tese que dentro de un bloque html no tienen efecto las marcas utilizadas en la sintaxis markdown . Por ejemplo, un asterisco se visualizar\u00e1 como tal, no como delimitador de texto en cursiva. Adem\u00e1s de utilizar etiquetas html para delimitar bloques enteros, podemos usar otras etiquetas dentro de un p\u00e1rrafo regular. Por ejemplo, podemos utilizar <br> para forzar un salto de l\u00ednea, o <span> ... </span> para aplicar un estilo especial a un fragmento de texto. Podemos incluso sustituir el formato markdown por etiquetas html si ese es nuestro deseo. Por ejemplo, para insertar una imagen escribimos: ! [ texto alternativo ]( imagen . jpg ) pero podemos hacerlo en formato html: < img src = \"imagen.jpg\" alt = \"texto alternativo\" > No conviene abusar de esta posibilidad, porque hace los documentos m\u00e1s complejos de leer y estamos renunciando a los beneficios de la sintaxis markdown . Sin embargo, resulta \u00fatil si queremos especificar algo de mayor complejidad: < img src = \"imagen.jpg\" alt = \"texto alternativo\" height = \"42\" width = \"42\" > Saltos de l\u00ednea Dentro de un p\u00e1rrafo de texto regular, los saltos ser\u00e1n ignorados y el texto de las l\u00edneas unido en una sola. Podemos preservar esos saltos de dos formas: a\u00f1adiendo una etiqueta <br> a\u00f1adiendo dos espacios en blanco al final de la l\u00ednea Otra forma de preservar los saltos de l\u00ednea es crear p\u00e1rrafos de texto literal , donde no tiene efecto el formato markdown . Se consigue sangrando el p\u00e1rrafo con al menos cuatro espacios a la izquierda. Lo siguiente: Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas. Este es el segundo p\u00e1rrafo. Se respetan los saltos Une las l\u00edneas del primer p\u00e1rrafo como texto regular, y respeta los saltos de l\u00ednea del segundo p\u00e1rrafo, ignorando las marcas markdown y consider\u00e1ndolo como texto literal, delimitado con etiquetas <pre> en el resultado final html. Citas Los p\u00e1rrafos de citas se muestran en un formato especial y se delimitan precediendo cada l\u00ednea con un car\u00e1cter > > Esta es una cita con dos p\u00e1rrafos. > Las l\u00edneas de un p\u00e1rrafo se escriben > consecutivas > > Este es el segundo p\u00e1rrafo de la cita. El prefijo > solo es necesario en la primera l\u00ednea: > Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Las citas pueden anidarse (una dentro de otra) si a\u00f1adimos caracteres \u201c > \u201d adicionales: > Primer nivel de texto. > > > Cita dentro de otra. > > Volviendo al primer nivel. Un p\u00e1rrafo de cita puede contener otros elementos markdown , incluyendo listas, cabeceras, bloques de c\u00f3digo, etc. > ## Cabecera. > > 1. Primer elemento. > 2. Segundo elemento. > > Texto fuente de un programa delimitado mediante sangrado: > > return shell_exec(\"echo $input | $markdown_script\"); Listas Para crear una lista con vi\u00f1etas podemos usar como marcadores unos asteriscos (*), guiones (-) o s\u00edmbolos de suma (+). Por ejemplo: + rojo + verde + azul Las listas ordenadas se escriben de la siguiente forma 1. rojo 2. verde 3. azul T\u00edpicamente las listas se ajustan al margen izquierdo, pero se pueden sangrar hasta tres espacios (con cuatro ser\u00eda texto preformateado). Entre el marcador (vi\u00f1eta/n\u00famero) y el texto debemos dejar al menos un espacio. Un elemento finaliza al introducir el siguiente elemento con un marcador, o bien, al encontrar una l\u00ednea en blanco. Sucesivas l\u00edneas de texto formar\u00e1n parte del elemento y su unir\u00e1n en una sola: * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Pero es m\u00e1s elegante escribir el texto alineado: * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Si dejamos una l\u00ednea en blanco entre elementos de la lista, markdown los delimitar\u00e1 con etiquetas <p> , convirtiendo cada elemento en un p\u00e1rrafo. Por ejemplo: * Verde * Azul se convertir\u00e1 en: < ul > < li > Verde </ li > < li > Azul </ li > </ ul > pero lo siguiente: * Verde * Azul se convierte en: <ul> <li><p> Verde </p></li> <li><p> Azul </p></li> </ul> Si queremos que un nuevo p\u00e1rrafo forme parte del elemento anterior, debemos alinear el sangrado de la primera l\u00ednea del p\u00e1rrafo, que debe consistir en al menos cuatro espacios: 1. Elemento con dos p\u00e1rrafos. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. Si colocamos una cita dentro de un elemento, el car\u00e1cter > debe estar sangrado: * un elemento con cita: > Una cita dentro de un > elemento de lista Para colocar un bloque de c\u00f3digo (texto preformateado) dentro de un elemento de lista, tenemos que sangrarlo con al menos ocho espacios: * Un elemento de lista: <texto fuente> N\u00f3tese que podr\u00edamos crear un elemento de lista accidentalmente. Por ejemplo: 1986. Un a\u00f1o muy especial. La soluci\u00f3n es \u201cescapar\u201d el punto precedi\u00e9ndolo con una barra invertida \\ que no ser\u00e1 mostrada: 1986\\. Un a\u00f1o muy especial. Podemos crear listas anidadas si a\u00f1adimos sangrado a la lista interna: - Elemento 1 - elemento 1.1 - elemento 1.2 - Elemento 2 lo que muestra: Elemento 1 elemento 1.1 elemento 1.2 Elemento 2 Bloques de c\u00f3digo fuente Ya hemos visto que un p\u00e1rrafo preformateado es aquel que se muestra \u201ctal cual\u201d, sin que le afecte el formato markdown . T\u00edpicamente se suele utilizar para incluir en el documento el texto de alg\u00fan programa. Al convertir a html, los p\u00e1rrafos preformateados ser\u00e1n delimitados con las etiquetas <pre> y <code> simult\u00e1neamente. La primera sirve para indicar que hay que respetar los saltos de l\u00ednea y espaciado, y la segunda, para establecer un tipo de letra especial. Estos p\u00e1rrafos se identifican sangr\u00e1ndolos con al menos cuatro espacios. Por ejemplo: Este es un p\u00e1rrafo normal: esto es un bloque de c\u00f3digo. Se convertir\u00e1 a: <p> Este es un p\u00e1rrafo normal: </p> <pre><code> esto es un bloque de c\u00f3digo. </code></pre> Se suprimir\u00e1 un nivel de sangrado (cuatro espacios) en el resultado final, y se mantendr\u00e1 el sangrado adicional. Eso nos permite incluir espacios a la izquierda como parte del texto fuente a representar. Un bloque de c\u00f3digo finaliza al encontrar una l\u00ednea sin sangrado. Dentro de un bloque de c\u00f3digo los ampersands ( & ) y s\u00edmbolos < > se convertir\u00e1n a entidades HTML, lo que facilita la escritura de texto. Por ejemplo: <div class= \"footer\" > &copy; 2004 Foo Corporation </div> se convertir\u00e1 en <pre><code> &lt; div class=\"footer\" &gt; &amp; copy; 2004 Foo Corporation &lt; /div &gt; </code></pre> La sintaxis markdown no tiene efecto dentro de un bloque de c\u00f3digo. L\u00ednea horizontal Podemos insertar una l\u00ednea horizontal insertando una etiqueta <hr /> o bien si escribimos en una l\u00ednea aparte tres o m\u00e1s guiones, asteriscos o caracteres de subrayado. Podemos a\u00f1adir espacios entre estos s\u00edmbolos. Por ejemplo: * * * *** ***** - - - -------------------------- Enlaces Existen dos tipos de enlaces: inline y referencias . En ambos estilos, el texto a mostrar en el enlace se delimita [entre corchetes]. Para crear un enlace inline tenemos que escribir a continuaci\u00f3n la URL entre par\u00e9ntesis. Opcionalmente podemos a\u00f1adir un texto para el atributo \u201ctitle\u201d. Por ejemplo: Esto es [ un ejemplo ]( http : //ejemplo.com/ \"T\u00edtulo\") de enlace inline. [ este enlace ]( http : //ejemplo.net/) no tiene atributo de t\u00edtulo. Generar\u00e1: < p > Esto es < a href = \"http://ejemplo.com/\" title = \"Titulo\" > un ejemplo </ a > de enlace inline. </ p > < p >< a href = \"http://ejemplo.net/\" > Este enlace </ a > no tiene atributo de t\u00edtulo. </ p > Si queremos enlazar con un archivo en el mismo repositorio, podemos usar \u201cpaths relativos\u201d a la ubicaci\u00f3n del archivo actual: V\u00e9ase [ Acerca de ](. / acercade ) Si enlazamos a otra p\u00e1gina, podemos indicar el archivo markdown . Esto ser\u00e1 transformado en el correspondiente .html : V\u00e9ase [ Acerca de ](. / acercade . md ) N\u00f3tese que si clonamos un repositorio y llevamos los archivos a otra ubicaci\u00f3n, las direcciones relativas funcionar\u00e1n mejor que las absolutas. Los enlaces por referencia sustituyen la URL entre par\u00e9ntesis por una referencia entre corchetes: Este es [ un ejemplo ][ id ] de enlace por referencia . Opcionalmente podemos poner un espacio entre ambos elementos: Este es [ un ejemplo ] [ id ] de enlace por referencia . En alg\u00fan lugar del documento debemos definir la referencia. Se escribe en l\u00ednea aparte: [id]: http://ejemplo.com/ \"T\u00edtulo opcional\" El sangrado no puede superar los tres espacios. Entre el car\u00e1cter : y la URL debemos colocar al menos un espacio. El atributo title es opcional, y puede escribirse entre comillas, ap\u00f3strofos o par\u00e9ntesis: [id]: http://ejemplo.com/ \"T\u00edtulo opcional\" [id]: http://ejemplo.com/ 'T\u00edtulo opcional' [id]: http://ejemplo.com/ (T\u00edtulo opcional) La URL puede escribirse entre s\u00edmbolos < > [id]: <http://ejemplo.com/> \"T\u00edtulo opcional\" Podemos poner el t\u00edtulo en la siguiente l\u00ednea y sangrarlo con espaciado extra si lo deseamos: [id]: <http://ejemplo.com/> \"T\u00edtulo opcional\" N\u00f3tese que estas l\u00edneas con definiciones de enlaces no ser\u00e1n visibles en el resultado final. Las etiquetas usadas para definir enlaces son case-insensitive. Por ejemplo: [texto 1][a] [texto 2][A] se considera que la referencia es la misma. Es posible usar el texto del enlace como etiqueta, lo que se conoce como implicit link name . Por ejemplo: [Google][] O bien, sin la segunda pareja de corchetes: [Google] Y definimos el enlace como: [Google]: http://google.com/ Esto tambi\u00e9n funciona cuando el texto contiene espacios: Visite [ Daring Fireball ][] para m\u00e1s informaci\u00f3n . Y definimos el enlace como: [ Daring Fireball ] : http : //daringfireball.net/ Las definiciones se pueden colocar en cualquier lugar del documento. Hay quien prefiere ponerlas tras el p\u00e1rrafo en cuesti\u00f3n, y otros prefieren poner todas las definiciones agrupadas al final del documento. Enlaces autom\u00e1ticos Podemos escribir una URL en mitad del texto, que ser\u00e1 mostrada como enlace si la escribimos entre delimitadores < > . <http://ejemplo.com/> Lo que genera: < a href = \"http://ejemplo.com/\" > http://ejemplo.com/ </ a > Tambi\u00e9n podemos hacer esto con direcciones de correo: <direccion@ejemplo.com> Los conversores markdown suelen intentar \u201cocultar\u201d las direcciones para que sean dif\u00edciles de rastrear, sustituyendo cada car\u00e1cter por su correspondiente entidad HTML. Por ejemplo, lo anterior puede convertirse en algo as\u00ed como: < a href = \"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65; &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111; &#109;\" > &#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61; &#109;&#x70;&#x6C; e &#x2E;&#99;&#111;&#109; </ a > En todo caso, si queremos evitar el spam, se recomienda no incluir direcciones de correo en un documento. Enlaces a secciones Podemos insertar un enlace a la l\u00ednea de cabecera de una secci\u00f3n, si escribimos entre corchetes su texto. Por ejemplo: ## Acerca de este documento ... texto regular Y en alg\u00fan otro lugar: V\u00e9ase [acerca-de-este-documento] Los conversores suelen generar un id para cada elemento <h1> \u2026 <h6> que consiste en el texto de la cabecera, en min\u00fasculas y suprimiendo los espacios en blanco. Es decir, la cabecera: ## Acerca de este documento se convertir\u00e1 en: < h2 id = \"acerca-de-este-documento\" > Acerca de este documento </ h2 > De todas formas, esto puede ser configurable, por lo que conviene mirar la documentaci\u00f3n del software conversor. Texto enfatizado Markdown considera los asteriscos ( * ) y caracteres de subrayado ( _ ) como indicadores de \u00e9nfasis. Todo texto entre asteriscos ser\u00e1 delimitado con etiquetas <em> en el resultado final, y si usamos doble asterisco o subrayado, con etiquetas <strong> . Lo siguiente *asterisco* _subrayado_ **doble asterisco** __doble subrayado__ generar\u00e1: < em > asterisco </ em > < em > subrayado </ em > < strong > doble asterisco </ strong > < strong > doble subrayado </ strong > Podemos poner \u00e9nfasis en mitad de una palabra: Don*super*incre\u00edble pero todo marcador rodeado de espacios ser\u00e1 tratado como texto regular. Si queremos forzar que se trate como tal, podemos \u201c escapar \u201d las marcas precedi\u00e9ndolas con una barra invertida: \\*texto que se mostrar\u00e1 entre asteriscos\\* Podemos combinar dos estilos diferentes de enfatizado: *Esto es __super__ importante* lo que muestra: Esto es super importante C\u00f3digo fuente inline Podemos indicar que un fragmento de texto se muestre de forma literal delimit\u00e1ndolo con acentos invertidos ( ` ). A diferencia de los bloques preformateados, un fragmento literal puede formar parte de un p\u00e1rrafo regular. Por ejemplo: Usar la funci\u00f3n `printf()` generar\u00e1: < p > Usar la funci\u00f3n < code > printf() </ code > </ p > Para incluir un acento invertido en el texto literal, usar como delimitadores dos acentos: ``Usar un car\u00e1cter (`) delimitador.`` Los delimitadores pueden escribirse con espacios, uno tras la apertura y otro antes del cierre, que ser\u00e1n eliminados del resultado final. Los caracteres & y < > se convertir\u00e1n en entidades HTML. Por ejemplo: No usar etiquetas `<div>`. Se convierte en < p > No usar etiquetas < code > &lt; div &gt; </ code > . </ p > Im\u00e1genes La sintaxis para insertar im\u00e1genes es la misma que para los enlaces, a\u00f1adiendo un prefijo ! . El texto del enlace ser\u00e1 considerado como texto alternativo . Las im\u00e1genes Inline se escriben as\u00ed: ![texto](/carpeta/img.jpg) ![texto](/carpeta/img.jpg \"T\u00edtulo\") Y las im\u00e1genes por referencia: ![texto][id] la definici\u00f3n es id\u00e9ntica a la de los enlaces: [id]: carpeta/imagen \"T\u00edtulo\" Si queremos especificar las dimensiones, usar etiquetas <img> en lugar del formato markdown . < img src = \"imagen.jpg\" alt = \"texto alternativo\" height = \"42\" width = \"42\" > Escapes Todo car\u00e1cter precedido por una barra invertida ser\u00e1 tratado como texto regular. Por ejemplo, \\*texto con asteriscos\\* Mostrar\u00e1 los asteriscos como parte del texto, sin que se consideren como delimitadores de letra enfatizada. Un car\u00e1cter \\ se considerar\u00e1 como texto regular siempre que no preceda a alguno de los siguientes: \\ barra invertida ` acento invertido * asterisco _ subrayado {} llaves [] corchetes () par\u00e9ntesis # hash + signo de suma - gui\u00f3n . punto ! exclamaci\u00f3n","title":"Formato markdown"},{"location":"006Markdown.html#markdown","text":"Para crear documentos de texto, en GitHub el formato m\u00e1s popular es MarkDown . Consiste en crear archivos de \u201c texto plano \u201d respetando unas reglas de sintaxis que explicaremos en este cap\u00edtulo.","title":"Markdown"},{"location":"006Markdown.html#introduccion","text":"Markdown es una sintaxis sencilla y f\u00e1cil de editar, ideada en 2004 por John Gruber . Se trata de un proyecto que ha evolucionado muy poco desde su creaci\u00f3n, lo que ha dado lugar a que surjan diferentes versiones mejoradas. GitHub utiliza una propia denominada GitHub Flavored Markdown , cuya referencia podemos encontrar en varias gu\u00edas y tutoriales de GitHub : Tutorial Gu\u00eda de escritura Como incluir tablas Como incluir bloques de c\u00f3digo Como incluir enlaces Especificaciones Algunos generadores de html permiten configurar el proceso y seleccionar una u otra versi\u00f3n. McDocs, el generador que estoy usando para los cuadernos de notas, utiliza la versi\u00f3n Python Markdown . Visual Studio Code utiliza su propio generador de html a efectos de previsualizaci\u00f3n, por lo que es posible que algunas de las opciones que estamos utilizando no tengan el mismo aspecto final que en el editor. Tambi\u00e9n existen extensiones que podemos instalar en nuestro equipo para ampliar las opciones de sintaxis: tablas, notas a pie de p\u00e1gina, \u00edndices, y otros muchos elementos no contemplados en la versi\u00f3n original de markdown . Podemos ver esas especificaciones originales en la p\u00e1gina web de John Gruber, daringfirewall . Los archivos fuente de esta documentaci\u00f3n est\u00e1n escritos en formato markdown , y resultan interesantes como ejemplo que podemos estudiar. Se encuentran disponibles en: p\u00e1gina main p\u00e1gina basics p\u00e1gina syntax","title":"Introducci\u00f3n"},{"location":"006Markdown.html#parrafos","text":"Al convertir de formato markdown a html , como norma general todas las l\u00edneas de texto consecutivas ser\u00e1n unidas en una sola, ignorando los saltos de l\u00ednea. Es decir, lo siguiente: Markdown es un lenguaje de marcas creado por John Gruber con el prop\u00f3sito de contar con una sintaxis sencilla y legible. \u2026 al convertirse a HTML obtendremos: Markdown es un lenguaje de marcas creado por John Gruber con el prop\u00f3sito de contar con una sintaxis sencilla y legible. Puede ser una buena idea escribir los textos fuente de forma que en cada l\u00ednea pongamos una frase, limitando el tama\u00f1o de las l\u00edneas y mejorando la legibilidad, en la seguridad de que en la conversi\u00f3n se unir\u00e1n los textos para formar el p\u00e1rrafo completo. Nota: Algunos generadores pueden comportarse de forma diferente, insertando una marca <br> de salto de l\u00ednea all\u00e1 donde lo escribamos. Un ejemplo de esto es el editor on-line Stack Edit \u00bfComo conseguimos que dos p\u00e1rrafos se muestren por separado en el resultado final? La soluci\u00f3n es insertar una l\u00ednea en blanco entre ellos: Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas. Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea en blanco para separarlo del primero. Lo que mostrar\u00e1: Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas. Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea en blanco para separarlo del primero. Se considera l\u00ednea en blanco aquella que no contiene caracteres o solo tiene espacios en blanco. Si escribimos varias l\u00edneas en blanco entre dos p\u00e1rrafos, el exceso ser\u00e1 ignorado y contar\u00e1n como una sola.","title":"P\u00e1rrafos"},{"location":"006Markdown.html#sangrado-de-parrafos","text":"Llamamos p\u00e1rrafo sangrado a aquel en el que todas sus l\u00edneas tienen espacios en blanco a la izquierda. Por ejemplo: Primer p\u00e1rrafo est\u00e1ndar. Este es un p\u00e1rrafo con sangr\u00eda. Tiene 4 espacios a la izquierda. Markdown utiliza la sangr\u00eda con prop\u00f3sitos especiales, y por lo tanto, debemos evitar todo tipo de espaciado a la izquierda excepto para esos casos particulares.","title":"Sangrado de p\u00e1rrafos"},{"location":"006Markdown.html#lineas-de-cabecera","text":"Dividir un texto en p\u00e1rrafos lo hace m\u00e1s legible. Pero en el caso de documentos extensos, quiz\u00e1s queramos dotarlos de una estructura de secciones y subsecciones. Para ello, basta con colocar al inicio de cada secci\u00f3n una l\u00ednea especial de cabecera. Esto se consigue escribi\u00e9ndola precedida de uno o m\u00e1s caracteres # . Por ejemplo: # T\u00edtulo del documento Texto del documento El p\u00e1rrafo de t\u00edtulo se mostrar\u00e1 con un tipo de letra especial resaltado, y el car\u00e1cter (o caracteres) # se suprimir\u00e1 del resultado final. N\u00f3tese que debemos dejar un espacio en blanco entre la marca # y el texto del t\u00edtulo para que tenga efecto. Podemos crear una estructura formada por un t\u00edtulo general del documento, t\u00edtulos a nivel de secci\u00f3n (nivel 2), a nivel de subsecci\u00f3n (nivel 3) y as\u00ed sucesivamente hasta 6 niveles. Por ejemplo: # T\u00edtulo del documento ## Secci\u00f3n 1 ### Subsecci\u00f3n 1.1 P\u00e1rrafo de texto regular ### Subsecci\u00f3n 1.2 Otro p\u00e1rrafo de texto regular Estas l\u00edneas de t\u00edtulo o cabeceras ( headings ) se resaltar\u00e1n con un tipo de letra especial, de acuerdo a su nivel. El nivel se determina de acuerdo al n\u00famero de caracteres # . Opcionalmente podemos \u201ccerrar\u201d las l\u00edneas de t\u00edtulo con m\u00e1s caracteres # a la derecha, que en el resultado final ser\u00e1n suprimidos. Es algo puramente \u201cest\u00e9tico\u201d y ni siquiera hace falta que el n\u00famero de caracteres # coincida con los colocados a la izquierda: ## T\u00edtulo de la secci\u00f3n ###### Si usamos cabeceras, debemos estructurar el documento de la forma adecuada. T\u00e9ngase en cuenta, que se utilizan con muchos prop\u00f3sitos. Las cabeceras sirven, por ejemplo, para insertar de forma autom\u00e1tica una tabla de contenidos, para crear enlaces a una secci\u00f3n o incluso las utilizan los buscadores de Internet. La sintaxis de t\u00edtulos basada en prefijos # es conocida como \u201catx\u201d , y fue inventada por Aaron Swartz , uno de los principales colaboradores en el dise\u00f1o de markdown . Alternativamente existe la posibilidad de utilizar otra forma de sintaxis inspirada en el antiguo formato \u201c Setext \u201d. Se trata de una opci\u00f3n que solo admite dos niveles de cabecera. Los t\u00edtulos se delimitan subrayando con caracteres = las cabeceras de nivel uno, y con guiones las de nivel dos. Por ejemplo: T\u00edtulo del documento ==================== T\u00edtulo de la secci\u00f3n -------------------- P\u00e1rrafo de texto regular El n\u00famero de caracteres de subrayado no tiene por que coincidir con la longitud del t\u00edtulo.","title":"L\u00edneas de cabecera"},{"location":"006Markdown.html#insertar-html","text":"Markdown fue concebido como una forma sencilla de escribir documentos que ser\u00e1n convertidos al formato web. En resumen, podemos considerar HTML como un formato para publicar contenidos, y markdown como un formato para escribirlos. El problema es que markdown no cubre todas las funcionalidades que proporcionan las etiquetas html, que es una sintaxis de una gran complejidad. La soluci\u00f3n a aplicar es simple; basta con insertar directamente etiquetas html en los textos markdown cuando sea necesario. En general ser\u00e1n respetadas, salvo cuando entren en conflicto con las etiquetas generadas en el proceso de conversi\u00f3n. Las especificaciones de GitHub o del generador que estemos utilizando nos pueden sacar de dudas en caso de conflicto. En l\u00edneas generales, las etiquetas utilizadas para delimitar bloques de texto html, tales como <div> , <table> , <pre> , <p> , etc. , deben separarse del resto del documento con una l\u00ednea en blanco al principio y final del bloque, y las etiquetas de inicio y fin de bloque no deben llevar sangrado alguno. Por ejemplo, si las funcionalidades proporcionadas por markdown para crear tablas no nos convencen, podemos insertar una usando directamente la sintaxis html: P\u00e1rrafo de texto regular markdown <table> <tr> <td> texto de celda </td> </tr> </table> Otro p\u00e1rrafo de texto regular markdown N\u00f3tese que dentro de un bloque html no tienen efecto las marcas utilizadas en la sintaxis markdown . Por ejemplo, un asterisco se visualizar\u00e1 como tal, no como delimitador de texto en cursiva. Adem\u00e1s de utilizar etiquetas html para delimitar bloques enteros, podemos usar otras etiquetas dentro de un p\u00e1rrafo regular. Por ejemplo, podemos utilizar <br> para forzar un salto de l\u00ednea, o <span> ... </span> para aplicar un estilo especial a un fragmento de texto. Podemos incluso sustituir el formato markdown por etiquetas html si ese es nuestro deseo. Por ejemplo, para insertar una imagen escribimos: ! [ texto alternativo ]( imagen . jpg ) pero podemos hacerlo en formato html: < img src = \"imagen.jpg\" alt = \"texto alternativo\" > No conviene abusar de esta posibilidad, porque hace los documentos m\u00e1s complejos de leer y estamos renunciando a los beneficios de la sintaxis markdown . Sin embargo, resulta \u00fatil si queremos especificar algo de mayor complejidad: < img src = \"imagen.jpg\" alt = \"texto alternativo\" height = \"42\" width = \"42\" >","title":"Insertar html"},{"location":"006Markdown.html#saltos-de-linea","text":"Dentro de un p\u00e1rrafo de texto regular, los saltos ser\u00e1n ignorados y el texto de las l\u00edneas unido en una sola. Podemos preservar esos saltos de dos formas: a\u00f1adiendo una etiqueta <br> a\u00f1adiendo dos espacios en blanco al final de la l\u00ednea Otra forma de preservar los saltos de l\u00ednea es crear p\u00e1rrafos de texto literal , donde no tiene efecto el formato markdown . Se consigue sangrando el p\u00e1rrafo con al menos cuatro espacios a la izquierda. Lo siguiente: Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas. Este es el segundo p\u00e1rrafo. Se respetan los saltos Une las l\u00edneas del primer p\u00e1rrafo como texto regular, y respeta los saltos de l\u00ednea del segundo p\u00e1rrafo, ignorando las marcas markdown y consider\u00e1ndolo como texto literal, delimitado con etiquetas <pre> en el resultado final html.","title":"Saltos de l\u00ednea"},{"location":"006Markdown.html#citas","text":"Los p\u00e1rrafos de citas se muestran en un formato especial y se delimitan precediendo cada l\u00ednea con un car\u00e1cter > > Esta es una cita con dos p\u00e1rrafos. > Las l\u00edneas de un p\u00e1rrafo se escriben > consecutivas > > Este es el segundo p\u00e1rrafo de la cita. El prefijo > solo es necesario en la primera l\u00ednea: > Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Las citas pueden anidarse (una dentro de otra) si a\u00f1adimos caracteres \u201c > \u201d adicionales: > Primer nivel de texto. > > > Cita dentro de otra. > > Volviendo al primer nivel. Un p\u00e1rrafo de cita puede contener otros elementos markdown , incluyendo listas, cabeceras, bloques de c\u00f3digo, etc. > ## Cabecera. > > 1. Primer elemento. > 2. Segundo elemento. > > Texto fuente de un programa delimitado mediante sangrado: > > return shell_exec(\"echo $input | $markdown_script\");","title":"Citas"},{"location":"006Markdown.html#listas","text":"Para crear una lista con vi\u00f1etas podemos usar como marcadores unos asteriscos (*), guiones (-) o s\u00edmbolos de suma (+). Por ejemplo: + rojo + verde + azul Las listas ordenadas se escriben de la siguiente forma 1. rojo 2. verde 3. azul T\u00edpicamente las listas se ajustan al margen izquierdo, pero se pueden sangrar hasta tres espacios (con cuatro ser\u00eda texto preformateado). Entre el marcador (vi\u00f1eta/n\u00famero) y el texto debemos dejar al menos un espacio. Un elemento finaliza al introducir el siguiente elemento con un marcador, o bien, al encontrar una l\u00ednea en blanco. Sucesivas l\u00edneas de texto formar\u00e1n parte del elemento y su unir\u00e1n en una sola: * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Pero es m\u00e1s elegante escribir el texto alineado: * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Si dejamos una l\u00ednea en blanco entre elementos de la lista, markdown los delimitar\u00e1 con etiquetas <p> , convirtiendo cada elemento en un p\u00e1rrafo. Por ejemplo: * Verde * Azul se convertir\u00e1 en: < ul > < li > Verde </ li > < li > Azul </ li > </ ul > pero lo siguiente: * Verde * Azul se convierte en: <ul> <li><p> Verde </p></li> <li><p> Azul </p></li> </ul> Si queremos que un nuevo p\u00e1rrafo forme parte del elemento anterior, debemos alinear el sangrado de la primera l\u00ednea del p\u00e1rrafo, que debe consistir en al menos cuatro espacios: 1. Elemento con dos p\u00e1rrafos. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. Si colocamos una cita dentro de un elemento, el car\u00e1cter > debe estar sangrado: * un elemento con cita: > Una cita dentro de un > elemento de lista Para colocar un bloque de c\u00f3digo (texto preformateado) dentro de un elemento de lista, tenemos que sangrarlo con al menos ocho espacios: * Un elemento de lista: <texto fuente> N\u00f3tese que podr\u00edamos crear un elemento de lista accidentalmente. Por ejemplo: 1986. Un a\u00f1o muy especial. La soluci\u00f3n es \u201cescapar\u201d el punto precedi\u00e9ndolo con una barra invertida \\ que no ser\u00e1 mostrada: 1986\\. Un a\u00f1o muy especial. Podemos crear listas anidadas si a\u00f1adimos sangrado a la lista interna: - Elemento 1 - elemento 1.1 - elemento 1.2 - Elemento 2 lo que muestra: Elemento 1 elemento 1.1 elemento 1.2 Elemento 2","title":"Listas"},{"location":"006Markdown.html#bloques-de-codigo-fuente","text":"Ya hemos visto que un p\u00e1rrafo preformateado es aquel que se muestra \u201ctal cual\u201d, sin que le afecte el formato markdown . T\u00edpicamente se suele utilizar para incluir en el documento el texto de alg\u00fan programa. Al convertir a html, los p\u00e1rrafos preformateados ser\u00e1n delimitados con las etiquetas <pre> y <code> simult\u00e1neamente. La primera sirve para indicar que hay que respetar los saltos de l\u00ednea y espaciado, y la segunda, para establecer un tipo de letra especial. Estos p\u00e1rrafos se identifican sangr\u00e1ndolos con al menos cuatro espacios. Por ejemplo: Este es un p\u00e1rrafo normal: esto es un bloque de c\u00f3digo. Se convertir\u00e1 a: <p> Este es un p\u00e1rrafo normal: </p> <pre><code> esto es un bloque de c\u00f3digo. </code></pre> Se suprimir\u00e1 un nivel de sangrado (cuatro espacios) en el resultado final, y se mantendr\u00e1 el sangrado adicional. Eso nos permite incluir espacios a la izquierda como parte del texto fuente a representar. Un bloque de c\u00f3digo finaliza al encontrar una l\u00ednea sin sangrado. Dentro de un bloque de c\u00f3digo los ampersands ( & ) y s\u00edmbolos < > se convertir\u00e1n a entidades HTML, lo que facilita la escritura de texto. Por ejemplo: <div class= \"footer\" > &copy; 2004 Foo Corporation </div> se convertir\u00e1 en <pre><code> &lt; div class=\"footer\" &gt; &amp; copy; 2004 Foo Corporation &lt; /div &gt; </code></pre> La sintaxis markdown no tiene efecto dentro de un bloque de c\u00f3digo.","title":"Bloques de c\u00f3digo fuente"},{"location":"006Markdown.html#linea-horizontal","text":"Podemos insertar una l\u00ednea horizontal insertando una etiqueta <hr /> o bien si escribimos en una l\u00ednea aparte tres o m\u00e1s guiones, asteriscos o caracteres de subrayado. Podemos a\u00f1adir espacios entre estos s\u00edmbolos. Por ejemplo: * * * *** ***** - - - --------------------------","title":"L\u00ednea horizontal"},{"location":"006Markdown.html#enlaces","text":"Existen dos tipos de enlaces: inline y referencias . En ambos estilos, el texto a mostrar en el enlace se delimita [entre corchetes]. Para crear un enlace inline tenemos que escribir a continuaci\u00f3n la URL entre par\u00e9ntesis. Opcionalmente podemos a\u00f1adir un texto para el atributo \u201ctitle\u201d. Por ejemplo: Esto es [ un ejemplo ]( http : //ejemplo.com/ \"T\u00edtulo\") de enlace inline. [ este enlace ]( http : //ejemplo.net/) no tiene atributo de t\u00edtulo. Generar\u00e1: < p > Esto es < a href = \"http://ejemplo.com/\" title = \"Titulo\" > un ejemplo </ a > de enlace inline. </ p > < p >< a href = \"http://ejemplo.net/\" > Este enlace </ a > no tiene atributo de t\u00edtulo. </ p > Si queremos enlazar con un archivo en el mismo repositorio, podemos usar \u201cpaths relativos\u201d a la ubicaci\u00f3n del archivo actual: V\u00e9ase [ Acerca de ](. / acercade ) Si enlazamos a otra p\u00e1gina, podemos indicar el archivo markdown . Esto ser\u00e1 transformado en el correspondiente .html : V\u00e9ase [ Acerca de ](. / acercade . md ) N\u00f3tese que si clonamos un repositorio y llevamos los archivos a otra ubicaci\u00f3n, las direcciones relativas funcionar\u00e1n mejor que las absolutas. Los enlaces por referencia sustituyen la URL entre par\u00e9ntesis por una referencia entre corchetes: Este es [ un ejemplo ][ id ] de enlace por referencia . Opcionalmente podemos poner un espacio entre ambos elementos: Este es [ un ejemplo ] [ id ] de enlace por referencia . En alg\u00fan lugar del documento debemos definir la referencia. Se escribe en l\u00ednea aparte: [id]: http://ejemplo.com/ \"T\u00edtulo opcional\" El sangrado no puede superar los tres espacios. Entre el car\u00e1cter : y la URL debemos colocar al menos un espacio. El atributo title es opcional, y puede escribirse entre comillas, ap\u00f3strofos o par\u00e9ntesis: [id]: http://ejemplo.com/ \"T\u00edtulo opcional\" [id]: http://ejemplo.com/ 'T\u00edtulo opcional' [id]: http://ejemplo.com/ (T\u00edtulo opcional) La URL puede escribirse entre s\u00edmbolos < > [id]: <http://ejemplo.com/> \"T\u00edtulo opcional\" Podemos poner el t\u00edtulo en la siguiente l\u00ednea y sangrarlo con espaciado extra si lo deseamos: [id]: <http://ejemplo.com/> \"T\u00edtulo opcional\" N\u00f3tese que estas l\u00edneas con definiciones de enlaces no ser\u00e1n visibles en el resultado final. Las etiquetas usadas para definir enlaces son case-insensitive. Por ejemplo: [texto 1][a] [texto 2][A] se considera que la referencia es la misma. Es posible usar el texto del enlace como etiqueta, lo que se conoce como implicit link name . Por ejemplo: [Google][] O bien, sin la segunda pareja de corchetes: [Google] Y definimos el enlace como: [Google]: http://google.com/ Esto tambi\u00e9n funciona cuando el texto contiene espacios: Visite [ Daring Fireball ][] para m\u00e1s informaci\u00f3n . Y definimos el enlace como: [ Daring Fireball ] : http : //daringfireball.net/ Las definiciones se pueden colocar en cualquier lugar del documento. Hay quien prefiere ponerlas tras el p\u00e1rrafo en cuesti\u00f3n, y otros prefieren poner todas las definiciones agrupadas al final del documento.","title":"Enlaces"},{"location":"006Markdown.html#enlaces-automaticos","text":"Podemos escribir una URL en mitad del texto, que ser\u00e1 mostrada como enlace si la escribimos entre delimitadores < > . <http://ejemplo.com/> Lo que genera: < a href = \"http://ejemplo.com/\" > http://ejemplo.com/ </ a > Tambi\u00e9n podemos hacer esto con direcciones de correo: <direccion@ejemplo.com> Los conversores markdown suelen intentar \u201cocultar\u201d las direcciones para que sean dif\u00edciles de rastrear, sustituyendo cada car\u00e1cter por su correspondiente entidad HTML. Por ejemplo, lo anterior puede convertirse en algo as\u00ed como: < a href = \"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65; &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111; &#109;\" > &#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61; &#109;&#x70;&#x6C; e &#x2E;&#99;&#111;&#109; </ a > En todo caso, si queremos evitar el spam, se recomienda no incluir direcciones de correo en un documento.","title":"Enlaces autom\u00e1ticos"},{"location":"006Markdown.html#enlaces-a-secciones","text":"Podemos insertar un enlace a la l\u00ednea de cabecera de una secci\u00f3n, si escribimos entre corchetes su texto. Por ejemplo: ## Acerca de este documento ... texto regular Y en alg\u00fan otro lugar: V\u00e9ase [acerca-de-este-documento] Los conversores suelen generar un id para cada elemento <h1> \u2026 <h6> que consiste en el texto de la cabecera, en min\u00fasculas y suprimiendo los espacios en blanco. Es decir, la cabecera: ## Acerca de este documento se convertir\u00e1 en: < h2 id = \"acerca-de-este-documento\" > Acerca de este documento </ h2 > De todas formas, esto puede ser configurable, por lo que conviene mirar la documentaci\u00f3n del software conversor.","title":"Enlaces a secciones"},{"location":"006Markdown.html#texto-enfatizado","text":"Markdown considera los asteriscos ( * ) y caracteres de subrayado ( _ ) como indicadores de \u00e9nfasis. Todo texto entre asteriscos ser\u00e1 delimitado con etiquetas <em> en el resultado final, y si usamos doble asterisco o subrayado, con etiquetas <strong> . Lo siguiente *asterisco* _subrayado_ **doble asterisco** __doble subrayado__ generar\u00e1: < em > asterisco </ em > < em > subrayado </ em > < strong > doble asterisco </ strong > < strong > doble subrayado </ strong > Podemos poner \u00e9nfasis en mitad de una palabra: Don*super*incre\u00edble pero todo marcador rodeado de espacios ser\u00e1 tratado como texto regular. Si queremos forzar que se trate como tal, podemos \u201c escapar \u201d las marcas precedi\u00e9ndolas con una barra invertida: \\*texto que se mostrar\u00e1 entre asteriscos\\* Podemos combinar dos estilos diferentes de enfatizado: *Esto es __super__ importante* lo que muestra: Esto es super importante","title":"Texto enfatizado"},{"location":"006Markdown.html#codigo-fuente-inline","text":"Podemos indicar que un fragmento de texto se muestre de forma literal delimit\u00e1ndolo con acentos invertidos ( ` ). A diferencia de los bloques preformateados, un fragmento literal puede formar parte de un p\u00e1rrafo regular. Por ejemplo: Usar la funci\u00f3n `printf()` generar\u00e1: < p > Usar la funci\u00f3n < code > printf() </ code > </ p > Para incluir un acento invertido en el texto literal, usar como delimitadores dos acentos: ``Usar un car\u00e1cter (`) delimitador.`` Los delimitadores pueden escribirse con espacios, uno tras la apertura y otro antes del cierre, que ser\u00e1n eliminados del resultado final. Los caracteres & y < > se convertir\u00e1n en entidades HTML. Por ejemplo: No usar etiquetas `<div>`. Se convierte en < p > No usar etiquetas < code > &lt; div &gt; </ code > . </ p >","title":"C\u00f3digo fuente inline"},{"location":"006Markdown.html#imagenes","text":"La sintaxis para insertar im\u00e1genes es la misma que para los enlaces, a\u00f1adiendo un prefijo ! . El texto del enlace ser\u00e1 considerado como texto alternativo . Las im\u00e1genes Inline se escriben as\u00ed: ![texto](/carpeta/img.jpg) ![texto](/carpeta/img.jpg \"T\u00edtulo\") Y las im\u00e1genes por referencia: ![texto][id] la definici\u00f3n es id\u00e9ntica a la de los enlaces: [id]: carpeta/imagen \"T\u00edtulo\" Si queremos especificar las dimensiones, usar etiquetas <img> en lugar del formato markdown . < img src = \"imagen.jpg\" alt = \"texto alternativo\" height = \"42\" width = \"42\" >","title":"Im\u00e1genes"},{"location":"006Markdown.html#escapes","text":"Todo car\u00e1cter precedido por una barra invertida ser\u00e1 tratado como texto regular. Por ejemplo, \\*texto con asteriscos\\* Mostrar\u00e1 los asteriscos como parte del texto, sin que se consideren como delimitadores de letra enfatizada. Un car\u00e1cter \\ se considerar\u00e1 como texto regular siempre que no preceda a alguno de los siguientes: \\ barra invertida ` acento invertido * asterisco _ subrayado {} llaves [] corchetes () par\u00e9ntesis # hash + signo de suma - gui\u00f3n . punto ! exclamaci\u00f3n","title":"Escapes"},{"location":"007MkDocs.html","text":"Usando MkDocs para generar p\u00e1ginas web En este cap\u00edtulo veremos como utilizar MkDocs , un software alternativo a Jekyll que destaca por su orientaci\u00f3n a la creaci\u00f3n de manuales t\u00e9cnicos. Introducci\u00f3n a MkDocs Una vez instalado el editor de textos en nuestro equipo, y redactados los primeros documentos en formato markdown, el siguiente paso ser\u00eda subirlos a GitHub para que este genere el sitio web usando el conversor Jekyll . Tenemos otra opci\u00f3n. Para experimentar y hacer pruebas, quiz\u00e1s lo mejor sea instalar Jekyll en nuestro ordenador. Una vez que estemos a gusto con el resultado, tendremos dos opciones: subir los archivos markdown originales y repetir el proceso de conversi\u00f3n con la ayuda de Github , o bien subir directamente los ficheros html creados en nuestra m\u00e1quina con Jekyll . El uso de un software conversor en el entorno local proporciona otras ventajas. Podremos hacer todas las pruebas que queramos sin necesidad de estar conectados a la red ni depender de tiempos de respuesta. Adem\u00e1s, tendremos la libertad de cambiar de plataforma si alg\u00fan d\u00eda queremos migrar de GitHub a otro servicio. Bastar\u00e1 con mover los archivos html de un servidor a otro. Otra ventaja es que, aunque Jekyll es seguramente el generador m\u00e1s popular por su potencia y versatilidad, no debemos olvidar que no es el \u00fanico software existente para este prop\u00f3sito. V\u00e9ase una lista de alternativas en esta p\u00e1gina , y otra lista m\u00e1s completa aqu\u00ed . Para crear manuales t\u00e9cnicos prefiero utilizar MkDocs , que me gusta por su sencillez y por estar muy orientado a la creaci\u00f3n de documentaci\u00f3n. Jekyll solo lo estoy usando para crear la p\u00e1gina de portada. MkDocs es un proyecto de software libre cuyo repositorio en GitHub es este . Las instrucciones de uso est\u00e1n aqu\u00ed . Instalaci\u00f3n La instalaci\u00f3n de MkDocs en nuestro entorno local puede resultar un poco complicada para usuarios poco t\u00e9cnicos, as\u00ed que vayamos por partes. Tenemos que instalar en nuestro ordenador tres piezas de software: python pip mkdocs De todas formas, pip suele venir incluido de serie en las \u00faltimas versiones de python . Instalando Python MkDocs es un programa desarrollado en lenguaje de programaci\u00f3n Python . Este tipo de software solo se puede ejecutar en nuestro ordenador si tenemos instalada la plataforma Python , que suele venir incluida de serie en sistemas Mac y Linux, y se distribuye en dos versiones, Python 2 y Python 3. Cualquiera de las dos nos sirve. Podemos comprobar si tenemos Python en nuestro ordenador abriendo una ventana de terminal de comandos del sistema operativo y ejecutando lo siguiente: python --version Si obtenemos un mensaje de error, significa que hay que instalarlo. En caso contrario, hay que tener en cuenta que MkDocs requiere como m\u00ednimo la versi\u00f3n 2.7, por lo que si tenemos una anterior, habr\u00e1 que actualizarla. Para comprobar que tenemos la versi\u00f3n 3, hay que ejecutar el comando: python3 --version MkDocs requiere alguna versi\u00f3n a partir de la 3.4. Si no tenemos Python , o queremos actualizarnos a una versi\u00f3n m\u00e1s reciente, podemos descargarlo desde su p\u00e1gina web y ejecutar el programa instalador as\u00ed obtenido. Nota: En Windows, debemos asegurarnos de a\u00f1adir la carpeta de Python a la variable PATH del sistema. El proceso de instalaci\u00f3n suele incluir una opci\u00f3n que debemos marcar para hacer esto autom\u00e1ticamente. Instalar pip MkDocs se puede descargar e instalar desde el repositorio oficial de programas Python. En las versiones m\u00e1s recientes de Python, contamos con un programa especial llamado pip que sirve para automatizar la tarea de instalar software desde ese repositorio. Podemos comprobar si tenemos pip con el comando: pip --version Este software se utiliza para instalar programas Python con el comando: pip install nombre_de_programa Para actualizar pip a una versi\u00f3n m\u00e1s reciente se usa el comando: pip install \u2013-upgrade pip Nota El uso del comando pip requiere que nuestra cuenta de usuario tenga permisos para administrar el sistema. En sistemas Mac y Linux, debemos ejecutarlo como administrador: sudo pip install nombre_programa Una alternativa a esto consiste en ejecutar pip a\u00f1adiendo el argumento user , lo que hace que el software que estamos instalando solo funcione en nuestra cuenta de usuario: pip install --user nombre_programa Instalar MkDocs Una vez que tenemos python y el instalador de paquetes de software pip , para instalar MkDocs tenemos que ejecutamos el comando: pip install mkdocs Una vez hecho, comprobamos la versi\u00f3n instalada con el comando: mkdocs --version Nota: Tanto pip como MkDocs se instalan en la carpeta de m\u00f3dulos de Python. Si en el path de nuestro sistema no se incluye la forma de acceder a esa carpeta, otra forma de ejecutar cualquier m\u00f3dulo es invocando python pas\u00e1ndole como argumento el m\u00f3dulo a ejecutar: python -m mkdocs El par\u00e1metro -m indica que lo que viene a continuaci\u00f3n es un programa python ubicado en la carpeta de m\u00f3dulos. Por ejemplo, para preguntar por la versi\u00f3n de mkdocs , el comando ser\u00eda python -m mkdocs --version Y con Python 3 : python3 -m mkdocs --version Primer proyecto Una vez instalado MkDocs , podemos iniciar un proyecto desde el terminal de comandos del sistema operativo. Comenzamos por situarnos en la carpeta donde guardamos nuestros proyectos: cd documentos/proyectos Y ejecutamos el comando: mkdocs new nombre siendo \u201c nombre \u201d el que queremos dar al proyecto. Dentro de la carpeta actual se crear\u00e1 una subcarpeta con ese nombre para alojar los archivos. Esa carpeta no ha nacido vac\u00eda. Se ha a\u00f1adido de forma autom\u00e1tica: Un archivo de texto con la configuraci\u00f3n del proyecto. Se llama mkdocs.yml y consiste en una lista de variables de configuraci\u00f3n, cada una de ellas en formato par\u00e1metro:valor . Para empezar, solo tiene una l\u00ednea de texto con el t\u00edtulo del proyecto, que podemos adaptar a nuestro gusto: site_name : Mi nuevo proyecto Una subcarpeta docs destinada a ubicar los archivos markdown . Inicialmente hay un \u00fanico fichero llamado index.md que actuar\u00e1 como p\u00e1gina principal. Contiene el siguiente texto \u201cde pruebas\u201d: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs help` - Print this help message. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Nota: V\u00e9ase que tanto Jekyll como MkDocs utilizan un archivo en formato YML para recoger los par\u00e1metros del proceso de conversi\u00f3n. Jekyll usa el archivo _config.yml , y en MkDocs el nombre es mkdocs.yml . Los archivos YML son ficheros de texto para representar datos. Generar el sitio web Para generar las p\u00e1ginas web a partir de los documentos markdown , acudimos a la consola del sistema operativo, nos situamos en la misma carpeta que el archivo mkdocs.yml y ejecutamos el comando mkdocs build Esto crea una carpeta llamada site , cuyo contenido son las p\u00e1ginas de nuestro sitio web, y que subiremos al repositorio de GitHub . Cada vez que ejecutemos el comando mkdocs build estaremos reconstruyendo el contenido de esa carpeta site . A veces sucede que eliminamos archivos que en la versi\u00f3n HTML no se suprimen de forma autom\u00e1tica. Para hacer limpieza debemos ejecutar el comando build a\u00f1adiendo el par\u00e1metro --clean : mkdocs build --clean Visualizando el resultado durante la edici\u00f3n MkDocs es capaz de generar p\u00e1ginas html \u201cal vuelo\u201d sin llegar a crear la carpeta site , permiti\u00e9ndonos visualizarlas en nuestro navegador web para comprobar el aspecto final de lo que estamos escribiendo en el editor de texto. Para ello, en el terminal de comandos del sistema nos situamos en la misma carpeta que el archivo de configuraci\u00f3n mkdocs.yml , e introducimos el comando: mkdocs serve Se generar\u00e1 un sitio web temporal, y mkdocs quedar\u00e1 \u201ca la escucha\u201d. Cada vez que modifiquemos un archivo y lo guardemos, se refrescan los resultados. Esto se mantiene en funcionamiento hasta que pulsemos [Ctrl-C] sobre la consola: INFO - Building documentation... INFO - Cleaning site directory [ I 181010 16 :48:41 server:292 ] Serving on http://127.0.0.1:8000 [ I 181010 16 :48:41 handlers:59 ] Start watching changes [ I 181010 16 :48:41 handlers:61 ] Start detecting changes Para ver los resultados de esa compilaci\u00f3n al vuelo, tenemos que abrir el navegador web e introducir la URL http://127.0.0.1:8000 . Cada vez que se modifique cualquier archivo, se guarden los cambios, y MkDocs refresque los resultados, la ventana del navegador se actualizar\u00e1 autom\u00e1ticamente. Truco: Arrastrando esa URL a la carpeta del proyecto, tendremos un enlace permanente en el que podemos pulsar para previsualizar la p\u00e1gina de forma c\u00f3moda. Solo funciona mientras mkdocs serve se est\u00e1 ejecutando. Tambi\u00e9n podemos crear un script (en windows, un archivo batch) que contenga el comando mkdocs serve , y sobre el que podemos pulsar para que se ejecute sin necesidad de abrir manualmente una sesi\u00f3n de terminal: cd miproyecto mkdocs serve En Linux y Mac no olvidar proporcionar permisos de ejecuci\u00f3n a ese archivo. Por ejemplo, si se llama prueba , lo hacemos con el comando: chmod +x prueba A\u00f1adir m\u00e1s p\u00e1ginas Nuestro primer intento solo tiene una p\u00e1gina que el generador convertir\u00e1 en index.html . Para a\u00f1adir m\u00e1s p\u00e1ginas a nuestro sitio web, basta con crear nuevos archivos markdown en la carpeta docs . Los archivos markdown han de ser ficheros de texto con la extensi\u00f3n markdown , mdown , mkdn , mkd o md . MkDocs reconocer\u00e1 cualquiera de ellas. En principio, la estructura de carpetas podr\u00eda ser algo as\u00ed como: mkdocs.yml docs/index.md docs/capitulo1.md docs/capitulo2.md site/ todo ello ubicado en la carpeta principal del proyecto. Podemos crear m\u00e1s niveles de subcarpetas para organizar los documentos markdown : mkdocs.yml docs/index.md docs/capitulos/capitulo1.md docs/capitulos/capitulo2.md docs/anexos/anexo1.md site/ MkDocs convertir\u00e1 todos los archivos markdown que encuentre en la carpeta docs , pero para a\u00f1adirlos a la barra de navegaci\u00f3n de nuestra futura p\u00e1gina web, debemos crear una lista nav en el archivo de configuraci\u00f3n mkdocs.yml : site_name : Mi proyecto nav : - Inicio : index.md - Cap\u00edtulo 1 : capitulos/capitulo1.md - Cap\u00edtulo 2 : capitulos/capitulo2.md - Acerca de : acerca.md - Resumen de opciones : opc/opciones.md Nota: Cuando definimos par\u00e1metros en un archivo YML, cada uno ocupa una l\u00ednea de texto. El valor asignado a cada par\u00e1metro, tras los dos puntos, puede ser un texto, un n\u00famero, una fecha, o cualquier otro objeto. Si el valor es una lista, a la derecha de los dos puntos no se pone nada y los elementos de la lista se ponen a partir de la l\u00ednea siguiente, sangrados y precedidos cada uno de ellos por un gui\u00f3n. YML es un formato basado en el uso de sangrado para delimitar cada elemento. Dicho sangrado ha de ser el mismo para los elementos situados al mismo nivel. Se deben utilizar espacios en blanco, no permiti\u00e9ndose los tabuladores. La ubicaci\u00f3n y nombre de archivos se escribe con referencia a la carpeta docs . Por ejemplo, index.md se refiere a miproyecto/docs/index.md . El texto indicado a la izquierda de los dos puntos : se mostrar\u00e1 en la barra de navegaci\u00f3n. A la derecha de los dos puntos se indica el archivo a asociar a esa entrada. Podemos crear un segundo nivel desplegable de navegaci\u00f3n creando subsecciones en la lista nav : site_name : Mi proyecto nav : - Inicio : index.md - Cap\u00edtulos : - Cap\u00edtulo 1 : capitulos/capitulo1.md - Cap\u00edtulo 2 : capitulos/capitulo2.md - Acerca de : acerca.md - Resumen de opciones : opc/opciones.md N\u00f3tese que los nombre de subsecciones no deben llevar archivo alguno asociado tras los dos puntos : . Los archivos markdown no incluidos en la lista nav se convertir\u00e1n a HTML igualmente, pero no se mostrar\u00e1n en la barra de navegaci\u00f3n. La \u00fanica forma de visualizarlos es insertar un enlace en otro documento. La estructura y orden de los documentos en la barra de navegaci\u00f3n es independiente de la estructura de carpetas. Si no especificamos una opci\u00f3n nav en el archivo de configuraci\u00f3n, MkDocs incluir\u00e1 en la barra todos los archivos markdown encontrados, ordenados alfab\u00e9ticamente. P\u00e1gina principal En muchos sitios web es tradici\u00f3n que la p\u00e1gina principal se llame index.html . MkDocs buscar\u00e1 un archivo que se llame index.md , o en su defecto, readme.md , convirtiendo cualquiera de los dos en index.html . Si existieran ambos archivos markdown , se ignorar\u00e1 readme.md . Escogiendo un tema La disposici\u00f3n del contenido de la p\u00e1gina resultante, su aspecto final, tipo de letra, colores, etc, se corresponde con el \u201ctema\u201d seleccionado, que por defecto es \u201cmkdocs\u201d. Opcionalmente, podemos declararlo expl\u00edcitamente en el archivo de configuraci\u00f3n con el par\u00e1metro theme : site_name : Mi proyecto nav : - Inicio : index.md - Acerca de : acerca.md - Resumen de opciones : opciones.md theme : mkdocs Ya vimos en el caso de Jekyll que un tema es una colecci\u00f3n de plantillas y archivos. En el caso de MkDocs, podemos examinar la lista de ficheros que componen este tema acudiendo a su repositorio . Como sucede con Jekyll , MkDocs tomar\u00e1 estos archivos y los unir\u00e1 a nuestros documentos para generar las p\u00e1ginas web. MkDocs proporciona dos temas internos ( built-in ) y la posibilidad de utilizar los creados por otras personas. Todos ellos pueden ser copiados a nuestro proyecto y adaptados a nuestro gusto. Tambi\u00e9n podemos crear nuestro propio tema. El otro tema proporcionado por MkDocs est\u00e1 inspirado en el que se usa por defecto en Read the docs . Podemos utilizarlo escribiendo lo siguiente en el archivo de configuraci\u00f3n: theme : readthedocs Su aspecto es el siguiente: M\u00e1s adelante veremos como aplicar otros temas desarrollados por la comunidad. El Favicon Algunos navegadores muestran un peque\u00f1o icono para identificar la p\u00e1gina. Por ejemplo, en la pesta\u00f1a superior: Por defecto, MkDocs usa el icono Si queremos usar otro, crear una carpeta img junto a la de documentos, es decir, colgando de la carpeta principal del proyecto. Colocar all\u00ed un icono de nuestro gusto, y darle el nombre favicon.ico . MkDocs lo detectar\u00e1 autom\u00e1ticamente. La ayuda de MkDocs La gu\u00eda de usuario est\u00e1 aqu\u00ed . Para un resumen de opciones, ejecutar el comando: mkdocs --help Para una r\u00e1pida ayuda de un comando concreto, ejecutarlo a\u00f1adiendo --help : mkdocs build --help","title":"Primeros pasos con MkDocs"},{"location":"007MkDocs.html#usando-mkdocs-para-generar-paginas-web","text":"En este cap\u00edtulo veremos como utilizar MkDocs , un software alternativo a Jekyll que destaca por su orientaci\u00f3n a la creaci\u00f3n de manuales t\u00e9cnicos.","title":"Usando MkDocs para generar p\u00e1ginas web"},{"location":"007MkDocs.html#introduccion-a-mkdocs","text":"Una vez instalado el editor de textos en nuestro equipo, y redactados los primeros documentos en formato markdown, el siguiente paso ser\u00eda subirlos a GitHub para que este genere el sitio web usando el conversor Jekyll . Tenemos otra opci\u00f3n. Para experimentar y hacer pruebas, quiz\u00e1s lo mejor sea instalar Jekyll en nuestro ordenador. Una vez que estemos a gusto con el resultado, tendremos dos opciones: subir los archivos markdown originales y repetir el proceso de conversi\u00f3n con la ayuda de Github , o bien subir directamente los ficheros html creados en nuestra m\u00e1quina con Jekyll . El uso de un software conversor en el entorno local proporciona otras ventajas. Podremos hacer todas las pruebas que queramos sin necesidad de estar conectados a la red ni depender de tiempos de respuesta. Adem\u00e1s, tendremos la libertad de cambiar de plataforma si alg\u00fan d\u00eda queremos migrar de GitHub a otro servicio. Bastar\u00e1 con mover los archivos html de un servidor a otro. Otra ventaja es que, aunque Jekyll es seguramente el generador m\u00e1s popular por su potencia y versatilidad, no debemos olvidar que no es el \u00fanico software existente para este prop\u00f3sito. V\u00e9ase una lista de alternativas en esta p\u00e1gina , y otra lista m\u00e1s completa aqu\u00ed . Para crear manuales t\u00e9cnicos prefiero utilizar MkDocs , que me gusta por su sencillez y por estar muy orientado a la creaci\u00f3n de documentaci\u00f3n. Jekyll solo lo estoy usando para crear la p\u00e1gina de portada. MkDocs es un proyecto de software libre cuyo repositorio en GitHub es este . Las instrucciones de uso est\u00e1n aqu\u00ed .","title":"Introducci\u00f3n a MkDocs"},{"location":"007MkDocs.html#instalacion","text":"La instalaci\u00f3n de MkDocs en nuestro entorno local puede resultar un poco complicada para usuarios poco t\u00e9cnicos, as\u00ed que vayamos por partes. Tenemos que instalar en nuestro ordenador tres piezas de software: python pip mkdocs De todas formas, pip suele venir incluido de serie en las \u00faltimas versiones de python .","title":"Instalaci\u00f3n"},{"location":"007MkDocs.html#instalando-python","text":"MkDocs es un programa desarrollado en lenguaje de programaci\u00f3n Python . Este tipo de software solo se puede ejecutar en nuestro ordenador si tenemos instalada la plataforma Python , que suele venir incluida de serie en sistemas Mac y Linux, y se distribuye en dos versiones, Python 2 y Python 3. Cualquiera de las dos nos sirve. Podemos comprobar si tenemos Python en nuestro ordenador abriendo una ventana de terminal de comandos del sistema operativo y ejecutando lo siguiente: python --version Si obtenemos un mensaje de error, significa que hay que instalarlo. En caso contrario, hay que tener en cuenta que MkDocs requiere como m\u00ednimo la versi\u00f3n 2.7, por lo que si tenemos una anterior, habr\u00e1 que actualizarla. Para comprobar que tenemos la versi\u00f3n 3, hay que ejecutar el comando: python3 --version MkDocs requiere alguna versi\u00f3n a partir de la 3.4. Si no tenemos Python , o queremos actualizarnos a una versi\u00f3n m\u00e1s reciente, podemos descargarlo desde su p\u00e1gina web y ejecutar el programa instalador as\u00ed obtenido. Nota: En Windows, debemos asegurarnos de a\u00f1adir la carpeta de Python a la variable PATH del sistema. El proceso de instalaci\u00f3n suele incluir una opci\u00f3n que debemos marcar para hacer esto autom\u00e1ticamente.","title":"Instalando Python"},{"location":"007MkDocs.html#instalar-pip","text":"MkDocs se puede descargar e instalar desde el repositorio oficial de programas Python. En las versiones m\u00e1s recientes de Python, contamos con un programa especial llamado pip que sirve para automatizar la tarea de instalar software desde ese repositorio. Podemos comprobar si tenemos pip con el comando: pip --version Este software se utiliza para instalar programas Python con el comando: pip install nombre_de_programa Para actualizar pip a una versi\u00f3n m\u00e1s reciente se usa el comando: pip install \u2013-upgrade pip Nota El uso del comando pip requiere que nuestra cuenta de usuario tenga permisos para administrar el sistema. En sistemas Mac y Linux, debemos ejecutarlo como administrador: sudo pip install nombre_programa Una alternativa a esto consiste en ejecutar pip a\u00f1adiendo el argumento user , lo que hace que el software que estamos instalando solo funcione en nuestra cuenta de usuario: pip install --user nombre_programa","title":"Instalar pip"},{"location":"007MkDocs.html#instalar-mkdocs","text":"Una vez que tenemos python y el instalador de paquetes de software pip , para instalar MkDocs tenemos que ejecutamos el comando: pip install mkdocs Una vez hecho, comprobamos la versi\u00f3n instalada con el comando: mkdocs --version Nota: Tanto pip como MkDocs se instalan en la carpeta de m\u00f3dulos de Python. Si en el path de nuestro sistema no se incluye la forma de acceder a esa carpeta, otra forma de ejecutar cualquier m\u00f3dulo es invocando python pas\u00e1ndole como argumento el m\u00f3dulo a ejecutar: python -m mkdocs El par\u00e1metro -m indica que lo que viene a continuaci\u00f3n es un programa python ubicado en la carpeta de m\u00f3dulos. Por ejemplo, para preguntar por la versi\u00f3n de mkdocs , el comando ser\u00eda python -m mkdocs --version Y con Python 3 : python3 -m mkdocs --version","title":"Instalar MkDocs"},{"location":"007MkDocs.html#primer-proyecto","text":"Una vez instalado MkDocs , podemos iniciar un proyecto desde el terminal de comandos del sistema operativo. Comenzamos por situarnos en la carpeta donde guardamos nuestros proyectos: cd documentos/proyectos Y ejecutamos el comando: mkdocs new nombre siendo \u201c nombre \u201d el que queremos dar al proyecto. Dentro de la carpeta actual se crear\u00e1 una subcarpeta con ese nombre para alojar los archivos. Esa carpeta no ha nacido vac\u00eda. Se ha a\u00f1adido de forma autom\u00e1tica: Un archivo de texto con la configuraci\u00f3n del proyecto. Se llama mkdocs.yml y consiste en una lista de variables de configuraci\u00f3n, cada una de ellas en formato par\u00e1metro:valor . Para empezar, solo tiene una l\u00ednea de texto con el t\u00edtulo del proyecto, que podemos adaptar a nuestro gusto: site_name : Mi nuevo proyecto Una subcarpeta docs destinada a ubicar los archivos markdown . Inicialmente hay un \u00fanico fichero llamado index.md que actuar\u00e1 como p\u00e1gina principal. Contiene el siguiente texto \u201cde pruebas\u201d: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs help` - Print this help message. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Nota: V\u00e9ase que tanto Jekyll como MkDocs utilizan un archivo en formato YML para recoger los par\u00e1metros del proceso de conversi\u00f3n. Jekyll usa el archivo _config.yml , y en MkDocs el nombre es mkdocs.yml . Los archivos YML son ficheros de texto para representar datos.","title":"Primer proyecto"},{"location":"007MkDocs.html#generar-el-sitio-web","text":"Para generar las p\u00e1ginas web a partir de los documentos markdown , acudimos a la consola del sistema operativo, nos situamos en la misma carpeta que el archivo mkdocs.yml y ejecutamos el comando mkdocs build Esto crea una carpeta llamada site , cuyo contenido son las p\u00e1ginas de nuestro sitio web, y que subiremos al repositorio de GitHub . Cada vez que ejecutemos el comando mkdocs build estaremos reconstruyendo el contenido de esa carpeta site . A veces sucede que eliminamos archivos que en la versi\u00f3n HTML no se suprimen de forma autom\u00e1tica. Para hacer limpieza debemos ejecutar el comando build a\u00f1adiendo el par\u00e1metro --clean : mkdocs build --clean","title":"Generar el sitio web"},{"location":"007MkDocs.html#visualizando-el-resultado-durante-la-edicion","text":"MkDocs es capaz de generar p\u00e1ginas html \u201cal vuelo\u201d sin llegar a crear la carpeta site , permiti\u00e9ndonos visualizarlas en nuestro navegador web para comprobar el aspecto final de lo que estamos escribiendo en el editor de texto. Para ello, en el terminal de comandos del sistema nos situamos en la misma carpeta que el archivo de configuraci\u00f3n mkdocs.yml , e introducimos el comando: mkdocs serve Se generar\u00e1 un sitio web temporal, y mkdocs quedar\u00e1 \u201ca la escucha\u201d. Cada vez que modifiquemos un archivo y lo guardemos, se refrescan los resultados. Esto se mantiene en funcionamiento hasta que pulsemos [Ctrl-C] sobre la consola: INFO - Building documentation... INFO - Cleaning site directory [ I 181010 16 :48:41 server:292 ] Serving on http://127.0.0.1:8000 [ I 181010 16 :48:41 handlers:59 ] Start watching changes [ I 181010 16 :48:41 handlers:61 ] Start detecting changes Para ver los resultados de esa compilaci\u00f3n al vuelo, tenemos que abrir el navegador web e introducir la URL http://127.0.0.1:8000 . Cada vez que se modifique cualquier archivo, se guarden los cambios, y MkDocs refresque los resultados, la ventana del navegador se actualizar\u00e1 autom\u00e1ticamente. Truco: Arrastrando esa URL a la carpeta del proyecto, tendremos un enlace permanente en el que podemos pulsar para previsualizar la p\u00e1gina de forma c\u00f3moda. Solo funciona mientras mkdocs serve se est\u00e1 ejecutando. Tambi\u00e9n podemos crear un script (en windows, un archivo batch) que contenga el comando mkdocs serve , y sobre el que podemos pulsar para que se ejecute sin necesidad de abrir manualmente una sesi\u00f3n de terminal: cd miproyecto mkdocs serve En Linux y Mac no olvidar proporcionar permisos de ejecuci\u00f3n a ese archivo. Por ejemplo, si se llama prueba , lo hacemos con el comando: chmod +x prueba","title":"Visualizando el resultado durante la edici\u00f3n"},{"location":"007MkDocs.html#anadir-mas-paginas","text":"Nuestro primer intento solo tiene una p\u00e1gina que el generador convertir\u00e1 en index.html . Para a\u00f1adir m\u00e1s p\u00e1ginas a nuestro sitio web, basta con crear nuevos archivos markdown en la carpeta docs . Los archivos markdown han de ser ficheros de texto con la extensi\u00f3n markdown , mdown , mkdn , mkd o md . MkDocs reconocer\u00e1 cualquiera de ellas. En principio, la estructura de carpetas podr\u00eda ser algo as\u00ed como: mkdocs.yml docs/index.md docs/capitulo1.md docs/capitulo2.md site/ todo ello ubicado en la carpeta principal del proyecto. Podemos crear m\u00e1s niveles de subcarpetas para organizar los documentos markdown : mkdocs.yml docs/index.md docs/capitulos/capitulo1.md docs/capitulos/capitulo2.md docs/anexos/anexo1.md site/ MkDocs convertir\u00e1 todos los archivos markdown que encuentre en la carpeta docs , pero para a\u00f1adirlos a la barra de navegaci\u00f3n de nuestra futura p\u00e1gina web, debemos crear una lista nav en el archivo de configuraci\u00f3n mkdocs.yml : site_name : Mi proyecto nav : - Inicio : index.md - Cap\u00edtulo 1 : capitulos/capitulo1.md - Cap\u00edtulo 2 : capitulos/capitulo2.md - Acerca de : acerca.md - Resumen de opciones : opc/opciones.md Nota: Cuando definimos par\u00e1metros en un archivo YML, cada uno ocupa una l\u00ednea de texto. El valor asignado a cada par\u00e1metro, tras los dos puntos, puede ser un texto, un n\u00famero, una fecha, o cualquier otro objeto. Si el valor es una lista, a la derecha de los dos puntos no se pone nada y los elementos de la lista se ponen a partir de la l\u00ednea siguiente, sangrados y precedidos cada uno de ellos por un gui\u00f3n. YML es un formato basado en el uso de sangrado para delimitar cada elemento. Dicho sangrado ha de ser el mismo para los elementos situados al mismo nivel. Se deben utilizar espacios en blanco, no permiti\u00e9ndose los tabuladores. La ubicaci\u00f3n y nombre de archivos se escribe con referencia a la carpeta docs . Por ejemplo, index.md se refiere a miproyecto/docs/index.md . El texto indicado a la izquierda de los dos puntos : se mostrar\u00e1 en la barra de navegaci\u00f3n. A la derecha de los dos puntos se indica el archivo a asociar a esa entrada. Podemos crear un segundo nivel desplegable de navegaci\u00f3n creando subsecciones en la lista nav : site_name : Mi proyecto nav : - Inicio : index.md - Cap\u00edtulos : - Cap\u00edtulo 1 : capitulos/capitulo1.md - Cap\u00edtulo 2 : capitulos/capitulo2.md - Acerca de : acerca.md - Resumen de opciones : opc/opciones.md N\u00f3tese que los nombre de subsecciones no deben llevar archivo alguno asociado tras los dos puntos : . Los archivos markdown no incluidos en la lista nav se convertir\u00e1n a HTML igualmente, pero no se mostrar\u00e1n en la barra de navegaci\u00f3n. La \u00fanica forma de visualizarlos es insertar un enlace en otro documento. La estructura y orden de los documentos en la barra de navegaci\u00f3n es independiente de la estructura de carpetas. Si no especificamos una opci\u00f3n nav en el archivo de configuraci\u00f3n, MkDocs incluir\u00e1 en la barra todos los archivos markdown encontrados, ordenados alfab\u00e9ticamente.","title":"A\u00f1adir m\u00e1s p\u00e1ginas"},{"location":"007MkDocs.html#pagina-principal","text":"En muchos sitios web es tradici\u00f3n que la p\u00e1gina principal se llame index.html . MkDocs buscar\u00e1 un archivo que se llame index.md , o en su defecto, readme.md , convirtiendo cualquiera de los dos en index.html . Si existieran ambos archivos markdown , se ignorar\u00e1 readme.md .","title":"P\u00e1gina principal"},{"location":"007MkDocs.html#escogiendo-un-tema","text":"La disposici\u00f3n del contenido de la p\u00e1gina resultante, su aspecto final, tipo de letra, colores, etc, se corresponde con el \u201ctema\u201d seleccionado, que por defecto es \u201cmkdocs\u201d. Opcionalmente, podemos declararlo expl\u00edcitamente en el archivo de configuraci\u00f3n con el par\u00e1metro theme : site_name : Mi proyecto nav : - Inicio : index.md - Acerca de : acerca.md - Resumen de opciones : opciones.md theme : mkdocs Ya vimos en el caso de Jekyll que un tema es una colecci\u00f3n de plantillas y archivos. En el caso de MkDocs, podemos examinar la lista de ficheros que componen este tema acudiendo a su repositorio . Como sucede con Jekyll , MkDocs tomar\u00e1 estos archivos y los unir\u00e1 a nuestros documentos para generar las p\u00e1ginas web. MkDocs proporciona dos temas internos ( built-in ) y la posibilidad de utilizar los creados por otras personas. Todos ellos pueden ser copiados a nuestro proyecto y adaptados a nuestro gusto. Tambi\u00e9n podemos crear nuestro propio tema. El otro tema proporcionado por MkDocs est\u00e1 inspirado en el que se usa por defecto en Read the docs . Podemos utilizarlo escribiendo lo siguiente en el archivo de configuraci\u00f3n: theme : readthedocs Su aspecto es el siguiente: M\u00e1s adelante veremos como aplicar otros temas desarrollados por la comunidad.","title":"Escogiendo un tema"},{"location":"007MkDocs.html#el-favicon","text":"Algunos navegadores muestran un peque\u00f1o icono para identificar la p\u00e1gina. Por ejemplo, en la pesta\u00f1a superior: Por defecto, MkDocs usa el icono Si queremos usar otro, crear una carpeta img junto a la de documentos, es decir, colgando de la carpeta principal del proyecto. Colocar all\u00ed un icono de nuestro gusto, y darle el nombre favicon.ico . MkDocs lo detectar\u00e1 autom\u00e1ticamente.","title":"El Favicon"},{"location":"007MkDocs.html#la-ayuda-de-mkdocs","text":"La gu\u00eda de usuario est\u00e1 aqu\u00ed . Para un resumen de opciones, ejecutar el comando: mkdocs --help Para una r\u00e1pida ayuda de un comando concreto, ejecutarlo a\u00f1adiendo --help : mkdocs build --help","title":"La ayuda de MkDocs"},{"location":"008Distribuir.html","text":"Distribuyendo el sitio web Una vez finalizada la construcci\u00f3n del sitio web, vamos a publicarlo en GitHub . Podemos subir los documentos de tres formas: Entrando en GitHub , en el repositorio de destino, y pulsando en el bot\u00f3n [ Upload Files ] . Sustituyendo el comando mkdocs build por mkdocs gh-deploy , que genera y sube el sitio web en un solo paso. Hay que configurar las carpetas de nuestro proyecto con los archivos de control git . Usando Github Desktop para subir los archivos tras ejecutar mkdocs build . Esto permite automatizar la gesti\u00f3n de los archivos de control git . Nota: Git es el software utilizado para controlar los cambios y coordinar que los contenidos en nuestro entorno local y GitHub est\u00e9n en sinton\u00eda. Vamos a optar por la tercera de las soluciones mencionadas. Comenzaremos por borrar la carpeta site con los resultados de la \u00faltima compilaci\u00f3n del proyecto. Utilizaremos GitHub Desktop para crear una nueva carpeta para este prop\u00f3sito, que incluya dichos archivos de control. Iniciando Github Desktop Tras poner en marcha Github Desktop , pulsamos sobre el men\u00fa Preferences y seguidamente sobre el bot\u00f3n [ Sign in ] para conectarnos a nuestra cuenta de GitHub . Esta opci\u00f3n tambi\u00e9n nos sirve para desconectarnos pulsando en [ Sign out ] : La carpeta con el sitio web generado El primer paso ser\u00e1 crear una carpeta que sustituya a /site e incorpore los archivos de control git . La daremos el mismo nombre que el repositorio de destino en GitHub . Si el proyecto en nuestra m\u00e1quina local tambi\u00e9n se llama as\u00ed, entonces tendremos una carpeta dentro de otra con el mismo nombre: miProyecto/mkdocs.yml miProyecto/docs/index.md miProyecto/docs/capitulo1.md miProyecto/docs/capitulo2.md miProyecto/miProyecto/...archivos html a subir... Para crear la carpeta, pulsamos sobre el men\u00fa File > New Repository de Github Desktop . Introducimos el nombre del proyecto y la carpeta donde se ubicar\u00e1 el sitio web generado: Pulsamos en el bot\u00f3n [ Create repository ] . Se ha creado una nueva carpeta dentro de la del proyecto, con el mismo nombre que este. La vamos a utilizar en lugar de /site como destino de la compilaci\u00f3n del sitio web. Contiene varios archivos ocultos para controlar la sincronizaci\u00f3n con GitHub : .git , .gitignore , etc. Para designar a la nueva carpeta como destino de los resultados de la compilaci\u00f3n, debemos modificar el archivo de configuraci\u00f3n mkdocs.yml , a\u00f1adiendo una nueva l\u00ednea de texto: site_dir : miProyecto El par\u00e1metro site_dir permite establecer una carpeta destino para la generaci\u00f3n del sitio web. El valor por defecto es site . Volvemos a ejecutar la compilaci\u00f3n: mkdocs build Y en la carpeta destino, adem\u00e1s de los archivos .git , .gitignore , etc. que Github Desktop hab\u00eda creado, ahora tenemos index.html y todo lo dem\u00e1s. Subiendo los resultados Seguidamente volvemos a Desktop y pulsamos en el men\u00fa Repository > Settings . En el apartado Ignored files , introducimos la lista de archivos que no queremos subir, si hubiera alguno. Finalmente pulsamos en el bot\u00f3n [publish] . Nos aseguramos que en nuestra cuenta de GitHub no hay ya un repositorio con ese nombre. !!! Note: \u201cNota:\u201d Si obtenemos un mensaje: Cannot push these commits as they contain an email address marked as private on GitHub. ... debemos entrar en la configuraci\u00f3n de nuestro usuario *GitHub*, apartado *e-mail*, y desmarcar *Block command line pushes that expose my email* En el panel principal de GitHub Desktop aparece la lista de archivos a subir. En el recuadro \u201cSummary required\u201d introducimos una descripci\u00f3n corta de la operaci\u00f3n a realizar Y pulsamos en el bot\u00f3n Commit to master . En la barra superior pulsamos en el enlace Push origin , lo que ejecuta la transmisi\u00f3n. Activar Github Pages Desde el navegador web, entramos en nuestra cuenta de GitHub. V\u00e9ase que se ha creado un nuevo proyecto: Pulsamos en el bot\u00f3n settings y, en el apartado GitHub Pages , seleccionamos la rama master . Al pulsar en el bot\u00f3n [Save] se activar\u00e1 el servicio. Visualizamos las p\u00e1ginas web que hemos subido mediante nombreusuario.giuthub.io/nombreProyecto . Actualizando el sitio web Cada vez que introduzcamos cambios en los documentos, volvemos a ejecutar el comando: mkdocs build --clean lo que regenera la carpeta con los resultados. Seguidamente reiniciamos GitHub Desktop , donde veremos una lista de los archivos que han sufrido cambios. Pulsamos en [ Fetch Origin ] , introducimos un comentario corto y pulsamos en el bot\u00f3n [Commit to master] . Finalmente pulsamos en [ Push origin ] . Nombres de dominio GitHub Pages permite nombres de dominio a la medida para nuestro sitio, si tenemos uno en propiedad. Tenemos que a\u00f1adir un archivo CNAME en la carpeta principal del proyecto. El archivo debe contener una \u00fanica l\u00ednea de texto con el nombre del dominio. V\u00e9ase el propio archivo CNAME de la documentaci\u00f3n de mkDocs. Si esto no funciona, v\u00e9ase troubleshooting custom domains .","title":"Publicando las p\u00e1ginas"},{"location":"008Distribuir.html#distribuyendo-el-sitio-web","text":"Una vez finalizada la construcci\u00f3n del sitio web, vamos a publicarlo en GitHub . Podemos subir los documentos de tres formas: Entrando en GitHub , en el repositorio de destino, y pulsando en el bot\u00f3n [ Upload Files ] . Sustituyendo el comando mkdocs build por mkdocs gh-deploy , que genera y sube el sitio web en un solo paso. Hay que configurar las carpetas de nuestro proyecto con los archivos de control git . Usando Github Desktop para subir los archivos tras ejecutar mkdocs build . Esto permite automatizar la gesti\u00f3n de los archivos de control git . Nota: Git es el software utilizado para controlar los cambios y coordinar que los contenidos en nuestro entorno local y GitHub est\u00e9n en sinton\u00eda. Vamos a optar por la tercera de las soluciones mencionadas. Comenzaremos por borrar la carpeta site con los resultados de la \u00faltima compilaci\u00f3n del proyecto. Utilizaremos GitHub Desktop para crear una nueva carpeta para este prop\u00f3sito, que incluya dichos archivos de control.","title":"Distribuyendo el sitio web"},{"location":"008Distribuir.html#iniciando-github-desktop","text":"Tras poner en marcha Github Desktop , pulsamos sobre el men\u00fa Preferences y seguidamente sobre el bot\u00f3n [ Sign in ] para conectarnos a nuestra cuenta de GitHub . Esta opci\u00f3n tambi\u00e9n nos sirve para desconectarnos pulsando en [ Sign out ] :","title":"Iniciando Github Desktop"},{"location":"008Distribuir.html#la-carpeta-con-el-sitio-web-generado","text":"El primer paso ser\u00e1 crear una carpeta que sustituya a /site e incorpore los archivos de control git . La daremos el mismo nombre que el repositorio de destino en GitHub . Si el proyecto en nuestra m\u00e1quina local tambi\u00e9n se llama as\u00ed, entonces tendremos una carpeta dentro de otra con el mismo nombre: miProyecto/mkdocs.yml miProyecto/docs/index.md miProyecto/docs/capitulo1.md miProyecto/docs/capitulo2.md miProyecto/miProyecto/...archivos html a subir... Para crear la carpeta, pulsamos sobre el men\u00fa File > New Repository de Github Desktop . Introducimos el nombre del proyecto y la carpeta donde se ubicar\u00e1 el sitio web generado: Pulsamos en el bot\u00f3n [ Create repository ] . Se ha creado una nueva carpeta dentro de la del proyecto, con el mismo nombre que este. La vamos a utilizar en lugar de /site como destino de la compilaci\u00f3n del sitio web. Contiene varios archivos ocultos para controlar la sincronizaci\u00f3n con GitHub : .git , .gitignore , etc. Para designar a la nueva carpeta como destino de los resultados de la compilaci\u00f3n, debemos modificar el archivo de configuraci\u00f3n mkdocs.yml , a\u00f1adiendo una nueva l\u00ednea de texto: site_dir : miProyecto El par\u00e1metro site_dir permite establecer una carpeta destino para la generaci\u00f3n del sitio web. El valor por defecto es site . Volvemos a ejecutar la compilaci\u00f3n: mkdocs build Y en la carpeta destino, adem\u00e1s de los archivos .git , .gitignore , etc. que Github Desktop hab\u00eda creado, ahora tenemos index.html y todo lo dem\u00e1s.","title":"La carpeta con el sitio web generado"},{"location":"008Distribuir.html#subiendo-los-resultados","text":"Seguidamente volvemos a Desktop y pulsamos en el men\u00fa Repository > Settings . En el apartado Ignored files , introducimos la lista de archivos que no queremos subir, si hubiera alguno. Finalmente pulsamos en el bot\u00f3n [publish] . Nos aseguramos que en nuestra cuenta de GitHub no hay ya un repositorio con ese nombre. !!! Note: \u201cNota:\u201d Si obtenemos un mensaje: Cannot push these commits as they contain an email address marked as private on GitHub. ... debemos entrar en la configuraci\u00f3n de nuestro usuario *GitHub*, apartado *e-mail*, y desmarcar *Block command line pushes that expose my email* En el panel principal de GitHub Desktop aparece la lista de archivos a subir. En el recuadro \u201cSummary required\u201d introducimos una descripci\u00f3n corta de la operaci\u00f3n a realizar Y pulsamos en el bot\u00f3n Commit to master . En la barra superior pulsamos en el enlace Push origin , lo que ejecuta la transmisi\u00f3n.","title":"Subiendo los resultados"},{"location":"008Distribuir.html#activar-github-pages","text":"Desde el navegador web, entramos en nuestra cuenta de GitHub. V\u00e9ase que se ha creado un nuevo proyecto: Pulsamos en el bot\u00f3n settings y, en el apartado GitHub Pages , seleccionamos la rama master . Al pulsar en el bot\u00f3n [Save] se activar\u00e1 el servicio. Visualizamos las p\u00e1ginas web que hemos subido mediante nombreusuario.giuthub.io/nombreProyecto .","title":"Activar Github Pages"},{"location":"008Distribuir.html#actualizando-el-sitio-web","text":"Cada vez que introduzcamos cambios en los documentos, volvemos a ejecutar el comando: mkdocs build --clean lo que regenera la carpeta con los resultados. Seguidamente reiniciamos GitHub Desktop , donde veremos una lista de los archivos que han sufrido cambios. Pulsamos en [ Fetch Origin ] , introducimos un comentario corto y pulsamos en el bot\u00f3n [Commit to master] . Finalmente pulsamos en [ Push origin ] .","title":"Actualizando el sitio web"},{"location":"008Distribuir.html#nombres-de-dominio","text":"GitHub Pages permite nombres de dominio a la medida para nuestro sitio, si tenemos uno en propiedad. Tenemos que a\u00f1adir un archivo CNAME en la carpeta principal del proyecto. El archivo debe contener una \u00fanica l\u00ednea de texto con el nombre del dominio. V\u00e9ase el propio archivo CNAME de la documentaci\u00f3n de mkDocs. Si esto no funciona, v\u00e9ase troubleshooting custom domains .","title":"Nombres de dominio"},{"location":"009Extensiones.html","text":"Extensiones Ahora que ya dominamos la creaci\u00f3n de un sitio web, vamos a profundizar en las caracter\u00edsticas que MkDocs a\u00f1ade a la sintaxis est\u00e1ndar markdown . Ya hemos visto que existen diferentes versiones de Markdown . La usada por MkDocs es Python-Markdown , una biblioteca disponible para escribir programas en lenguaje Python. Python-Markdown se ajusta bastante bien a la versi\u00f3n original , aunque hay algunas diferencias de menor importancia. En este cap\u00edtulo echaremos un vistazo a las extensiones incorporadas por MkDocs , as\u00ed como alguna m\u00e1s de bibliotecas de terceros. Enlaces internos La sintaxis est\u00e1ndar de enlaces es la siguiente: [texto](URL) MkDocs permite utilizar nombres de documentos markdown como URLs. Al hacer la conversi\u00f3n, sustituir\u00e1 esa referencia por la p\u00e1gina definitiva. Por este motivo debemos utilizar paths relativos: V\u00e9ase [ licencia ]( licencia.md ) del proyecto para m\u00e1s detalles. En este caso se asume que el documento enlazado est\u00e1 en la misma carpeta que el documento actual. Si el archivo destino est\u00e1 en otro directorio, asegurarnos de incluirlo en el path relativo: V\u00e9ase [ licencia ]( ../acercade/licencia.md ) del proyecto para m\u00e1s detalles. Pero hay una situaci\u00f3n en la que esto no funciona. Markdown permite incluir texto HTML \u201cen bruto\u201d en nuestros documentos. Esto implica que los enlaces escritos en ese formato deben incluir una URL en formato html. No es posible usar referencias a ficheros con extensi\u00f3n .md y pretender que las convierta al fichero final .html : < a href = \"otroDocumento.html\" > texto </ a > Para incluir im\u00e1genes, utilizar la sintaxis markdown habitual: ![imagen](img/pantalla.png) Si activamos en el archivo de configuraci\u00f3n la extensi\u00f3n \u201ctoc\u201d, que se utiliza para crear \u201ctablas de contenido\u201d, podemos beneficiarnos de los IDs generados para cada l\u00ednea de cabecera en el documento. A\u00f1adiendo un car\u00e1cter # entre el nombre del documento y el de la secci\u00f3n podemos enlazar a secciones concretas: V\u00e9ase [ licencia ]( acercade.md#licencia ) del proyecto para m\u00e1s detalles. Los IDs se crean deduci\u00e9ndolos del texto de la cabecera, convirti\u00e9ndolo a min\u00fasculas y sustituyendo caracteres no permitidos (incluyendo espacios) por guiones. Varios guiones consecutivos se eliminar\u00e1n para dejar uno solo. Tabla de contenidos MkDocs es capaz de insertar en la p\u00e1gina una tabla de contenidos que construye a partir de las l\u00edneas de cabecera. Para ello, debemos activar en el archivo de configuraci\u00f3n la extensi\u00f3n toc : markdown_extensions: - toc Y en nuestro documento, all\u00ed donde queramos la tabla de contenido, escribiremos: Tabla de contenido: [TOC] Texto del documento. V\u00e9ase referencia en esta p\u00e1gina . Algunas opciones configurables en mkdocs.yml : permalink: genera un enlace al final de cada l\u00ednea cabecera ( permanent link ) que se muestra como un car\u00e1cter especial al pasar el rat\u00f3n por esa zona. Por defecto el valor es permalink : False . Al pulsar sobre ese enlace obtendremos la URL de la l\u00ednea de cabecera. Si configuramos permalink : True , al pasar el rat\u00f3n se mostrar\u00e1 un car\u00e1cter \u00b6 como s\u00edmbolo sobre el que pulsar. Podemos poner cualquier otra cosa. Por ejemplo: markdown_extensions: - toc: permalink: \"#\" baselevel: Por defecto, el nivel superior de las cabeceras es 1, pero podemos establecer otro: markdown_extensions: - toc: baselevel: 2 En este caso, si escribimos # T\u00edtulo , se convertir\u00e1 en ( <h2> T\u00edtulo </h2> ). separator: Establece el car\u00e1cter a utilizar como separador de palabras en IDs generados autom\u00e1ticamente. Por defecto, separator:\"-\" . Si por ejemplo preferimos caracteres de subrayado: markdown_extensions: - toc: separator: \"_\" toc_depth: Establece el n\u00famero de niveles, de 1 a 6, a incluir en la tabla. Por defecto es 6: markdown_extensions: - toc: toc_depth: 2 N\u00f3tese que podemos definir varios par\u00e1metros a la vez, pero siempre bajo una \u00fanica entrada toc : markdown_extensions: - toc: permalink: \"#\" baselevel: 2 separator: \"_\" Tablas Una tabla se crea utilizando caracteres | (pipe) para separar las celda. Se usan guiones para separar las cabeceras del cuerpo de la tabla. Por ejemplo: | cabecera 1 | cabecera 2 | | ------------- | ------------- | | texto celda | texto celda | | texto celda | texto celda | Las tablas deben ir precedidas por una l\u00ednea en blanco y otra tras la tabla, para separarlas del resto del documento. Los caracteres | se usan para separar celdas. Son opcionales en los extremos izquierdo y derecho de la tabla. No es necesario alinear verticalmente los caracteers | . El ancho de las columnas viene determinado por el contenido, no por el que nosotros le demos. Si queremos usar cabeceras, debe haber al menos tres guiones en cada columna. El contenido de las celdas puede formatearse: negrita, cursiva, etc. Podemos insertar enlaces, im\u00e1genes u otros elementos markdown. Podemos alinear el contenido de una columna indic\u00e1ndolo con un car\u00e1cter : en la separaci\u00f3n de las cabeceras: | a la izda . | centrada | a la dcha . | |:- ---------- |:- -------: | -----------: | | texto | texto | texto | Para usar un car\u00e1cter | como texto regular de una celda, escaparlo precedido de una barra invertida. Bloques de c\u00f3digo delimitados En el est\u00e1ndar markdown , un bloque sangrado con cuatro espacios ser\u00e1 considerado como c\u00f3digo fuente, mostrado con un tipo de letra especial, y respetados los saltos de l\u00ednea y espaciado extra. En la l\u00ednea de otras versiones markdown , MkDocs incluye la extensi\u00f3n fenced code blocks , que es una alternativa a los bloques de c\u00f3digo sangrados. Se usa la sintaxis PHP Markdown Extra . Un bloque de c\u00f3digo comienza por una l\u00ednea formada por tres o m\u00e1s caracteres ~ o bien acentos invertidos `. Por ejemplo: ~~~~~~~~~~~~~~~~~~~~~ texto ~~~~~~~~~~~~~~~~~~~~~ o bien `````````````````` texto `````````````````` Estas l\u00edneas delimitadoras no se mostrar\u00e1n en el resultado final. A diferencia de los p\u00e1rrafos regulares, se respetar\u00e1n las l\u00edneas en blanco que forman parte del bloque: ~~~ L\u00ednea en blanco precedente L\u00ednea en blanco siguiente ~~~ Podemos especificar el lenguaje de resaltado: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .html <p> paragraph <b> emphasis </b> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ El punto es opcional. Podemos usar llaves y a\u00f1adir un ID ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.html #ejemplo-1} <p> paragraph <b> emphasis </b> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ N\u00f3tese que los bloques delimitados no pueden sangrarse, por lo que no pueden colocarse dentro de otros elementos: listas, citas, etc Resaltado Para que el resaltado de c\u00f3digo funcione, necesitamos activar la extensi\u00f3n CodeHilite en el archivo de configuraci\u00f3n: markdown_extensions: - CodeHilite Para que esta extensi\u00f3n funcione, tenemos que tener instalada la biblioteca pygments de python. Se instala con el comando: pip install Pygments Comprobamos que est\u00e1 instalada con: pip list V\u00e9ase la lista de lenguajes contemplados en esta p\u00e1gina . Si la primera l\u00ednea del bloque de c\u00f3digo es una shebang , el lenguaje se deducir\u00e1 autom\u00e1ticamente. Esto funciona para los bloques sangrados, no para los delimitados: #!/usr/bin/python import tensorflow as tf Nota: Las l\u00edneas shebang son aquellas que comienzan con la pareja de caracteres #! y se utilizan en los programas para identificar el lenguaje utilizado y el compilador a usar. Otra forma de identificar el lenguaje en el caso de bloques sangrados es: ::: python import misModulos as modulos La primera l\u00ednea ser\u00e1 eliminada del resultado final. Podemos a\u00f1adir n\u00fameros de l\u00ednea configur\u00e1ndolo en mkdocs.yml : markdown_extensions: - codehilite: linenums: true Podemos resaltar determinadas l\u00edneas a\u00f1adiendo el argumento hl_lines tras el nombre del lenguaje. Las l\u00edneas se cuentan a partir de 1: ``` python hl_lines=\"3 5\" \"\"\" Algoritmo bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Muestra lo siguiente: \"\"\" Algoritmo bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Notas La extensi\u00f3n Admonition permite insertar p\u00e1rrafos resaltados con notas. Para hacer uso de ello, en el archivo mkdocs.yml escribimos: markdown_extensions : - admonition Todo bloque de notas ha de empezar con tres caracteres !!! , seguido de una palabra que indica el tipo de nota, y opcionalmente un t\u00edtulo entre comillas. El texto del bloque se coloca en las l\u00edneas a continuaci\u00f3n, con un sangrado de cuatro espacios: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Mostrar\u00e1 lo siguiente: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Por defecto, la l\u00ednea de t\u00edtulo es el tipo de nota, salvo que especifiquemos un texto entre comillas: !!! note \"A tener en cuenta:\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. lo que muestra: A tener en cuenta: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Podemos suprimir la cabecera (incluido el icono) si escribimos: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Un bloque de notas puede contener todo tipo de elementos: cabeceras, listas, etc, excepto bloques de c\u00f3digo. Si necesit\u00e1ramos incluir un bloque dentro de otro, podr\u00edamos hacer uso de la extensi\u00f3n SuperFences , disponible en GitHub como parte del paquete PyMdown Extensions . La extensi\u00f3n Admonition contempla varios tipos de notas. El tipo por defecto es note : Note El tipo note puede indicarse tambi\u00e9n como: !!! seealso Otros tipos: Abstract El tipo abstract puede indicarse tambi\u00e9n como: !!! summary !!! tldr Info El tipo info tambi\u00e9n puede indicarse como: !!! todo Tip El tipo tip tambi\u00e9n puede indicarse como: !!! hint !!! important Success El tipo success tambi\u00e9n puede indicarse como: !!! check !!! done Question El tipo question tambi\u00e9n puede indicarse como: !!! help !!! faq Warning El tipo warning tambi\u00e9n puede indicarse como: !!! caution !!! attention Failure El tipo failure tambi\u00e9n puede indicarse como: !!! fail !!! missing Danger El tipo danger tambi\u00e9n puede indicarse como: !!! error Bug El tipo bug no tiene otras opciones Example El tipo example tambi\u00e9n puede indicarse como: !!! snippet Quote El tipo quote tambi\u00e9n puede indicarse como: !!! cite Pie de p\u00e1gina Podemos especificar notas a pie de p\u00e1gina mediante la extensi\u00f3n footnotes , que debemos activar en el archivo mkdocs.yml : markdown_extensions: - footnotes El siguiente paso es insertar referencias en el documento: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Las referencias consisten en etiquetas [^n], donde n puede ser un n\u00famero consecutivo o un texto cualquiera. El texto de las notas se escribe en cualquier lugar del documento de la siguiente forma: [^1]: texto de la nota O bien, en el caso de textos multil\u00ednea, en las siguientes l\u00edneas con un sangrado de cuatro espacios: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Abreviaturas Podemos crear definiciones de abreviaturas. Por ejemplo: *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Y si en cualquier lugar del documento escribimos: Las especificaciones HTML las mantiene el consorcio W3C. las abreviaturas se mostrar\u00e1n resaltadas, y al pasar el rat\u00f3n por encima, se mostrar\u00e1 un recuadro con la definici\u00f3n. Para que esto funcione, hay que activar la extensi\u00f3n en el archivo mdocs.yml markdown_extensions: - abbreviations Las definiciones pueden hacerse en cualquier lugar del documento. Listas de definiciones Son listas de t\u00e9rminos acompa\u00f1ados de una definici\u00f3n, algo as\u00ed como un diccionario. Por ejemplo Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. Mostrar\u00e1 lo siguiente: Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus. Entre dos t\u00e9rminos con sus definiciones debe haber al menos una l\u00ednea en blanco separadora. Los dos puntos pueden sangrarse un m\u00e1ximo de tres espacios. Deben ir seguidos de un espacio como m\u00ednimo. Puede haber m\u00e1s de una definici\u00f3n asociada a un t\u00e9rmino: Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae . : An American computer company . Orange : The fruit of an evergreen tree of the genus Citrus . O bien asociar la misma definici\u00f3n a m\u00e1s de un t\u00e9rmino: T\u00e9rmino 1 T\u00e9rmino 2 : Definici\u00e9n a T\u00e9rmino 3 : Definici\u00e9n b Como sucede con cualquier lista, una definici\u00f3n puede estar formada por varios p\u00e1rrafos: T\u00e9rmino 1 : Definici\u00f3n con dos p\u00e1rrafos. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. : Segunda definici\u00f3n para el t\u00e9rmino 1. T\u00e9rmino 2 : Esta definici\u00f3n tiene un bloque de c\u00f3digo, una cita y una lista. bloque de c\u00f3digo. > cita > de dos l\u00edneas. 1. elemento primero 2. elemento segundo Para que todo esto funcione, hay que activar la extensi\u00f3n def_list en el archivo mdocs.yml markdown_extensions: - def_list Atributos Podemos definir atributos de un bloque si los a\u00f1adimos como \u00faltima l\u00ednea del mismo: Este es un p\u00e1rrafo en color rojo . { : style=\" color : red ; \" } Lo que se traduce en: < p style = \"color:red;\" > Este es un p\u00e1rrafo en color rojo. </ p > La lista de atributos se delimita entre {: y } . Los atributos se separan con un espacio en blanco, y pueden ser: un ID en formato #nombre un nombre de clase en formato .nombre cualquier otro atributo en formato clave=\"valor\" Por ejemplo: Texto del p\u00e1rrafo {: #id1 .clase1 } Excepcionalmente, la lista de atributos de una cabecera se coloca al final de la l\u00ednea: Cabecera estilo setext {: atributos } ================================== ### Cabecera estilo atx ### {: atributos } Si queremos definir atributos css para un elemento inline (los integrados dentro del texto de un p\u00e1rrafo), debemos colocar la lista inmediatamente a continuaci\u00f3n del elemento, sin dejar espacios en blanco: [enlace](http://ejemplo.com){: class=\"enlace\" title=\"T\u00edtulo del enlace\" } Para que todo esto funcione, hay que activar la extensi\u00f3n en el archivo mdocs.yml markdown_extensions: - attr_list Saltos de l\u00ednea La extensi\u00f3n nl2br har\u00e1 que los saltos de l\u00ednea de un documento markdown sean respetados, insertando etiquetas <br/> en el texto html generado. Se activa con: markdown_extensions: - nl2br SmartyPants La extensi\u00f3n smarty convierte las comillas, ap\u00f3strofos y otros caracteres en sus equivalentes tipogr\u00e1ficos. S\u00edmbolo Reemplazado por ' \u2018 \u2019 \" \u201c \u201d << >> \u00ab \u00bb ... \u2026 -- \u2013 --- \u2014 Se activa con: markdown_extensions: - smarty Se puede configurar. Los valores por defecto son: - smarty: smart_dashes: True smart_quotes: True smart_angled_quotes: False smart_ellipses: True Meta-Datos MkDocs incluye soporte para generar meta-datos en la cabecera del archivo HTML resultante. Estos metadatos se especifican al inicio de cada documento, en el front-matter. Consisten en una serie de parejas clave:valor. El front-matter ser\u00e1 eliminado del documento antes de su conversi\u00f3n y utilizados por la plantilla utilizada. V\u00e9ase en este sentido la documentaci\u00f3n de cada tema. MkDocs tiene algunas palabras clave predeterminadas: template: Cada documento es un texto que se inserta en un archivo de plantilla HTML. Esta variable determina el nombre de la plantilla utilizada en la p\u00e1gina actual. Por defecto se usa main.html . title: Es el t\u00edtulo del documento. MkDocs intentar\u00e1 determinar el t\u00edtulo a partir de los siguientes elementos (en orden): El t\u00edtulo definido en el apartado nav del archivo de configuraci\u00f3n. El t\u00edtulo definido en el front-matter del documento con el par\u00e1metro title . El p\u00e1rrafo de cabecera de nivel 1 en la primera l\u00ednea del cuerpo del documento. El nombre del fichero. Cuando encuentra un t\u00edtulo, se descarta el resto de los pasos. Los metadatos se pueden escribir en dos formatos alternativos: estilo YAML y estilo Markdown. Los metadatos al estilo YAML consisten en parejas clave : valor . La primera l\u00ednea del documento debe consistir en tres guiones --- y el bloque de meta-datos debe finalizar con otra l\u00ednea --- o ... . El contenido entre ambos delimitadores es analizado con las mismas reglas que se aplican al formato YAML : --- title: Mi Documento summary: Una breve descripci\u00f3n de todo esto. authors: - Juan P\u00e9rez - Pepe Ruiz date: 2018-09-12 some_url: https://ejemplo.com --- Primer p\u00e1rrafo del documento. YAML es capaz de detectar tipos de datos. Recu\u00e9rdese que MkDocs es un programa escrito en Python, por lo que aqu\u00ed hacemos referencia a los tipos contemplados por ese lenguaje de programaci\u00f3n. En el ejemplo, los valores de title , summary y some_url son cadenas de texto, el valor de authors es una lista de cadenas, y el valor de date es un objeto datetime.date . N\u00f3tese que los nombres de par\u00e1metros YAML son case-sensitive . MkDocs espera que las palabras se escriban en min\u00fascula. El nivel superior de YAML debe ser una colecci\u00f3n de parejas clave:valor, que se convertir\u00e1 en un diccionario Python. Si el analizador YAML encuentra un error, MkDocs no reconocer\u00e1 la secci\u00f3n como meta-datos, el atributo meta de la p\u00e1gina estar\u00e1 vac\u00edo, y la secci\u00f3n se eliminar\u00e1 del documento. La otra opci\u00f3n de contemplada por MkDocs son los meta-datos estilo MultiMarkdown . Este es un estilo introducido por el proyecto MultiMarkdown , y los meta-datos consisten en una serie de palabras clave y valor definidos al comienzo del documento. Por ejemplo: title : Mi Documento summary : Una breve descripci\u00f3n de todo esto . Authors : Juan P\u00e9rez Pepe Ruiz Date : January 12 , 2017 blank - value : some_url : https :// ejemplo . com Primer p\u00e1rrafo del documento . Las palabras clave son case-insensitive y pueden consistir en letras, n\u00fameros, caracteres de subrayado y guiones, y deben terminar con dos puntos. El valor consiste en todo lo que sigue a los dos puntos. Puede estar vac\u00edo. Si una l\u00ednea est\u00e1 sangrada cuatro o m\u00e1s espacios, se asume que es una l\u00ednea adicional perteneciente al valor de la anterior. Los valores pueden ser multil\u00ednea, y todas las l\u00edneas se unir\u00e1n para formar una cadena. La primera l\u00ednea en blanco da por finalizados los meta-datos y da comienzo al contenido del documento. La primera l\u00ednea del archivo no puede estar en blanco. MkDocs no contempla los delimitadores yaml ( --- o ... ) para los meta-datos estilo MultiMarkdown. De hecho, MkDocs los utiliza para determinar si los metadatos son estilo YAML o MultiMarkdown. Si detecta el uso de delimitadores, pero el contenido no es YAML v\u00e1lido,MkDocs no intentar\u00e1 analizar el contenido como MultiMarkdown. La biblioteca PyMdown PyMdown Extensions es una interesante colecci\u00f3n de extensiones que a\u00f1ade nuevas posibilidades a la sintaxis original de Markdown , adem\u00e1s de las proporcionadas por MkDocs . Este paquete se instala con el comando: pip install pymdown-extensions y para hacer uso de alguna extensi\u00f3n, en el archivo de configuraci\u00f3n escribimos, por ejemplo: markdown_extensions : - pymdownx.superfences - pymdownx.details En este caso estar\u00edamos activando las extensiones superfences y details . Veamos algunas de esas extensiones: Details permite insertar notas donde solo se muestre la cabecera, y pulsando en ella, se muestre el resto de la nota. En lugar de los caracteres !!! usaremos ??? . Podemos utilizar como tipo de nota details y summary , adem\u00e1s de los habituales note , question , warning etc.: \u00bfpuede ver esta nota correctamente? Si. Superfences permite anidar los bloques resaltados de c\u00f3digo como parte de otros elementos de bloque, citas, listas, etc. De esta forma podemos superar la limitaci\u00f3n que ten\u00edamos con los bloques de c\u00f3digo delimitados, ya que deben ir alineados al margen izquierdo, sin sangr\u00eda alguna. Emoji permite a\u00f1adir emojis. V\u00e9ase una lista de los disponibles en EmojiOne . Nota publicada por el tema Material en su p\u00e1gina: EmojiOne se distribuye bajo licencia CC BY 4.0 . V\u00e9ase licencia para asegurarse del correcto uso. InlineHilite permite resaltar c\u00f3digo fuente que forma parte de un p\u00e1rrafo. Estos peque\u00f1os fragmentos de c\u00f3digo se delimitan entre ap\u00f3strofos. Tras el primer ap\u00f3strofo tenemos que escribir el lenguaje, precedido por tres s\u00edmbolos ::: . Usar las etiquetas `:::html <p> ... <p>` para delimitar p\u00e1rrafos. Mostrar\u00eda: Usar las etiquetas < p > ... < p > para delimitar p\u00e1rrafos. Otra posibilidad es utilizar una sintaxis tipo shebang : Usar las etiquetas `#!html <p> ... <p>` para delimitar p\u00e1rrafos. Mark permite marcar fragmentos de texto . Deben delimitarse entre dos signos = y otros dos de cierre, en formato ==...== . SmartSymbols convierte determinadas secuencias de texto en caracteres especiales. Por ejemplo: Markdown Resultado (tm) \u2122 (c) \u00a9 (r) \u00ae +/- \u00b1 \u2013> \u2192 <\u2013 \u2190 <\u2013> \u2194 =/= \u2260 1/4 \u00bc Tilde proporciona la posibilidad de mostrar texto tachado . Debemos delimitarlo con dos s\u00edmbolos ~ a cada lado, en formato ~~...~~ .","title":"Extensiones markdown"},{"location":"009Extensiones.html#extensiones","text":"Ahora que ya dominamos la creaci\u00f3n de un sitio web, vamos a profundizar en las caracter\u00edsticas que MkDocs a\u00f1ade a la sintaxis est\u00e1ndar markdown . Ya hemos visto que existen diferentes versiones de Markdown . La usada por MkDocs es Python-Markdown , una biblioteca disponible para escribir programas en lenguaje Python. Python-Markdown se ajusta bastante bien a la versi\u00f3n original , aunque hay algunas diferencias de menor importancia. En este cap\u00edtulo echaremos un vistazo a las extensiones incorporadas por MkDocs , as\u00ed como alguna m\u00e1s de bibliotecas de terceros.","title":"Extensiones"},{"location":"009Extensiones.html#enlaces-internos","text":"La sintaxis est\u00e1ndar de enlaces es la siguiente: [texto](URL) MkDocs permite utilizar nombres de documentos markdown como URLs. Al hacer la conversi\u00f3n, sustituir\u00e1 esa referencia por la p\u00e1gina definitiva. Por este motivo debemos utilizar paths relativos: V\u00e9ase [ licencia ]( licencia.md ) del proyecto para m\u00e1s detalles. En este caso se asume que el documento enlazado est\u00e1 en la misma carpeta que el documento actual. Si el archivo destino est\u00e1 en otro directorio, asegurarnos de incluirlo en el path relativo: V\u00e9ase [ licencia ]( ../acercade/licencia.md ) del proyecto para m\u00e1s detalles. Pero hay una situaci\u00f3n en la que esto no funciona. Markdown permite incluir texto HTML \u201cen bruto\u201d en nuestros documentos. Esto implica que los enlaces escritos en ese formato deben incluir una URL en formato html. No es posible usar referencias a ficheros con extensi\u00f3n .md y pretender que las convierta al fichero final .html : < a href = \"otroDocumento.html\" > texto </ a > Para incluir im\u00e1genes, utilizar la sintaxis markdown habitual: ![imagen](img/pantalla.png) Si activamos en el archivo de configuraci\u00f3n la extensi\u00f3n \u201ctoc\u201d, que se utiliza para crear \u201ctablas de contenido\u201d, podemos beneficiarnos de los IDs generados para cada l\u00ednea de cabecera en el documento. A\u00f1adiendo un car\u00e1cter # entre el nombre del documento y el de la secci\u00f3n podemos enlazar a secciones concretas: V\u00e9ase [ licencia ]( acercade.md#licencia ) del proyecto para m\u00e1s detalles. Los IDs se crean deduci\u00e9ndolos del texto de la cabecera, convirti\u00e9ndolo a min\u00fasculas y sustituyendo caracteres no permitidos (incluyendo espacios) por guiones. Varios guiones consecutivos se eliminar\u00e1n para dejar uno solo.","title":"Enlaces internos"},{"location":"009Extensiones.html#tabla-de-contenidos","text":"MkDocs es capaz de insertar en la p\u00e1gina una tabla de contenidos que construye a partir de las l\u00edneas de cabecera. Para ello, debemos activar en el archivo de configuraci\u00f3n la extensi\u00f3n toc : markdown_extensions: - toc Y en nuestro documento, all\u00ed donde queramos la tabla de contenido, escribiremos: Tabla de contenido: [TOC] Texto del documento. V\u00e9ase referencia en esta p\u00e1gina . Algunas opciones configurables en mkdocs.yml : permalink: genera un enlace al final de cada l\u00ednea cabecera ( permanent link ) que se muestra como un car\u00e1cter especial al pasar el rat\u00f3n por esa zona. Por defecto el valor es permalink : False . Al pulsar sobre ese enlace obtendremos la URL de la l\u00ednea de cabecera. Si configuramos permalink : True , al pasar el rat\u00f3n se mostrar\u00e1 un car\u00e1cter \u00b6 como s\u00edmbolo sobre el que pulsar. Podemos poner cualquier otra cosa. Por ejemplo: markdown_extensions: - toc: permalink: \"#\" baselevel: Por defecto, el nivel superior de las cabeceras es 1, pero podemos establecer otro: markdown_extensions: - toc: baselevel: 2 En este caso, si escribimos # T\u00edtulo , se convertir\u00e1 en ( <h2> T\u00edtulo </h2> ). separator: Establece el car\u00e1cter a utilizar como separador de palabras en IDs generados autom\u00e1ticamente. Por defecto, separator:\"-\" . Si por ejemplo preferimos caracteres de subrayado: markdown_extensions: - toc: separator: \"_\" toc_depth: Establece el n\u00famero de niveles, de 1 a 6, a incluir en la tabla. Por defecto es 6: markdown_extensions: - toc: toc_depth: 2 N\u00f3tese que podemos definir varios par\u00e1metros a la vez, pero siempre bajo una \u00fanica entrada toc : markdown_extensions: - toc: permalink: \"#\" baselevel: 2 separator: \"_\"","title":"Tabla de contenidos"},{"location":"009Extensiones.html#tablas","text":"Una tabla se crea utilizando caracteres | (pipe) para separar las celda. Se usan guiones para separar las cabeceras del cuerpo de la tabla. Por ejemplo: | cabecera 1 | cabecera 2 | | ------------- | ------------- | | texto celda | texto celda | | texto celda | texto celda | Las tablas deben ir precedidas por una l\u00ednea en blanco y otra tras la tabla, para separarlas del resto del documento. Los caracteres | se usan para separar celdas. Son opcionales en los extremos izquierdo y derecho de la tabla. No es necesario alinear verticalmente los caracteers | . El ancho de las columnas viene determinado por el contenido, no por el que nosotros le demos. Si queremos usar cabeceras, debe haber al menos tres guiones en cada columna. El contenido de las celdas puede formatearse: negrita, cursiva, etc. Podemos insertar enlaces, im\u00e1genes u otros elementos markdown. Podemos alinear el contenido de una columna indic\u00e1ndolo con un car\u00e1cter : en la separaci\u00f3n de las cabeceras: | a la izda . | centrada | a la dcha . | |:- ---------- |:- -------: | -----------: | | texto | texto | texto | Para usar un car\u00e1cter | como texto regular de una celda, escaparlo precedido de una barra invertida.","title":"Tablas"},{"location":"009Extensiones.html#bloques-de-codigo-delimitados","text":"En el est\u00e1ndar markdown , un bloque sangrado con cuatro espacios ser\u00e1 considerado como c\u00f3digo fuente, mostrado con un tipo de letra especial, y respetados los saltos de l\u00ednea y espaciado extra. En la l\u00ednea de otras versiones markdown , MkDocs incluye la extensi\u00f3n fenced code blocks , que es una alternativa a los bloques de c\u00f3digo sangrados. Se usa la sintaxis PHP Markdown Extra . Un bloque de c\u00f3digo comienza por una l\u00ednea formada por tres o m\u00e1s caracteres ~ o bien acentos invertidos `. Por ejemplo: ~~~~~~~~~~~~~~~~~~~~~ texto ~~~~~~~~~~~~~~~~~~~~~ o bien `````````````````` texto `````````````````` Estas l\u00edneas delimitadoras no se mostrar\u00e1n en el resultado final. A diferencia de los p\u00e1rrafos regulares, se respetar\u00e1n las l\u00edneas en blanco que forman parte del bloque: ~~~ L\u00ednea en blanco precedente L\u00ednea en blanco siguiente ~~~ Podemos especificar el lenguaje de resaltado: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .html <p> paragraph <b> emphasis </b> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ El punto es opcional. Podemos usar llaves y a\u00f1adir un ID ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.html #ejemplo-1} <p> paragraph <b> emphasis </b> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ N\u00f3tese que los bloques delimitados no pueden sangrarse, por lo que no pueden colocarse dentro de otros elementos: listas, citas, etc","title":"Bloques de c\u00f3digo delimitados"},{"location":"009Extensiones.html#resaltado","text":"Para que el resaltado de c\u00f3digo funcione, necesitamos activar la extensi\u00f3n CodeHilite en el archivo de configuraci\u00f3n: markdown_extensions: - CodeHilite Para que esta extensi\u00f3n funcione, tenemos que tener instalada la biblioteca pygments de python. Se instala con el comando: pip install Pygments Comprobamos que est\u00e1 instalada con: pip list V\u00e9ase la lista de lenguajes contemplados en esta p\u00e1gina . Si la primera l\u00ednea del bloque de c\u00f3digo es una shebang , el lenguaje se deducir\u00e1 autom\u00e1ticamente. Esto funciona para los bloques sangrados, no para los delimitados: #!/usr/bin/python import tensorflow as tf Nota: Las l\u00edneas shebang son aquellas que comienzan con la pareja de caracteres #! y se utilizan en los programas para identificar el lenguaje utilizado y el compilador a usar. Otra forma de identificar el lenguaje en el caso de bloques sangrados es: ::: python import misModulos as modulos La primera l\u00ednea ser\u00e1 eliminada del resultado final. Podemos a\u00f1adir n\u00fameros de l\u00ednea configur\u00e1ndolo en mkdocs.yml : markdown_extensions: - codehilite: linenums: true Podemos resaltar determinadas l\u00edneas a\u00f1adiendo el argumento hl_lines tras el nombre del lenguaje. Las l\u00edneas se cuentan a partir de 1: ``` python hl_lines=\"3 5\" \"\"\" Algoritmo bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Muestra lo siguiente: \"\"\" Algoritmo bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Resaltado"},{"location":"009Extensiones.html#notas","text":"La extensi\u00f3n Admonition permite insertar p\u00e1rrafos resaltados con notas. Para hacer uso de ello, en el archivo mkdocs.yml escribimos: markdown_extensions : - admonition Todo bloque de notas ha de empezar con tres caracteres !!! , seguido de una palabra que indica el tipo de nota, y opcionalmente un t\u00edtulo entre comillas. El texto del bloque se coloca en las l\u00edneas a continuaci\u00f3n, con un sangrado de cuatro espacios: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Mostrar\u00e1 lo siguiente: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Por defecto, la l\u00ednea de t\u00edtulo es el tipo de nota, salvo que especifiquemos un texto entre comillas: !!! note \"A tener en cuenta:\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. lo que muestra: A tener en cuenta: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Podemos suprimir la cabecera (incluido el icono) si escribimos: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Un bloque de notas puede contener todo tipo de elementos: cabeceras, listas, etc, excepto bloques de c\u00f3digo. Si necesit\u00e1ramos incluir un bloque dentro de otro, podr\u00edamos hacer uso de la extensi\u00f3n SuperFences , disponible en GitHub como parte del paquete PyMdown Extensions . La extensi\u00f3n Admonition contempla varios tipos de notas. El tipo por defecto es note : Note El tipo note puede indicarse tambi\u00e9n como: !!! seealso Otros tipos: Abstract El tipo abstract puede indicarse tambi\u00e9n como: !!! summary !!! tldr Info El tipo info tambi\u00e9n puede indicarse como: !!! todo Tip El tipo tip tambi\u00e9n puede indicarse como: !!! hint !!! important Success El tipo success tambi\u00e9n puede indicarse como: !!! check !!! done Question El tipo question tambi\u00e9n puede indicarse como: !!! help !!! faq Warning El tipo warning tambi\u00e9n puede indicarse como: !!! caution !!! attention Failure El tipo failure tambi\u00e9n puede indicarse como: !!! fail !!! missing Danger El tipo danger tambi\u00e9n puede indicarse como: !!! error Bug El tipo bug no tiene otras opciones Example El tipo example tambi\u00e9n puede indicarse como: !!! snippet Quote El tipo quote tambi\u00e9n puede indicarse como: !!! cite","title":"Notas"},{"location":"009Extensiones.html#pie-de-pagina","text":"Podemos especificar notas a pie de p\u00e1gina mediante la extensi\u00f3n footnotes , que debemos activar en el archivo mkdocs.yml : markdown_extensions: - footnotes El siguiente paso es insertar referencias en el documento: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Las referencias consisten en etiquetas [^n], donde n puede ser un n\u00famero consecutivo o un texto cualquiera. El texto de las notas se escribe en cualquier lugar del documento de la siguiente forma: [^1]: texto de la nota O bien, en el caso de textos multil\u00ednea, en las siguientes l\u00edneas con un sangrado de cuatro espacios: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Pie de p\u00e1gina"},{"location":"009Extensiones.html#abreviaturas","text":"Podemos crear definiciones de abreviaturas. Por ejemplo: *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Y si en cualquier lugar del documento escribimos: Las especificaciones HTML las mantiene el consorcio W3C. las abreviaturas se mostrar\u00e1n resaltadas, y al pasar el rat\u00f3n por encima, se mostrar\u00e1 un recuadro con la definici\u00f3n. Para que esto funcione, hay que activar la extensi\u00f3n en el archivo mdocs.yml markdown_extensions: - abbreviations Las definiciones pueden hacerse en cualquier lugar del documento.","title":"Abreviaturas"},{"location":"009Extensiones.html#listas-de-definiciones","text":"Son listas de t\u00e9rminos acompa\u00f1ados de una definici\u00f3n, algo as\u00ed como un diccionario. Por ejemplo Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. Mostrar\u00e1 lo siguiente: Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus. Entre dos t\u00e9rminos con sus definiciones debe haber al menos una l\u00ednea en blanco separadora. Los dos puntos pueden sangrarse un m\u00e1ximo de tres espacios. Deben ir seguidos de un espacio como m\u00ednimo. Puede haber m\u00e1s de una definici\u00f3n asociada a un t\u00e9rmino: Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae . : An American computer company . Orange : The fruit of an evergreen tree of the genus Citrus . O bien asociar la misma definici\u00f3n a m\u00e1s de un t\u00e9rmino: T\u00e9rmino 1 T\u00e9rmino 2 : Definici\u00e9n a T\u00e9rmino 3 : Definici\u00e9n b Como sucede con cualquier lista, una definici\u00f3n puede estar formada por varios p\u00e1rrafos: T\u00e9rmino 1 : Definici\u00f3n con dos p\u00e1rrafos. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. : Segunda definici\u00f3n para el t\u00e9rmino 1. T\u00e9rmino 2 : Esta definici\u00f3n tiene un bloque de c\u00f3digo, una cita y una lista. bloque de c\u00f3digo. > cita > de dos l\u00edneas. 1. elemento primero 2. elemento segundo Para que todo esto funcione, hay que activar la extensi\u00f3n def_list en el archivo mdocs.yml markdown_extensions: - def_list","title":"Listas de definiciones"},{"location":"009Extensiones.html#atributos","text":"Podemos definir atributos de un bloque si los a\u00f1adimos como \u00faltima l\u00ednea del mismo: Este es un p\u00e1rrafo en color rojo . { : style=\" color : red ; \" } Lo que se traduce en: < p style = \"color:red;\" > Este es un p\u00e1rrafo en color rojo. </ p > La lista de atributos se delimita entre {: y } . Los atributos se separan con un espacio en blanco, y pueden ser: un ID en formato #nombre un nombre de clase en formato .nombre cualquier otro atributo en formato clave=\"valor\" Por ejemplo: Texto del p\u00e1rrafo {: #id1 .clase1 } Excepcionalmente, la lista de atributos de una cabecera se coloca al final de la l\u00ednea: Cabecera estilo setext {: atributos } ================================== ### Cabecera estilo atx ### {: atributos } Si queremos definir atributos css para un elemento inline (los integrados dentro del texto de un p\u00e1rrafo), debemos colocar la lista inmediatamente a continuaci\u00f3n del elemento, sin dejar espacios en blanco: [enlace](http://ejemplo.com){: class=\"enlace\" title=\"T\u00edtulo del enlace\" } Para que todo esto funcione, hay que activar la extensi\u00f3n en el archivo mdocs.yml markdown_extensions: - attr_list","title":"Atributos"},{"location":"009Extensiones.html#saltos-de-linea","text":"La extensi\u00f3n nl2br har\u00e1 que los saltos de l\u00ednea de un documento markdown sean respetados, insertando etiquetas <br/> en el texto html generado. Se activa con: markdown_extensions: - nl2br","title":"Saltos de l\u00ednea"},{"location":"009Extensiones.html#smartypants","text":"La extensi\u00f3n smarty convierte las comillas, ap\u00f3strofos y otros caracteres en sus equivalentes tipogr\u00e1ficos. S\u00edmbolo Reemplazado por ' \u2018 \u2019 \" \u201c \u201d << >> \u00ab \u00bb ... \u2026 -- \u2013 --- \u2014 Se activa con: markdown_extensions: - smarty Se puede configurar. Los valores por defecto son: - smarty: smart_dashes: True smart_quotes: True smart_angled_quotes: False smart_ellipses: True","title":"SmartyPants"},{"location":"009Extensiones.html#meta-datos","text":"MkDocs incluye soporte para generar meta-datos en la cabecera del archivo HTML resultante. Estos metadatos se especifican al inicio de cada documento, en el front-matter. Consisten en una serie de parejas clave:valor. El front-matter ser\u00e1 eliminado del documento antes de su conversi\u00f3n y utilizados por la plantilla utilizada. V\u00e9ase en este sentido la documentaci\u00f3n de cada tema. MkDocs tiene algunas palabras clave predeterminadas: template: Cada documento es un texto que se inserta en un archivo de plantilla HTML. Esta variable determina el nombre de la plantilla utilizada en la p\u00e1gina actual. Por defecto se usa main.html . title: Es el t\u00edtulo del documento. MkDocs intentar\u00e1 determinar el t\u00edtulo a partir de los siguientes elementos (en orden): El t\u00edtulo definido en el apartado nav del archivo de configuraci\u00f3n. El t\u00edtulo definido en el front-matter del documento con el par\u00e1metro title . El p\u00e1rrafo de cabecera de nivel 1 en la primera l\u00ednea del cuerpo del documento. El nombre del fichero. Cuando encuentra un t\u00edtulo, se descarta el resto de los pasos. Los metadatos se pueden escribir en dos formatos alternativos: estilo YAML y estilo Markdown. Los metadatos al estilo YAML consisten en parejas clave : valor . La primera l\u00ednea del documento debe consistir en tres guiones --- y el bloque de meta-datos debe finalizar con otra l\u00ednea --- o ... . El contenido entre ambos delimitadores es analizado con las mismas reglas que se aplican al formato YAML : --- title: Mi Documento summary: Una breve descripci\u00f3n de todo esto. authors: - Juan P\u00e9rez - Pepe Ruiz date: 2018-09-12 some_url: https://ejemplo.com --- Primer p\u00e1rrafo del documento. YAML es capaz de detectar tipos de datos. Recu\u00e9rdese que MkDocs es un programa escrito en Python, por lo que aqu\u00ed hacemos referencia a los tipos contemplados por ese lenguaje de programaci\u00f3n. En el ejemplo, los valores de title , summary y some_url son cadenas de texto, el valor de authors es una lista de cadenas, y el valor de date es un objeto datetime.date . N\u00f3tese que los nombres de par\u00e1metros YAML son case-sensitive . MkDocs espera que las palabras se escriban en min\u00fascula. El nivel superior de YAML debe ser una colecci\u00f3n de parejas clave:valor, que se convertir\u00e1 en un diccionario Python. Si el analizador YAML encuentra un error, MkDocs no reconocer\u00e1 la secci\u00f3n como meta-datos, el atributo meta de la p\u00e1gina estar\u00e1 vac\u00edo, y la secci\u00f3n se eliminar\u00e1 del documento. La otra opci\u00f3n de contemplada por MkDocs son los meta-datos estilo MultiMarkdown . Este es un estilo introducido por el proyecto MultiMarkdown , y los meta-datos consisten en una serie de palabras clave y valor definidos al comienzo del documento. Por ejemplo: title : Mi Documento summary : Una breve descripci\u00f3n de todo esto . Authors : Juan P\u00e9rez Pepe Ruiz Date : January 12 , 2017 blank - value : some_url : https :// ejemplo . com Primer p\u00e1rrafo del documento . Las palabras clave son case-insensitive y pueden consistir en letras, n\u00fameros, caracteres de subrayado y guiones, y deben terminar con dos puntos. El valor consiste en todo lo que sigue a los dos puntos. Puede estar vac\u00edo. Si una l\u00ednea est\u00e1 sangrada cuatro o m\u00e1s espacios, se asume que es una l\u00ednea adicional perteneciente al valor de la anterior. Los valores pueden ser multil\u00ednea, y todas las l\u00edneas se unir\u00e1n para formar una cadena. La primera l\u00ednea en blanco da por finalizados los meta-datos y da comienzo al contenido del documento. La primera l\u00ednea del archivo no puede estar en blanco. MkDocs no contempla los delimitadores yaml ( --- o ... ) para los meta-datos estilo MultiMarkdown. De hecho, MkDocs los utiliza para determinar si los metadatos son estilo YAML o MultiMarkdown. Si detecta el uso de delimitadores, pero el contenido no es YAML v\u00e1lido,MkDocs no intentar\u00e1 analizar el contenido como MultiMarkdown.","title":"Meta-Datos"},{"location":"009Extensiones.html#la-biblioteca-pymdown","text":"PyMdown Extensions es una interesante colecci\u00f3n de extensiones que a\u00f1ade nuevas posibilidades a la sintaxis original de Markdown , adem\u00e1s de las proporcionadas por MkDocs . Este paquete se instala con el comando: pip install pymdown-extensions y para hacer uso de alguna extensi\u00f3n, en el archivo de configuraci\u00f3n escribimos, por ejemplo: markdown_extensions : - pymdownx.superfences - pymdownx.details En este caso estar\u00edamos activando las extensiones superfences y details . Veamos algunas de esas extensiones: Details permite insertar notas donde solo se muestre la cabecera, y pulsando en ella, se muestre el resto de la nota. En lugar de los caracteres !!! usaremos ??? . Podemos utilizar como tipo de nota details y summary , adem\u00e1s de los habituales note , question , warning etc.: \u00bfpuede ver esta nota correctamente? Si. Superfences permite anidar los bloques resaltados de c\u00f3digo como parte de otros elementos de bloque, citas, listas, etc. De esta forma podemos superar la limitaci\u00f3n que ten\u00edamos con los bloques de c\u00f3digo delimitados, ya que deben ir alineados al margen izquierdo, sin sangr\u00eda alguna. Emoji permite a\u00f1adir emojis. V\u00e9ase una lista de los disponibles en EmojiOne . Nota publicada por el tema Material en su p\u00e1gina: EmojiOne se distribuye bajo licencia CC BY 4.0 . V\u00e9ase licencia para asegurarse del correcto uso. InlineHilite permite resaltar c\u00f3digo fuente que forma parte de un p\u00e1rrafo. Estos peque\u00f1os fragmentos de c\u00f3digo se delimitan entre ap\u00f3strofos. Tras el primer ap\u00f3strofo tenemos que escribir el lenguaje, precedido por tres s\u00edmbolos ::: . Usar las etiquetas `:::html <p> ... <p>` para delimitar p\u00e1rrafos. Mostrar\u00eda: Usar las etiquetas < p > ... < p > para delimitar p\u00e1rrafos. Otra posibilidad es utilizar una sintaxis tipo shebang : Usar las etiquetas `#!html <p> ... <p>` para delimitar p\u00e1rrafos. Mark permite marcar fragmentos de texto . Deben delimitarse entre dos signos = y otros dos de cierre, en formato ==...== . SmartSymbols convierte determinadas secuencias de texto en caracteres especiales. Por ejemplo: Markdown Resultado (tm) \u2122 (c) \u00a9 (r) \u00ae +/- \u00b1 \u2013> \u2192 <\u2013 \u2190 <\u2013> \u2194 =/= \u2260 1/4 \u00bc Tilde proporciona la posibilidad de mostrar texto tachado . Debemos delimitarlo con dos s\u00edmbolos ~ a cada lado, en formato ~~...~~ .","title":"La biblioteca PyMdown"},{"location":"010Configuracion.html","text":"Configurando el proyecto En este cap\u00edtulo daremos un repaso al archivo de configuraci\u00f3n y sus opciones. El archivo de configuraci\u00f3n El proceso de conversi\u00f3n y generaci\u00f3n del sitio web se configura en buena parte adaptando las definiciones de par\u00e1metros en el archivo mkdocs.yml , que es un fichero de texto en formato YAML ubicado en la carpeta principal. Todos los par\u00e1metros son opcionales, excepto site_name , que representa el t\u00edtulo del proyecto. Por lo tanto, un archivo mkdocs.yml en su expresi\u00f3n m\u00ednima puede ser: site_name : Mi proyecto Formato YAML Los archivos YAML son ficheros de texto que se utilizan para almacenar datos. MkDocs y Jekyll lo utilizan para crear archivos de configuraci\u00f3n con los par\u00e1metros del proceso de conversi\u00f3n. La sintaxis es sencilla y fue dise\u00f1ada buscando que fuera muy legible. Se utiliza una sintaxis basada en el sangrado, que debe ser consistente y basado en espacios en blanco, no admiti\u00e9ndose caracteres de tabulaci\u00f3n. En principio, un archivo YAML contiene una colecci\u00f3n de parejas clave:valor , cada una de ellas en l\u00ednea aparte. Se admiten l\u00edneas en blanco. Cada variable puede ser de diferente tipo, que ser\u00e1 deducido autom\u00e1ticamente: un texto. Las comillas son opcionales, y pueden usarse ap\u00f3strofos en su lugar: nombre: \"Luis Gutierrez\" un n\u00famero: edad : 58 un valor booleano cuyo valor puede ser true o false activado : true una lista. Los elementos se escriben en l\u00edneas aparte, precedidos por un gui\u00f3n participes: - Luis - Ana - Juan una colecci\u00f3n de elementos clave:valor opciones : idioma : es avisos : true Los par\u00e1metros pueden anidarse. Por ejemplo, podemos tener una lista donde uno o varios de sus elementos sean, a su vez, listas. El car\u00e1cter # delimita lo que ser\u00e1 considerado como comentarios e ignorado. Se toma como tal todo el texto desde # hasta el fin de l\u00ednea #------------------------- # opciones del proceso #------------------------- opciones: idioma: es avisos: true Podemos asignar a un par\u00e1metro un bloque de texto de varias l\u00edneas, si comienza con un car\u00e1cter > : descripci\u00f3n: > Texto multil\u00ednea que ser\u00e1 unido en una sola l\u00ednea de texto Una l\u00ednea en blanco permite separar p\u00e1rrafos Aunque podemos preservar los saltos de l\u00ednea si usamos | en lugar de > : descripci\u00f3n: | Texto multil\u00ednea formado por cuatro l\u00edneas que ser\u00e1n respetadas Par\u00e1metros Mkdocs de proyecto site_url Establece la direcci\u00f3n can\u00f3nica del sitio web y genera una etiqueta en la secci\u00f3n header. El valor por defecto es null : < head > < link rel = \"canonical\" href = \"https://www.misitio.com/\" > </ head > repo_url Muestra en cada p\u00e1gina un enlace al repositorio indicado por esta variable (GitHub, Bitbucket, GitLab, \u2026). El valor por defecto es null : repo_url : https://github.com/misitio repo_name Determina el nombre del repositorio. Por defecto, lo intenta obtener a partir de repo_url . edit_uri Tomando repo_url como direcci\u00f3n base del repositorio de documentos, edit_uri se a\u00f1ade para formar la direcci\u00f3n para editar la p\u00e1gina. Esto facilita el acceso a la misma. Se admiten caracteres como (\u2018?\u2019) y (\u2018#\u2019). Valor por defecto: edit/master/docs/ para GitHub y GitLab, y src/default/docs/ para Bitbucket si repo_url apunta a estos dominios. En caso contrario, el valor por defecto ser\u00e1 null . Por ejemplo: edit_uri: '?query=root/path/docs/' edit_uri: '#root/path/docs/' edit_uri: root/path/docs/ Nota: En algunos repositorios como GitHub, Bitbucket o GitLab), el valor de edit_uri se deriva de \u2018repo_url\u2019 y no necesita establecerse manualmente. Por ejemplo, en GitHub edit_uri ser\u00e1 edit/master/docs/ . En Bitbucket ser\u00e1 src/default/docs/ . Para usar una URI diferente de la que se calcula por defecto (por ejemplo, otra rama de desarrollo), utilizar edit_uri . Asignarle una cadena vac\u00eda si no queremos un enlace \u201cedit URL\u201d mostrado en la p\u00e1gina Atenci\u00f3n: En GitHub y GitLab, el path por defecto ( edit/master/docs/ ) abre el documento en el editor online. Esto requiere que nos hayamos conectado con nuestra cuenta de usuario y contrase\u00f1a. En caso contrario, seremos redireccionados a una p\u00e1gina de conexi\u00f3n. Alternativamente, podemos usar un path \u201cblob\u201d ( blob/master/docs/ ) para abrir una vista de solo lectura, que admite acceso an\u00f3nimo. site_description Un texto descriptivo que se insertar\u00e1 en la secci\u00f3n <head> como metadato del archivo html. Por defecto es null site_author El nombre del autor se insertar\u00e1 en la secci\u00f3n <head> como metadato. Por defecto es null copyright Informaci\u00f3n de copyright a incluir en las p\u00e1ginas si el tema lo tiene contemplado. Por defecto es null google_analytics Configura Google analytics. Por defecto es null . Por ejemplo: google_analytics : [ 'UA-36723568-3' , 'mkdocs.org' ] remote_branch Rama del repositorio cuando queremos subir los documentos a GitHub mediante el comando: mkdocs gh-deploy Este comando es una alternativa de mkdocs build , y adem\u00e1s de generar el sitio web, automatiza la subida al repositorio. Tambi\u00e9n podemos establecer la rama como par\u00e1metro en la l\u00ednea de comandos. Por defecto es gh-pages remote_name Nombre remoto donde subir los contenidos usando gh-deploy . Podemos establecerlo en la l\u00ednea de comandos. Por defecto es origin . La barra de navegaci\u00f3n El apartado nav se usa para determinar el formato de la navegaci\u00f3n. Veamos, por ejemplo, una barra con tres entradas: nav : - 'Introducci\u00f3n' : 'index.md' - 'Gu\u00eda de usuario' : 'user-guide.md' - 'Acerca de' : 'about.md' Todos los paths deben ser relativos a la carpeta donde se ubica el archivo mkdocs.yml . Los elementos pueden incluir enlaces a sitios externos. En este caso, los t\u00edtulos, que son opcionales para enlaces internos, son obligatorios para los externos. Un sitio externo puede ser una URL absoluta o relativa. Cualquier path no encontrado durante la conversi\u00f3n ser\u00e1 asumido como enlace externo. Un ejemplo: nav : - Home : index.md - Gu\u00eda de usuario : user-guide.md - Referencia : https://ejemplo.com/ A veces un proyecto est\u00e1 alojado en un subdirectorio y queremos enlazar a otro. Podemos usar paths relativos: site_url : https://ejemplo.com/foo/ nav : - Home : ../ - Gu\u00eda de usuario : user-guide.md - Referencia : /ref/ V\u00e9ase que site_url indica que el proyecto est\u00e1 en la carpeta /foo/ dentro del dominio. Por lo tanto, Home tiene un enlace relativo que apunta a https://ejemplo.com/ . La tercera entrada usa un path absoluto apuntando a https://ejemplo.com/ref/ . Por defecto, si no especificamos nav , esta contendr\u00e1 una lista de todos los documentos markdown apuntados por docs_dir , incluyendo subdirectorios, y ordenando las p\u00e1ginas alfab\u00e9ticamente. Par\u00e1metros del tema utilizado La opci\u00f3n theme establece el tema a utilizar. Puede ser el nombre del tema o bien una lista de par\u00e1metros. En el primer caso: theme : mkdocs Este es el valor por defecto. Un ejemplo del segundo caso: theme : name : mkdocs custom_dir : miTema/ static_templates : - mapa.html include_sidebar : false Los par\u00e1metros de un tema pueden ser: name: Nombre del tema. Para los temas built-in puede ser mkdocs o readthedocs . Para temas de terceros, v\u00e9ase la documentaci\u00f3n de los mismos. custom_dir: Si queremos adaptar el tema a nuestro gusto, debemos reescribir algunos ficheros y dejarlos en la carpeta apuntada por custom-dir . Puede escribirse relativa a la carpeta principal (la que tiene el archivo de configuraci\u00f3n) o bien con una referencia absolut. static_templates: Una lista de plantillas, bien en la carpeta de plantillas del tema, o en la carpeta apuntada por custom_dir . otros par\u00e1metros propios del tema utilizado. Directorios Adem\u00e1s de la carpeta apuntada por custom-dir , con las plantillas del tema original adaptadas a nuestro gusto, tenemos otras carpetas que se pueden configurar: Carpeta de documentos Por defecto los documentos se guardan en la carpeta docs . Podemos establecer otra mediante el par\u00e1metro docs_dir . Carpeta del sitio web. Cuando compilemos el proyecto, se generar\u00e1 una carpeta site con los resultados. Podemos establecer otra carpeta mediante la opci\u00f3n site_dir . Archivos css El par\u00e1metro extra_css es una lista de archivos .css , ubicados en la carpeta de documentos, que queremos incluir en la compilaci\u00f3n. Por defecto es una lista vac\u00eda, que en lenguaje Python se representa mediante [] . extra_css : - css/estilos.css - css/masEstilos.css Archivos javascript El par\u00e1metro extra_javascript es una lista de archivos javascript, ubicados en la carpeta de documentos, que queremos incluir en la compilaci\u00f3n. Por defecto es una lista vac\u00eda [] . Plantillas extra El par\u00e1metro extra_templates contiene una lista de plantillas ubicadas en nuestra carpeta de documentos. Por defecto es una lista vac\u00eda. Extra Este apartado es una lista de par\u00e1metros que podemos a\u00f1adir a nuestro gusto cuando dise\u00f1emos temas. Por ejemplo, si queremos crear una variable version para mostrarla en las p\u00e1ginas: extra : version : 1.0 Por defecto, extra es un conjunto vac\u00edo de claves. Par\u00e1metros de visualizaci\u00f3n use_directory_urls Valores: true o false . Controla el estilo utilizado para generar enlaces a p\u00e1ginas. Valor por defecto: true . El proceso de generaci\u00f3n de p\u00e1ginas web convierte los enlaces markdown en enlaces html . Cuando el valor de este par\u00e1metro sea true , para cada p\u00e1gina se crear\u00e1 un directorio y la p\u00e1gina se llamar\u00e1 index.html . Los enlaces apuntar\u00e1n a la carpeta, y no al archivo index . Cuando el valor sea false , las p\u00e1ginas generadas se llamar\u00e1n igual que los archivos markdown (cambiando la extensi\u00f3n), y los enlaces apuntar\u00e1n directamente a los archivos. Si queremos que los enlaces sean completos, con el nombre de la p\u00e1gina enlazada, poner este par\u00e1metro como false . Resulta \u00fatil cuando queramos visualizar las p\u00e1ginas en nuestro entorno local, o en una plataforma que no redireccione autom\u00e1ticamente a index.html ( GitHub si lo hace). Algunos ejemplos: Archivo a enlazar valor: true valor: false index.md /index.html /index.html guia_de_uso.md /guia_de_uso/index.html /guia_de_uso.html acercade/licencia.md /acercade/licencia/index.html /acercade/licencia.html strict Determina el comportamiento del proceso de conversi\u00f3n tras producirse un aviso ( warning ). Por defecto es false . Hay que ponerlo como true para detener el proceso cuando se produce cualquier aviso. dev_addr URL para mkdocs serve . Por defecto es '127.0.0.1:8000' . Debe escribirse en formato IP : PUERTO . Tambi\u00e9n se puede establecer con el argumento --dev-addr al invocar mkdocs serve . Configurar extensiones MkDocs es un programa Python que traduce de markdown a HTML utilizando las funcionalidades proporcionadas por la biblioteca Python Markdown , que a su vez admite una gran variedad de extensiones para ampliar los recursos de sintaxis, como meta , toc , tables , o fenced_code . Por ejemplo, para utilizar SmartyPants , escribiremos: markdown_extensions : - smarty Algunas extensiones tiene opciones de configuraci\u00f3n. Para asignarles un valor, a\u00f1adir para cada una un mapa de elementos clave:valor . Por ejemplo, la extensi\u00f3n toc permite usar permalinks : markdown_extensions : - toc : permalink : True V\u00e9ase que tras la extensi\u00f3n se ponen dos puntos y a continuaci\u00f3n la lista de opciones: markdown_extensions : - toc : permalink : True separator : \"_\" Si la extensi\u00f3n utilizada no requiere opciones, basta con incluirla en la lista de extensiones: markdown_extensions : - smarty - toc : permalink : True - sane_lists Configurar complementos (plugins) Podemos aumentar las funcionalidades de MkDocs instalando complementos con el comando pip . De serie, MkDocs proporciona el complemento Search para realizar b\u00fasquedas, que es el \u00fanico que se activa autom\u00e1ticamente. Para activar otros complementos, hay que especificar la lista en el archivo de configuraci\u00f3n: plugins : - search - otros_complementos Para desactivar search , escribir una lista plugins que no incluya este complemento. El efecto ser\u00e1 que desaparecer\u00e1 el recuadro de b\u00fasqueda de la barra superior. Para asignar una lista vac\u00eda al par\u00e1metro plugins : plugins : [] En grandes proyectos podemos mejorar el rendimiento de las b\u00fasquedas usando la opci\u00f3n prebuild_index del complemento search : plugins : - search prebuild_index : true Por defecto es false .","title":"Configurar el proyecto"},{"location":"010Configuracion.html#configurando-el-proyecto","text":"En este cap\u00edtulo daremos un repaso al archivo de configuraci\u00f3n y sus opciones.","title":"Configurando el proyecto"},{"location":"010Configuracion.html#el-archivo-de-configuracion","text":"El proceso de conversi\u00f3n y generaci\u00f3n del sitio web se configura en buena parte adaptando las definiciones de par\u00e1metros en el archivo mkdocs.yml , que es un fichero de texto en formato YAML ubicado en la carpeta principal. Todos los par\u00e1metros son opcionales, excepto site_name , que representa el t\u00edtulo del proyecto. Por lo tanto, un archivo mkdocs.yml en su expresi\u00f3n m\u00ednima puede ser: site_name : Mi proyecto","title":"El archivo de configuraci\u00f3n"},{"location":"010Configuracion.html#formato-yaml","text":"Los archivos YAML son ficheros de texto que se utilizan para almacenar datos. MkDocs y Jekyll lo utilizan para crear archivos de configuraci\u00f3n con los par\u00e1metros del proceso de conversi\u00f3n. La sintaxis es sencilla y fue dise\u00f1ada buscando que fuera muy legible. Se utiliza una sintaxis basada en el sangrado, que debe ser consistente y basado en espacios en blanco, no admiti\u00e9ndose caracteres de tabulaci\u00f3n. En principio, un archivo YAML contiene una colecci\u00f3n de parejas clave:valor , cada una de ellas en l\u00ednea aparte. Se admiten l\u00edneas en blanco. Cada variable puede ser de diferente tipo, que ser\u00e1 deducido autom\u00e1ticamente: un texto. Las comillas son opcionales, y pueden usarse ap\u00f3strofos en su lugar: nombre: \"Luis Gutierrez\" un n\u00famero: edad : 58 un valor booleano cuyo valor puede ser true o false activado : true una lista. Los elementos se escriben en l\u00edneas aparte, precedidos por un gui\u00f3n participes: - Luis - Ana - Juan una colecci\u00f3n de elementos clave:valor opciones : idioma : es avisos : true Los par\u00e1metros pueden anidarse. Por ejemplo, podemos tener una lista donde uno o varios de sus elementos sean, a su vez, listas. El car\u00e1cter # delimita lo que ser\u00e1 considerado como comentarios e ignorado. Se toma como tal todo el texto desde # hasta el fin de l\u00ednea #------------------------- # opciones del proceso #------------------------- opciones: idioma: es avisos: true Podemos asignar a un par\u00e1metro un bloque de texto de varias l\u00edneas, si comienza con un car\u00e1cter > : descripci\u00f3n: > Texto multil\u00ednea que ser\u00e1 unido en una sola l\u00ednea de texto Una l\u00ednea en blanco permite separar p\u00e1rrafos Aunque podemos preservar los saltos de l\u00ednea si usamos | en lugar de > : descripci\u00f3n: | Texto multil\u00ednea formado por cuatro l\u00edneas que ser\u00e1n respetadas","title":"Formato YAML"},{"location":"010Configuracion.html#parametros-mkdocs-de-proyecto","text":"site_url Establece la direcci\u00f3n can\u00f3nica del sitio web y genera una etiqueta en la secci\u00f3n header. El valor por defecto es null : < head > < link rel = \"canonical\" href = \"https://www.misitio.com/\" > </ head > repo_url Muestra en cada p\u00e1gina un enlace al repositorio indicado por esta variable (GitHub, Bitbucket, GitLab, \u2026). El valor por defecto es null : repo_url : https://github.com/misitio repo_name Determina el nombre del repositorio. Por defecto, lo intenta obtener a partir de repo_url . edit_uri Tomando repo_url como direcci\u00f3n base del repositorio de documentos, edit_uri se a\u00f1ade para formar la direcci\u00f3n para editar la p\u00e1gina. Esto facilita el acceso a la misma. Se admiten caracteres como (\u2018?\u2019) y (\u2018#\u2019). Valor por defecto: edit/master/docs/ para GitHub y GitLab, y src/default/docs/ para Bitbucket si repo_url apunta a estos dominios. En caso contrario, el valor por defecto ser\u00e1 null . Por ejemplo: edit_uri: '?query=root/path/docs/' edit_uri: '#root/path/docs/' edit_uri: root/path/docs/ Nota: En algunos repositorios como GitHub, Bitbucket o GitLab), el valor de edit_uri se deriva de \u2018repo_url\u2019 y no necesita establecerse manualmente. Por ejemplo, en GitHub edit_uri ser\u00e1 edit/master/docs/ . En Bitbucket ser\u00e1 src/default/docs/ . Para usar una URI diferente de la que se calcula por defecto (por ejemplo, otra rama de desarrollo), utilizar edit_uri . Asignarle una cadena vac\u00eda si no queremos un enlace \u201cedit URL\u201d mostrado en la p\u00e1gina Atenci\u00f3n: En GitHub y GitLab, el path por defecto ( edit/master/docs/ ) abre el documento en el editor online. Esto requiere que nos hayamos conectado con nuestra cuenta de usuario y contrase\u00f1a. En caso contrario, seremos redireccionados a una p\u00e1gina de conexi\u00f3n. Alternativamente, podemos usar un path \u201cblob\u201d ( blob/master/docs/ ) para abrir una vista de solo lectura, que admite acceso an\u00f3nimo. site_description Un texto descriptivo que se insertar\u00e1 en la secci\u00f3n <head> como metadato del archivo html. Por defecto es null site_author El nombre del autor se insertar\u00e1 en la secci\u00f3n <head> como metadato. Por defecto es null copyright Informaci\u00f3n de copyright a incluir en las p\u00e1ginas si el tema lo tiene contemplado. Por defecto es null google_analytics Configura Google analytics. Por defecto es null . Por ejemplo: google_analytics : [ 'UA-36723568-3' , 'mkdocs.org' ] remote_branch Rama del repositorio cuando queremos subir los documentos a GitHub mediante el comando: mkdocs gh-deploy Este comando es una alternativa de mkdocs build , y adem\u00e1s de generar el sitio web, automatiza la subida al repositorio. Tambi\u00e9n podemos establecer la rama como par\u00e1metro en la l\u00ednea de comandos. Por defecto es gh-pages remote_name Nombre remoto donde subir los contenidos usando gh-deploy . Podemos establecerlo en la l\u00ednea de comandos. Por defecto es origin .","title":"Par\u00e1metros Mkdocs de proyecto"},{"location":"010Configuracion.html#la-barra-de-navegacion","text":"El apartado nav se usa para determinar el formato de la navegaci\u00f3n. Veamos, por ejemplo, una barra con tres entradas: nav : - 'Introducci\u00f3n' : 'index.md' - 'Gu\u00eda de usuario' : 'user-guide.md' - 'Acerca de' : 'about.md' Todos los paths deben ser relativos a la carpeta donde se ubica el archivo mkdocs.yml . Los elementos pueden incluir enlaces a sitios externos. En este caso, los t\u00edtulos, que son opcionales para enlaces internos, son obligatorios para los externos. Un sitio externo puede ser una URL absoluta o relativa. Cualquier path no encontrado durante la conversi\u00f3n ser\u00e1 asumido como enlace externo. Un ejemplo: nav : - Home : index.md - Gu\u00eda de usuario : user-guide.md - Referencia : https://ejemplo.com/ A veces un proyecto est\u00e1 alojado en un subdirectorio y queremos enlazar a otro. Podemos usar paths relativos: site_url : https://ejemplo.com/foo/ nav : - Home : ../ - Gu\u00eda de usuario : user-guide.md - Referencia : /ref/ V\u00e9ase que site_url indica que el proyecto est\u00e1 en la carpeta /foo/ dentro del dominio. Por lo tanto, Home tiene un enlace relativo que apunta a https://ejemplo.com/ . La tercera entrada usa un path absoluto apuntando a https://ejemplo.com/ref/ . Por defecto, si no especificamos nav , esta contendr\u00e1 una lista de todos los documentos markdown apuntados por docs_dir , incluyendo subdirectorios, y ordenando las p\u00e1ginas alfab\u00e9ticamente.","title":"La barra de navegaci\u00f3n"},{"location":"010Configuracion.html#parametros-del-tema-utilizado","text":"La opci\u00f3n theme establece el tema a utilizar. Puede ser el nombre del tema o bien una lista de par\u00e1metros. En el primer caso: theme : mkdocs Este es el valor por defecto. Un ejemplo del segundo caso: theme : name : mkdocs custom_dir : miTema/ static_templates : - mapa.html include_sidebar : false Los par\u00e1metros de un tema pueden ser: name: Nombre del tema. Para los temas built-in puede ser mkdocs o readthedocs . Para temas de terceros, v\u00e9ase la documentaci\u00f3n de los mismos. custom_dir: Si queremos adaptar el tema a nuestro gusto, debemos reescribir algunos ficheros y dejarlos en la carpeta apuntada por custom-dir . Puede escribirse relativa a la carpeta principal (la que tiene el archivo de configuraci\u00f3n) o bien con una referencia absolut. static_templates: Una lista de plantillas, bien en la carpeta de plantillas del tema, o en la carpeta apuntada por custom_dir . otros par\u00e1metros propios del tema utilizado.","title":"Par\u00e1metros del tema utilizado"},{"location":"010Configuracion.html#directorios","text":"Adem\u00e1s de la carpeta apuntada por custom-dir , con las plantillas del tema original adaptadas a nuestro gusto, tenemos otras carpetas que se pueden configurar: Carpeta de documentos Por defecto los documentos se guardan en la carpeta docs . Podemos establecer otra mediante el par\u00e1metro docs_dir . Carpeta del sitio web. Cuando compilemos el proyecto, se generar\u00e1 una carpeta site con los resultados. Podemos establecer otra carpeta mediante la opci\u00f3n site_dir . Archivos css El par\u00e1metro extra_css es una lista de archivos .css , ubicados en la carpeta de documentos, que queremos incluir en la compilaci\u00f3n. Por defecto es una lista vac\u00eda, que en lenguaje Python se representa mediante [] . extra_css : - css/estilos.css - css/masEstilos.css Archivos javascript El par\u00e1metro extra_javascript es una lista de archivos javascript, ubicados en la carpeta de documentos, que queremos incluir en la compilaci\u00f3n. Por defecto es una lista vac\u00eda [] . Plantillas extra El par\u00e1metro extra_templates contiene una lista de plantillas ubicadas en nuestra carpeta de documentos. Por defecto es una lista vac\u00eda.","title":"Directorios"},{"location":"010Configuracion.html#extra","text":"Este apartado es una lista de par\u00e1metros que podemos a\u00f1adir a nuestro gusto cuando dise\u00f1emos temas. Por ejemplo, si queremos crear una variable version para mostrarla en las p\u00e1ginas: extra : version : 1.0 Por defecto, extra es un conjunto vac\u00edo de claves.","title":"Extra"},{"location":"010Configuracion.html#parametros-de-visualizacion","text":"use_directory_urls Valores: true o false . Controla el estilo utilizado para generar enlaces a p\u00e1ginas. Valor por defecto: true . El proceso de generaci\u00f3n de p\u00e1ginas web convierte los enlaces markdown en enlaces html . Cuando el valor de este par\u00e1metro sea true , para cada p\u00e1gina se crear\u00e1 un directorio y la p\u00e1gina se llamar\u00e1 index.html . Los enlaces apuntar\u00e1n a la carpeta, y no al archivo index . Cuando el valor sea false , las p\u00e1ginas generadas se llamar\u00e1n igual que los archivos markdown (cambiando la extensi\u00f3n), y los enlaces apuntar\u00e1n directamente a los archivos. Si queremos que los enlaces sean completos, con el nombre de la p\u00e1gina enlazada, poner este par\u00e1metro como false . Resulta \u00fatil cuando queramos visualizar las p\u00e1ginas en nuestro entorno local, o en una plataforma que no redireccione autom\u00e1ticamente a index.html ( GitHub si lo hace). Algunos ejemplos: Archivo a enlazar valor: true valor: false index.md /index.html /index.html guia_de_uso.md /guia_de_uso/index.html /guia_de_uso.html acercade/licencia.md /acercade/licencia/index.html /acercade/licencia.html strict Determina el comportamiento del proceso de conversi\u00f3n tras producirse un aviso ( warning ). Por defecto es false . Hay que ponerlo como true para detener el proceso cuando se produce cualquier aviso. dev_addr URL para mkdocs serve . Por defecto es '127.0.0.1:8000' . Debe escribirse en formato IP : PUERTO . Tambi\u00e9n se puede establecer con el argumento --dev-addr al invocar mkdocs serve .","title":"Par\u00e1metros de visualizaci\u00f3n"},{"location":"010Configuracion.html#configurar-extensiones","text":"MkDocs es un programa Python que traduce de markdown a HTML utilizando las funcionalidades proporcionadas por la biblioteca Python Markdown , que a su vez admite una gran variedad de extensiones para ampliar los recursos de sintaxis, como meta , toc , tables , o fenced_code . Por ejemplo, para utilizar SmartyPants , escribiremos: markdown_extensions : - smarty Algunas extensiones tiene opciones de configuraci\u00f3n. Para asignarles un valor, a\u00f1adir para cada una un mapa de elementos clave:valor . Por ejemplo, la extensi\u00f3n toc permite usar permalinks : markdown_extensions : - toc : permalink : True V\u00e9ase que tras la extensi\u00f3n se ponen dos puntos y a continuaci\u00f3n la lista de opciones: markdown_extensions : - toc : permalink : True separator : \"_\" Si la extensi\u00f3n utilizada no requiere opciones, basta con incluirla en la lista de extensiones: markdown_extensions : - smarty - toc : permalink : True - sane_lists","title":"Configurar extensiones"},{"location":"010Configuracion.html#configurar-complementos-plugins","text":"Podemos aumentar las funcionalidades de MkDocs instalando complementos con el comando pip . De serie, MkDocs proporciona el complemento Search para realizar b\u00fasquedas, que es el \u00fanico que se activa autom\u00e1ticamente. Para activar otros complementos, hay que especificar la lista en el archivo de configuraci\u00f3n: plugins : - search - otros_complementos Para desactivar search , escribir una lista plugins que no incluya este complemento. El efecto ser\u00e1 que desaparecer\u00e1 el recuadro de b\u00fasqueda de la barra superior. Para asignar una lista vac\u00eda al par\u00e1metro plugins : plugins : [] En grandes proyectos podemos mejorar el rendimiento de las b\u00fasquedas usando la opci\u00f3n prebuild_index del complemento search : plugins : - search prebuild_index : true Por defecto es false .","title":"Configurar complementos (plugins)"},{"location":"011Temas.html","text":"Adaptar el tema Como adecuar la disposici\u00f3n y presentaci\u00f3n de las p\u00e1ginas. Escogiendo un tema Ya hemos visto que el formato de la p\u00e1gina, disposici\u00f3n y comportamiento de los distintos elementos, y aspecto en general se consigue aplicando un tema . MkDocs proporciona un par de temas internos ( built-in ) as\u00ed como la posibilidad de utilizar los creados por otras personas. Todos ellos pueden ser configurados y adaptados a nuestro gusto. Tambi\u00e9n podemos crear el nuestro propio. Para utilizar uno de los temas est\u00e1ndar, basta con a\u00f1adir al fichero de configuraci\u00f3n mkdocs.yml la siguiente entrada: theme : mkdocs o bien: theme : readthedocs El primero es el que se usa por defecto. mkdocs El tema \u201cMkDocs\u201d solo admite dos niveles en la barra de navegaci\u00f3n, es decir, un men\u00fa horizontal y pulsando en cada opci\u00f3n, men\u00fas desplegables. Adem\u00e1s de las opciones habituales, el tema mkdocs incluye par\u00e1metros que podemos incluir en el archivo de configuraci\u00f3n. Por ejemplo, la funci\u00f3n de resaltado de c\u00f3digo fuente se puede configurar: highlightjs : resalta el texto fuente usando la biblioteca highlight.js de JavaScript. Por defecto es True . hljs_style : la librer\u00eda highlight.js proporciona 79 diferentes estilos (variaciones de color) para resaltar los elementos. Poner el nombre del estilo deseado. Por defecto es github . hljs_languages : por defecto, highlight.js solo admite 23 lenguajes. Incluir aqu\u00ed una lista adicional de lenguajes para a\u00f1adir soporte para los mismos. Por ejemplo: theme : name : mkdocs highlightjs : true hljs_languages : - yaml - rust Otra posibilidad del tema MkDocs es definir atajos de teclado con la opci\u00f3n shortcuts : theme: name: mkdocs shortcuts: help: 191 # ? next: 78 # n previous: 80 # p search: 83 # s Todos los valores han de ser c\u00f3digos num\u00e9ricos. Conviene usar c\u00f3digos presentes en cualquier teclado. Para determinar los valores, mirar en https://keycode.info/ . Los posibles atajos son: help : Muestra una ventana con la lista de atajos de teclado. Por defecto el valor es 191 (tecla ?) next : Pasa a la siguiente p\u00e1gina. Por defecto: 78 (tecla n) previous : P\u00e1gina anterior. Por defecto: 80 (tecla p) search : Muestra ventana de b\u00fasqueda. Por defecto: 83 (tecla s) readthedocs Es un clon del tema por defecto del servicio Read the Docs . Adem\u00e1s de las opciones por defecto, este tema cuenta con: highlightjs : Permite el resaltado de bloques de c\u00f3digo fuente usando la librer\u00eda highlight.js de JavaScript. Por defecto es True . hljs_languages : Por defecto, highlight.js solo admite 23 lenguajes. Incluir aqu\u00ed una lista adicional de lenguajes para a\u00f1adir soporte para los mismos: theme : name : mkdocs highlightjs : true hljs_languages : - yaml - rust include_homepage_in_sidebar : si el valor es true (por defecto) a\u00f1ade la p\u00e1gina de inicio a la barra lateral aunque debemos incluirla en la la lista nav del archivo de configuraci\u00f3n. En todo caso, pulsando con el rat\u00f3n sobre el nombre del sitio o en el logo, siempre nos llevar\u00e1 a la p\u00e1gina de inicio. prev_next_buttons_location : Puede ser bottom , top , both , o none . Muestra los botones [Next] y [Previous] de acuerdo a este par\u00e1metro, que por defecto es bottom . navigation_depth : M\u00e1xima profundidad de navegaci\u00f3n en el n\u00famero de niveles a mostrar en la barra lateral. Valor por defecto: 4 . collapse_navigation : Solo incluye las cabeceras de secci\u00f3n en la barra lateral. Por defecto es True . titles_only : Solo incluye t\u00edtulos de p\u00e1gina en la barra lateral, excluyendo las cabeceras de secci\u00f3n. Por defecto es False . sticky_navigation : Si es true (por defecto), la barra lateral se desplaza arriba/abajo en la medida que desplazamos el contenido de la p\u00e1gina. Temas de terceros Podemos encontrar una lista de temas de terceros en la wiki de MkDocs. Por ejemplo, vamos a instalar el tema Material : pip3 install mkdocs-material Recu\u00e9rdese que para hacer esta instalaci\u00f3n necesitaremos permisos de administrador. Para usar esos temas, en este caso Material , escribimos en el archivo de configuraci\u00f3n mkdocs.yml la siguiente entrada: theme : material Y al volver a compilar las p\u00e1ginas deber\u00eda hacer el efecto deseado. Para configurar el nuevo tema, tendremos que acudir a la documentaci\u00f3n del mismo. A\u00f1adiendo hojas de estilos Podemos usar las opciones de configuraci\u00f3n extra_css y extra_javascript para a\u00f1adir nuevos archivos de estilo y scripts. Por ejemplo, para cambiar el color de las cabeceras, en el fichero de configuraci\u00f3n escribimos: extra_css: - css/estilos.css - css/mas_estilos.css Y en la carpeta de documentos, creamos un archivo css/estilos.css con lo siguiente: h1 { color : red ; } Adaptando el tema Para hacer modificaciones en un tema, comenzamos por acudir al repositorio del mismo y examinar la lista de archivos. Por ejemplo, el tema mkdocs tiene una estructura que es m\u00e1s o menos como sigue: - css\\ - fonts\\ - img\\ - favicon.ico - grid.png - js\\ - 404.html - base.html - content.html - nav-sub.html - nav.html - toc.html Para modificar un archivo, tenemos que copiarlo a nuestro proyecto, ubic\u00e1ndolo en una carpeta de igual nombre que en el tema original. MkDocs tomar\u00e1 con prioridad los archivos locales. Las carpetas con archivos del tema deben situarse en una carpeta que \u201ccuelgue\u201d de la principal del proyecto, en paralelo a la carpeta de documentos. La indicamos en el archivo de configuraci\u00f3n: theme : name : mkdocs custom_dir : tema/ Con esto le estamos diciendo que use el tema mkdocs , pero que acuda a nuestra carpeta /tema/ para ver si hay archivos personalizados, que tienen preferencia sobre los originales. Por ejemplo, el tema original tiene un archivo 404.html que muestra la p\u00e1gina \u201cfile not found cuando una p\u00e1gina enlazada no existe. Podemos incluir nuestro propio archivo 404.html* en la carpeta a puntada por el par\u00e1metro theme.custom_dir . Nuestro proyecto podr\u00eda tener la siguiente estructura: - config.yml - docs/ - index.md - otrapagina.md - tema/ - img/ - favicon.ico - 404.html - css - estilos.css Los archivos incluidos en la carpeta /tema/ reemplazar\u00e1n los originales con el mismo nombre o se a\u00f1adir\u00e1n al tema. Podr\u00edamos copiar en esa carpeta todo el tema original completo, y en el archivo de configuraci\u00f3n escribir: theme : name : null custom_dir : tema/ Si no definimos un tema ni una carpeta para alojar el mismo, MkDocs usar\u00e1 el tema por defecto. Anatom\u00eda de un tema Lo m\u00ednimo es un archivo main.html , que es una plantilla con marcas Jinja2 (el lenguaje de marcas utilizado por MkDocs). Por ejemplo si nuestro proyecto es: mkdocs.yml docs/ index.md acercade.md tema/ main.html ... \u2026 escribiremos lo siguiente en mkdocs.yml : theme : name : null custom_dir : 'tema/' \u2026 y estaremos usando como tema los archivos y plantillas de la carpeta /tema/ . Pero si escribi\u00e9ramos: theme : name : otro_tema custom_dir : 'tema/' lo que estar\u00edamos haciendo es usar otro tema reescribiendo main.html . El fichero main.html m\u00e1s simple podr\u00eda ser: <!DOCTYPE html> <html> <head> <title> {% if page.title %}{{ page.title }} - {% endif %} {{ config.site_name }} </title> </head> <body> {{ page.content }} </body> </html> El texto de cada p\u00e1gina se insertar\u00e1 en lugar de la marca {{ page.content }} . Podemos a\u00f1adir etiquetas para enlazar con hojas de estilo y scripts como en cualquier archivo html. Variables El texto de una plantilla puede incluir variables, que pueden ser a nivel global o de p\u00e1gina. Una variable se escribe como {{ nombre_variable }} Las siguientes variables est\u00e1n disponibles \u201cde serie\u201d para cualquier plantilla: config. Incluye las siguientes opciones: config.site_name config.site_url config.site_author config.site_description config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright config.google_analytics nav La variable nav es una lista de p\u00e1ginas definida en el archivo de configuraci\u00f3n. Adem\u00e1s incluye los siguientes atributos: nav.homepage: p\u00e1gina principal del sitio nav.pages: lista de p\u00e1ginas a incluir en la barra de navegaci\u00f3n. Puede haber otras p\u00e1ginas no incluidas en la barra. Afecta al comportamiento de los enlaces \u201cnext page\u201d y \u201cprevious page\u201d. base_url La variable base_url proporciona un path a la carpeta principal del proyecto. Puede usarse directamente precediendo una URL relativa, pero es mejor usar el filtro url para asegurarnos de una correcta transformaci\u00f3n: {{ base.url | url }}{{ page.url | url }}{{ page.title }} En el lenguaje de marcas Jinja2 , los filtros consisten en aplicar una conversi\u00f3n a una variable. Se coloca un s\u00edmbolo \u201c|\u201d entre el nombre de la variable y el filtro a aplicar. mkdocs_version Versi\u00f3n actual de MkDocs. build_date_utc Objeto de la clase datetime de Python que representa la fecha y hora de compilaci\u00f3n en formato UTC. Resulta \u00fatil para saber si los documentos son recientes. pages Una lista con todas las p\u00e1ginas del proyecto ordenadas alfab\u00e9ticamente por directorio y nombre de archivo. Contiene p\u00e1ginas no incluidas en la variable nav . El orden de las p\u00e1ginas no tiene por que coincidir con el de la barra de navegaci\u00f3n. page En las plantillas no utilizadas por un archivo Markdown, la variable page tiene un valor None . En caso contrario, la variable tiene los siguientes atributos: page.title T\u00edtulo de la p\u00e1gina actual. page.content HTML generado a partir de Markdown, que se mostrar\u00e1 como documentaci\u00f3n. page.toc Una lista de enlaces que se usa para formar la tabla de contenidos. Cada elemento tiene los siguientes atributos: title : texto del elemento. url : URL para apuntar a un objeto level : Nivel en la tabla de contenidos, con base cero. children : lista de elementos anidados. page.meta Es una colecci\u00f3n con los metadatos incluidos en el front matter de la p\u00e1gina. Por ejemplo: source : generics . py mixins . py # T\u00edtulo de la p\u00e1gina Contenido ... page.url La URL de la p\u00e1gina relativa a la apuntada por site_dir . Es preferible usar el filtro url para asegurarse de que la URL es relativa a la p\u00e1gina actual. <a href= \" {{ page.url | url }} \" > {{ page.title }} </a> page.abs_url La URL absoluta de la p\u00e1gina de acuerdo al par\u00e1metro de configuraci\u00f3n site_url . Incluye los subdirectorios incluidos en site_url , pero no el dominio. Lo apuntado por base_url no deber\u00eda usarse con esta variable. Por ejemplo, si tenemos: site_url : https :// ejemplo . com / el valor de page.abs_url para la p\u00e1gina foo.md ser\u00e1 /foo/ . Pero si tenemos: site_url : https :// ejemplo . com /bar/ entonces el valor de page.abs_url para foo.md ser\u00e1 /bar/foo/ . page.canonical_url Direcci\u00f3n URL completa tal y como est\u00e1 determinado por el valor asignado a site_url en la configuraci\u00f3n. El valor incluye el dominio y cualquier subdirectorio incluido en site_url . base_url no deber\u00eda utilizarse con esta variable. page.edit_url La URL completa al texto fuente en el repositorio. Generalmente se usar\u00e1 para proporcionar un enlace para editar el texto fuente. El valor de base_url no deber\u00eda usarse con esta variable. page.is_homepage True en el caso de la p\u00e1gina principal del sitio, y False en el resto de p\u00e1ginas. Puede usarse en conjunci\u00f3n con otros atributos de page para alterar el comportamiento. Por ejemplo, para mostrar un t\u00edtulo diferente en la p\u00e1gina principal, en la plantilla escribimos: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }} page.previous_page El nombre de la p\u00e1gina anterior. Si estamos en la primera p\u00e1gina, el valor ser\u00e1 None . Sucede lo mismo si estamos en una p\u00e1gina no incluida en la barra de navegaci\u00f3n. page.next_page Similar al anterior, pero apunta a la p\u00e1gina siguiente. page.parent Secci\u00f3n inmediatamente situada a nivel superior en la barra de navegaci\u00f3n. El valor es none si estamos en el nivel superior. page.children Las p\u00e1ginas no tienen p\u00e1ginas hijas. El valor siempre es none . Esta propiedad tiene sentido para el caso de las secciones, donde devuelve una lista. page.active Si el valor es true , indica que esta es la p\u00e1gina actual. Por defecto es false . page.is_section Indica que en la barra de navegaci\u00f3n es un objeto \u201csection\u201d. El valor es false en el caso de las p\u00e1ginas p\u00e1ginas. page.is_page Indica que un objeto en la barra de navegaci\u00f3n es una p\u00e1gina. El valor es true para todas las p\u00e1ginas. page.is_link Indica que el objeto es un enlace en la barra de navegaci\u00f3n. Siempre es false para las p\u00e1ginas. Veamos un ejemplo de uso en una plantilla, usando el lenguaje de marcas Jinja : <ul> {% for toc_item in page.toc %} <li><a href=\" {{ toc_item.url }} \"> {{ toc_item.title }} </a></li> {% for toc_item in toc_item.children %} <li><a href=\" {{ toc_item.url }} \"> {{ toc_item.title }} </a></li> {% endfor %} {% endfor %} </ul> La variable nav es una lista de objetos del tipo section , page o link . Los primeros pueden tener otros anidados. Los objetos section tienen los siguientes atributos: section.title T\u00edtulo de la secci\u00f3n. section.parent Secci\u00f3n padre. Si estamos al nivel superior, None . section.children Una lista con todos los objetos incluidos en la secci\u00f3n, que pueden ser a su vez secciones, p\u00e1ginas o enlaces. section.active Si es true , indica que una p\u00e1gina hija de esta secci\u00f3n es la p\u00e1gina actual. Puede usarse para resaltar el nombre de la secci\u00f3n. Por defecto es false . section.is_section Indica que el objeto es una secci\u00f3n. section.is_page Indica que el objeto es una p\u00e1gina. El valor es false para las secciones. section.is_link Indica que el objeto es un enlace. Los objetos link pueden tener los siguientes atributos link.title T\u00edtulo del enlace. link.url La URL apuntada por el enlace. Deber\u00eda ser una URL absoluta, no precedida por base_url . link.parent Elemento padre del enlace. None si estamos al nivel superior. link.children Los enlaces no tienen elementos hijos. Siempre es None . link.active Los enlaces nunca pueden ser p\u00e1ginas activas. Siempre es False . link.is_section Siempre false para enlaces. link.is_page Siempre false para enlaces. link.is_link Siempre true para enlaces. Bloques En lugar de sobreescribir un archivo de un tema, podemos hacerlo con parte del archivo. Las plantillas se pueden dividir en bloques de texto, delimitados de la siguiente forma: {% block nombre %} ...contenido html... {% endblock %} Para sobreescribir un bloque de un archivo, en la carpeta apuntada por custom_dir creamos un fichero con el mismo nombre: {% extends \"base.html\" %} {% block htmltitle %} <title>T\u00edtulo personalizado</title> {% endblock %} La plantilla principal main.html suele ser una ampliaci\u00f3n de base.html , y el bloque htmltitle se suele utilizar para definir la cabecera de la p\u00e1gina web. Obviamente, tendremos que examinar los archivos del tema para saber que bloques son sobreescribibles. Los termas MkDocs y ReadTheDocs proporcionan los siguientes bloques: site_meta : etiquetas meta en la secci\u00f3n <head> . htmltitle : t\u00edtulo de la p\u00e1gina. styles : enlaces a hojas de estilo. libs : librer\u00edas JavaScript (jQuery, etc). scripts : scripts JavaScript. analytics : script analytics. extrahead : bloque vac\u00edo en la secci\u00f3n <head> , para a\u00f1adir elementos a nuestro gusto. site_name : nombre del sitio en la barra de navegaci\u00f3n. site_nav : enlaces de navegaci\u00f3n. search_box : recuadro para introducir b\u00fasquedas. next_prev : botones next y previous. repo : enlace al repositorio. content : tabla de contenidos. footer : pie de p\u00e1gina.","title":"Adaptar el tema"},{"location":"011Temas.html#adaptar-el-tema","text":"Como adecuar la disposici\u00f3n y presentaci\u00f3n de las p\u00e1ginas.","title":"Adaptar el tema"},{"location":"011Temas.html#escogiendo-un-tema","text":"Ya hemos visto que el formato de la p\u00e1gina, disposici\u00f3n y comportamiento de los distintos elementos, y aspecto en general se consigue aplicando un tema . MkDocs proporciona un par de temas internos ( built-in ) as\u00ed como la posibilidad de utilizar los creados por otras personas. Todos ellos pueden ser configurados y adaptados a nuestro gusto. Tambi\u00e9n podemos crear el nuestro propio. Para utilizar uno de los temas est\u00e1ndar, basta con a\u00f1adir al fichero de configuraci\u00f3n mkdocs.yml la siguiente entrada: theme : mkdocs o bien: theme : readthedocs El primero es el que se usa por defecto.","title":"Escogiendo un tema"},{"location":"011Temas.html#mkdocs","text":"El tema \u201cMkDocs\u201d solo admite dos niveles en la barra de navegaci\u00f3n, es decir, un men\u00fa horizontal y pulsando en cada opci\u00f3n, men\u00fas desplegables. Adem\u00e1s de las opciones habituales, el tema mkdocs incluye par\u00e1metros que podemos incluir en el archivo de configuraci\u00f3n. Por ejemplo, la funci\u00f3n de resaltado de c\u00f3digo fuente se puede configurar: highlightjs : resalta el texto fuente usando la biblioteca highlight.js de JavaScript. Por defecto es True . hljs_style : la librer\u00eda highlight.js proporciona 79 diferentes estilos (variaciones de color) para resaltar los elementos. Poner el nombre del estilo deseado. Por defecto es github . hljs_languages : por defecto, highlight.js solo admite 23 lenguajes. Incluir aqu\u00ed una lista adicional de lenguajes para a\u00f1adir soporte para los mismos. Por ejemplo: theme : name : mkdocs highlightjs : true hljs_languages : - yaml - rust Otra posibilidad del tema MkDocs es definir atajos de teclado con la opci\u00f3n shortcuts : theme: name: mkdocs shortcuts: help: 191 # ? next: 78 # n previous: 80 # p search: 83 # s Todos los valores han de ser c\u00f3digos num\u00e9ricos. Conviene usar c\u00f3digos presentes en cualquier teclado. Para determinar los valores, mirar en https://keycode.info/ . Los posibles atajos son: help : Muestra una ventana con la lista de atajos de teclado. Por defecto el valor es 191 (tecla ?) next : Pasa a la siguiente p\u00e1gina. Por defecto: 78 (tecla n) previous : P\u00e1gina anterior. Por defecto: 80 (tecla p) search : Muestra ventana de b\u00fasqueda. Por defecto: 83 (tecla s)","title":"mkdocs"},{"location":"011Temas.html#readthedocs","text":"Es un clon del tema por defecto del servicio Read the Docs . Adem\u00e1s de las opciones por defecto, este tema cuenta con: highlightjs : Permite el resaltado de bloques de c\u00f3digo fuente usando la librer\u00eda highlight.js de JavaScript. Por defecto es True . hljs_languages : Por defecto, highlight.js solo admite 23 lenguajes. Incluir aqu\u00ed una lista adicional de lenguajes para a\u00f1adir soporte para los mismos: theme : name : mkdocs highlightjs : true hljs_languages : - yaml - rust include_homepage_in_sidebar : si el valor es true (por defecto) a\u00f1ade la p\u00e1gina de inicio a la barra lateral aunque debemos incluirla en la la lista nav del archivo de configuraci\u00f3n. En todo caso, pulsando con el rat\u00f3n sobre el nombre del sitio o en el logo, siempre nos llevar\u00e1 a la p\u00e1gina de inicio. prev_next_buttons_location : Puede ser bottom , top , both , o none . Muestra los botones [Next] y [Previous] de acuerdo a este par\u00e1metro, que por defecto es bottom . navigation_depth : M\u00e1xima profundidad de navegaci\u00f3n en el n\u00famero de niveles a mostrar en la barra lateral. Valor por defecto: 4 . collapse_navigation : Solo incluye las cabeceras de secci\u00f3n en la barra lateral. Por defecto es True . titles_only : Solo incluye t\u00edtulos de p\u00e1gina en la barra lateral, excluyendo las cabeceras de secci\u00f3n. Por defecto es False . sticky_navigation : Si es true (por defecto), la barra lateral se desplaza arriba/abajo en la medida que desplazamos el contenido de la p\u00e1gina.","title":"readthedocs"},{"location":"011Temas.html#temas-de-terceros","text":"Podemos encontrar una lista de temas de terceros en la wiki de MkDocs. Por ejemplo, vamos a instalar el tema Material : pip3 install mkdocs-material Recu\u00e9rdese que para hacer esta instalaci\u00f3n necesitaremos permisos de administrador. Para usar esos temas, en este caso Material , escribimos en el archivo de configuraci\u00f3n mkdocs.yml la siguiente entrada: theme : material Y al volver a compilar las p\u00e1ginas deber\u00eda hacer el efecto deseado. Para configurar el nuevo tema, tendremos que acudir a la documentaci\u00f3n del mismo.","title":"Temas de terceros"},{"location":"011Temas.html#anadiendo-hojas-de-estilos","text":"Podemos usar las opciones de configuraci\u00f3n extra_css y extra_javascript para a\u00f1adir nuevos archivos de estilo y scripts. Por ejemplo, para cambiar el color de las cabeceras, en el fichero de configuraci\u00f3n escribimos: extra_css: - css/estilos.css - css/mas_estilos.css Y en la carpeta de documentos, creamos un archivo css/estilos.css con lo siguiente: h1 { color : red ; }","title":"A\u00f1adiendo hojas de estilos"},{"location":"011Temas.html#adaptando-el-tema","text":"Para hacer modificaciones en un tema, comenzamos por acudir al repositorio del mismo y examinar la lista de archivos. Por ejemplo, el tema mkdocs tiene una estructura que es m\u00e1s o menos como sigue: - css\\ - fonts\\ - img\\ - favicon.ico - grid.png - js\\ - 404.html - base.html - content.html - nav-sub.html - nav.html - toc.html Para modificar un archivo, tenemos que copiarlo a nuestro proyecto, ubic\u00e1ndolo en una carpeta de igual nombre que en el tema original. MkDocs tomar\u00e1 con prioridad los archivos locales. Las carpetas con archivos del tema deben situarse en una carpeta que \u201ccuelgue\u201d de la principal del proyecto, en paralelo a la carpeta de documentos. La indicamos en el archivo de configuraci\u00f3n: theme : name : mkdocs custom_dir : tema/ Con esto le estamos diciendo que use el tema mkdocs , pero que acuda a nuestra carpeta /tema/ para ver si hay archivos personalizados, que tienen preferencia sobre los originales. Por ejemplo, el tema original tiene un archivo 404.html que muestra la p\u00e1gina \u201cfile not found cuando una p\u00e1gina enlazada no existe. Podemos incluir nuestro propio archivo 404.html* en la carpeta a puntada por el par\u00e1metro theme.custom_dir . Nuestro proyecto podr\u00eda tener la siguiente estructura: - config.yml - docs/ - index.md - otrapagina.md - tema/ - img/ - favicon.ico - 404.html - css - estilos.css Los archivos incluidos en la carpeta /tema/ reemplazar\u00e1n los originales con el mismo nombre o se a\u00f1adir\u00e1n al tema. Podr\u00edamos copiar en esa carpeta todo el tema original completo, y en el archivo de configuraci\u00f3n escribir: theme : name : null custom_dir : tema/ Si no definimos un tema ni una carpeta para alojar el mismo, MkDocs usar\u00e1 el tema por defecto.","title":"Adaptando el tema"},{"location":"011Temas.html#anatomia-de-un-tema","text":"Lo m\u00ednimo es un archivo main.html , que es una plantilla con marcas Jinja2 (el lenguaje de marcas utilizado por MkDocs). Por ejemplo si nuestro proyecto es: mkdocs.yml docs/ index.md acercade.md tema/ main.html ... \u2026 escribiremos lo siguiente en mkdocs.yml : theme : name : null custom_dir : 'tema/' \u2026 y estaremos usando como tema los archivos y plantillas de la carpeta /tema/ . Pero si escribi\u00e9ramos: theme : name : otro_tema custom_dir : 'tema/' lo que estar\u00edamos haciendo es usar otro tema reescribiendo main.html . El fichero main.html m\u00e1s simple podr\u00eda ser: <!DOCTYPE html> <html> <head> <title> {% if page.title %}{{ page.title }} - {% endif %} {{ config.site_name }} </title> </head> <body> {{ page.content }} </body> </html> El texto de cada p\u00e1gina se insertar\u00e1 en lugar de la marca {{ page.content }} . Podemos a\u00f1adir etiquetas para enlazar con hojas de estilo y scripts como en cualquier archivo html.","title":"Anatom\u00eda de un tema"},{"location":"011Temas.html#variables","text":"El texto de una plantilla puede incluir variables, que pueden ser a nivel global o de p\u00e1gina. Una variable se escribe como {{ nombre_variable }} Las siguientes variables est\u00e1n disponibles \u201cde serie\u201d para cualquier plantilla: config. Incluye las siguientes opciones: config.site_name config.site_url config.site_author config.site_description config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright config.google_analytics nav La variable nav es una lista de p\u00e1ginas definida en el archivo de configuraci\u00f3n. Adem\u00e1s incluye los siguientes atributos: nav.homepage: p\u00e1gina principal del sitio nav.pages: lista de p\u00e1ginas a incluir en la barra de navegaci\u00f3n. Puede haber otras p\u00e1ginas no incluidas en la barra. Afecta al comportamiento de los enlaces \u201cnext page\u201d y \u201cprevious page\u201d. base_url La variable base_url proporciona un path a la carpeta principal del proyecto. Puede usarse directamente precediendo una URL relativa, pero es mejor usar el filtro url para asegurarnos de una correcta transformaci\u00f3n: {{ base.url | url }}{{ page.url | url }}{{ page.title }} En el lenguaje de marcas Jinja2 , los filtros consisten en aplicar una conversi\u00f3n a una variable. Se coloca un s\u00edmbolo \u201c|\u201d entre el nombre de la variable y el filtro a aplicar. mkdocs_version Versi\u00f3n actual de MkDocs. build_date_utc Objeto de la clase datetime de Python que representa la fecha y hora de compilaci\u00f3n en formato UTC. Resulta \u00fatil para saber si los documentos son recientes. pages Una lista con todas las p\u00e1ginas del proyecto ordenadas alfab\u00e9ticamente por directorio y nombre de archivo. Contiene p\u00e1ginas no incluidas en la variable nav . El orden de las p\u00e1ginas no tiene por que coincidir con el de la barra de navegaci\u00f3n. page En las plantillas no utilizadas por un archivo Markdown, la variable page tiene un valor None . En caso contrario, la variable tiene los siguientes atributos: page.title T\u00edtulo de la p\u00e1gina actual. page.content HTML generado a partir de Markdown, que se mostrar\u00e1 como documentaci\u00f3n. page.toc Una lista de enlaces que se usa para formar la tabla de contenidos. Cada elemento tiene los siguientes atributos: title : texto del elemento. url : URL para apuntar a un objeto level : Nivel en la tabla de contenidos, con base cero. children : lista de elementos anidados. page.meta Es una colecci\u00f3n con los metadatos incluidos en el front matter de la p\u00e1gina. Por ejemplo: source : generics . py mixins . py # T\u00edtulo de la p\u00e1gina Contenido ... page.url La URL de la p\u00e1gina relativa a la apuntada por site_dir . Es preferible usar el filtro url para asegurarse de que la URL es relativa a la p\u00e1gina actual. <a href= \" {{ page.url | url }} \" > {{ page.title }} </a> page.abs_url La URL absoluta de la p\u00e1gina de acuerdo al par\u00e1metro de configuraci\u00f3n site_url . Incluye los subdirectorios incluidos en site_url , pero no el dominio. Lo apuntado por base_url no deber\u00eda usarse con esta variable. Por ejemplo, si tenemos: site_url : https :// ejemplo . com / el valor de page.abs_url para la p\u00e1gina foo.md ser\u00e1 /foo/ . Pero si tenemos: site_url : https :// ejemplo . com /bar/ entonces el valor de page.abs_url para foo.md ser\u00e1 /bar/foo/ . page.canonical_url Direcci\u00f3n URL completa tal y como est\u00e1 determinado por el valor asignado a site_url en la configuraci\u00f3n. El valor incluye el dominio y cualquier subdirectorio incluido en site_url . base_url no deber\u00eda utilizarse con esta variable. page.edit_url La URL completa al texto fuente en el repositorio. Generalmente se usar\u00e1 para proporcionar un enlace para editar el texto fuente. El valor de base_url no deber\u00eda usarse con esta variable. page.is_homepage True en el caso de la p\u00e1gina principal del sitio, y False en el resto de p\u00e1ginas. Puede usarse en conjunci\u00f3n con otros atributos de page para alterar el comportamiento. Por ejemplo, para mostrar un t\u00edtulo diferente en la p\u00e1gina principal, en la plantilla escribimos: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }} page.previous_page El nombre de la p\u00e1gina anterior. Si estamos en la primera p\u00e1gina, el valor ser\u00e1 None . Sucede lo mismo si estamos en una p\u00e1gina no incluida en la barra de navegaci\u00f3n. page.next_page Similar al anterior, pero apunta a la p\u00e1gina siguiente. page.parent Secci\u00f3n inmediatamente situada a nivel superior en la barra de navegaci\u00f3n. El valor es none si estamos en el nivel superior. page.children Las p\u00e1ginas no tienen p\u00e1ginas hijas. El valor siempre es none . Esta propiedad tiene sentido para el caso de las secciones, donde devuelve una lista. page.active Si el valor es true , indica que esta es la p\u00e1gina actual. Por defecto es false . page.is_section Indica que en la barra de navegaci\u00f3n es un objeto \u201csection\u201d. El valor es false en el caso de las p\u00e1ginas p\u00e1ginas. page.is_page Indica que un objeto en la barra de navegaci\u00f3n es una p\u00e1gina. El valor es true para todas las p\u00e1ginas. page.is_link Indica que el objeto es un enlace en la barra de navegaci\u00f3n. Siempre es false para las p\u00e1ginas. Veamos un ejemplo de uso en una plantilla, usando el lenguaje de marcas Jinja : <ul> {% for toc_item in page.toc %} <li><a href=\" {{ toc_item.url }} \"> {{ toc_item.title }} </a></li> {% for toc_item in toc_item.children %} <li><a href=\" {{ toc_item.url }} \"> {{ toc_item.title }} </a></li> {% endfor %} {% endfor %} </ul> La variable nav es una lista de objetos del tipo section , page o link . Los primeros pueden tener otros anidados. Los objetos section tienen los siguientes atributos: section.title T\u00edtulo de la secci\u00f3n. section.parent Secci\u00f3n padre. Si estamos al nivel superior, None . section.children Una lista con todos los objetos incluidos en la secci\u00f3n, que pueden ser a su vez secciones, p\u00e1ginas o enlaces. section.active Si es true , indica que una p\u00e1gina hija de esta secci\u00f3n es la p\u00e1gina actual. Puede usarse para resaltar el nombre de la secci\u00f3n. Por defecto es false . section.is_section Indica que el objeto es una secci\u00f3n. section.is_page Indica que el objeto es una p\u00e1gina. El valor es false para las secciones. section.is_link Indica que el objeto es un enlace. Los objetos link pueden tener los siguientes atributos link.title T\u00edtulo del enlace. link.url La URL apuntada por el enlace. Deber\u00eda ser una URL absoluta, no precedida por base_url . link.parent Elemento padre del enlace. None si estamos al nivel superior. link.children Los enlaces no tienen elementos hijos. Siempre es None . link.active Los enlaces nunca pueden ser p\u00e1ginas activas. Siempre es False . link.is_section Siempre false para enlaces. link.is_page Siempre false para enlaces. link.is_link Siempre true para enlaces.","title":"Variables"},{"location":"011Temas.html#bloques","text":"En lugar de sobreescribir un archivo de un tema, podemos hacerlo con parte del archivo. Las plantillas se pueden dividir en bloques de texto, delimitados de la siguiente forma: {% block nombre %} ...contenido html... {% endblock %} Para sobreescribir un bloque de un archivo, en la carpeta apuntada por custom_dir creamos un fichero con el mismo nombre: {% extends \"base.html\" %} {% block htmltitle %} <title>T\u00edtulo personalizado</title> {% endblock %} La plantilla principal main.html suele ser una ampliaci\u00f3n de base.html , y el bloque htmltitle se suele utilizar para definir la cabecera de la p\u00e1gina web. Obviamente, tendremos que examinar los archivos del tema para saber que bloques son sobreescribibles. Los termas MkDocs y ReadTheDocs proporcionan los siguientes bloques: site_meta : etiquetas meta en la secci\u00f3n <head> . htmltitle : t\u00edtulo de la p\u00e1gina. styles : enlaces a hojas de estilo. libs : librer\u00edas JavaScript (jQuery, etc). scripts : scripts JavaScript. analytics : script analytics. extrahead : bloque vac\u00edo en la secci\u00f3n <head> , para a\u00f1adir elementos a nuestro gusto. site_name : nombre del sitio en la barra de navegaci\u00f3n. site_nav : enlaces de navegaci\u00f3n. search_box : recuadro para introducir b\u00fasquedas. next_prev : botones next y previous. repo : enlace al repositorio. content : tabla de contenidos. footer : pie de p\u00e1gina.","title":"Bloques"},{"location":"012Material.html","text":"Material for MkDocs MkDocs incluye dos temas est\u00e1ndar, MkDocs y ReadTheDocs . Si queremos buscar otros temas, podemos acudir a la wiki comunitaria para explorar la lista de temas disponibles. Para mis cuadernos, voy a utilizar Material V\u00e9ase su repositorio GitHub aqu\u00ed Gu\u00eda r\u00e1pida Tenemos el manual de uso aqu\u00ed . Podemos instalarlo en nuestro equipo con el comando pip install mkdocs-material Y activarlo modificando el archivo de configuraci\u00f3n del proyecto mkdocs.yml : theme : name : 'material' \u2026 y al generar el sitio web, veremos el resultado Otra posibilidad es descargarlo directamente de GitHub, acudiendo a su repositorio y pulsando en el bot\u00f3n [clone or download] . Esto resulta \u00fatil si queremos hacer muchas modificaciones en el tema para adaptarlo a nuestro gusto. En ese caso, el archivo de configuraci\u00f3n ser\u00e1: theme : name : null custom_dir : 'mkdocs-material/material' Colores Este tema define los colores de acuerdo al juego definido en la biblioteca material de google . Podemos configurarlo de la siguiente forma: theme : palette : primary : 'indigo' accent : 'indigo' Los nombres de colores son case-insensitive. Los posibles valores son red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey , blue grey y white . Los \u00faltimos cuatro solo pueden usarse como primary . Si hacemos uso de estas opciones de configuraci\u00f3n, se a\u00f1adir\u00e1 un archivo css autom\u00e1ticamente. Tenemos una paleta de colores para experimentar en la gu\u00eda del tema. Pulsar aqu\u00ed El valore por defecto es: indigo . Fuente Por defecto la fuente es Roboto y Roboto Mono . V\u00e9ase referencia . Ambas fuentes forman parte de Google Fonts y podemos cambiarlas por otras, por ejemplo, Ubuntu font family . theme : font : text : 'Ubuntu' code : 'Ubuntu Mono' Podemos desactivar las fuentes proporcionadas con: theme : font : false Logo El icono por defecto es: school . Debe tener una resoluci\u00f3n m\u00ednima de 128x128, dejando espacio en los costados, y presentando un contraste suficiente con el color de fondo. La forma de establecer otro icono es poni\u00e9ndolo en la carpeta docs/images , y configur\u00e1ndolo con: theme : logo : 'images/logo.svg' Otra posibilidad es hacer referencia por su nombre a alguno de los definidos en Material Design icon font . Por ejemplo: theme : logo : icon : 'cloud' Idiomas Podemos especificar el idioma de la p\u00e1gina con: theme : language : 'es' Siendo \u2018en\u2019 el valor por defecto. Para establecer el idioma para las b\u00fasquedas escribimos: extra : search : language : 'es, en' Favicon El valor por defecto es assets/images/favicon.png . Puede cambiarse mediante: theme : favicon : 'assets/images/favicon.ico' Pesta\u00f1as Material contempla la posibilidad de un nivel superior en forma de men\u00fa horizontal. Activarlo con: theme : feature : tabs : true Enlace a repositorio Para a\u00f1adir un enlace al repositorio de documentaci\u00f3n, configurar en mkdocs.yml : repo_name : 'squidfunk/mkdocs-material' repo_url : 'https://github.com/squidfunk/mkdocs-material' El nombre del repositorio aparecer\u00e1 junto al recuadro de b\u00fasqueda o en la barra de navefaci\u00f3n, dependiendo del tama\u00f1o de la ventana. Si repo_url apunta a GitHub, BitBucket o GitLab, se mostrar\u00e1 el logo junto al enlace. Para GitHub, tambi\u00e9n el n\u00famero de estrellas y forks. Si el repositorio se ubica en un entorno privado, el logo puede establecerse poniendo extra.repo_icon como github , gitlab o bitbucket . \u00bfPor que hay un bot\u00f3n editar al inicio de cada art\u00edculo? Si asignamos repo_url a GitHub o a BitBucket, repo_name incluye GitHub o BitBucket de forma impl\u00edcita o expl\u00edcita, un bot\u00f3n de edici\u00f3n aparecer\u00e1 al inicio de cada art\u00edculo. Este es el comportamiento autom\u00e1tico que MkDocs implementa. V\u00e9ase la documentaci\u00f3n de MkDocs para m\u00e1s informaci\u00f3n. Enlaces a redes sociales Podemos mostrar redes sociales en el pie de p\u00e1gina usando la fuente FontAwesome . El par\u00e1metro type mostrar\u00e1 el nombre del servicio, y link la URL a enlazar: extra : social : - type : 'github' link : 'https://github.com/squidfunk' - type : 'twitter' link : 'https://twitter.com/squidfunk' - type : 'linkedin' link : 'https://linkedin.com/in/squidfunk' Los enlaces se muestran en ese orden, y type debe coincidir con el nombre definido en FontAwesome . Se a\u00f1adir\u00e1 autom\u00e1ticamente fa , por lo que github se convertir\u00e1 en fa fa-github . Google Analytics MkDocs facilita la integraci\u00f3n con Google Analytics, lo que permite analizar el uso de nuestro repositorio. Podemos activarlo mediante el archivo de configuraci\u00f3n: mkdocs.yml : google_analytics : - 'UA-XXXXXXXX-X' - 'auto' Disqus Material for MkDocs est\u00e1 integrado con Disqus , lo que permite una secci\u00f3n de comentarios. En la configuraci\u00f3n tenemos que a\u00f1adir nuestro nombre: extra : disqus : 'miNombre' La secci\u00f3n de comentarios se insertar\u00e1 en todas las p\u00e1ginas excepto index . En la tabla de contenido se generar\u00e1 un enlace a la secci\u00f3n de comentarios. Requerimientos Se debe establecer un valor para site_url Disqus puede establecerse o desactivarse para determinadas p\u00e1ginas mediante metadatos. Arquitectura del tema Si queremos hacer modificaciones al tema Material , tendremos que configurar mkdocs.yml como de costumbre: theme : name : 'material' custom_dir : 'tema' La estructura del directorio del tema debe ser reflejo de la del tema original. Todo archivo en la capeta apuntada por custom_dir reemplazar\u00e1 al original con el mismo nombre. Adem\u00e1s, podemos a\u00f1adir nuevos ficheros. La disposici\u00f3n de Material es la siguiente: . \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Imagenes e iconos \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Hojas de estilo \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # 3rd-party \u2502 \u251c\u2500 language/ # Idiomas \u2502 \u251c\u2500 footer.html # Pie de p\u00e1gina \u2502 \u251c\u2500 header.html # Cabecera \u2502 \u251c\u2500 hero.html # Hero teaser \u2502 \u251c\u2500 language.html # Etiquetas \u2502 \u251c\u2500 nav-item.html # Elemento de la barra \u2502 \u251c\u2500 nav.html # Barra de navegaci\u00f3n \u2502 \u251c\u2500 search.html # Recuadro de b\u00fasqueda \u2502 \u251c\u2500 social.html # Redes sociales \u2502 \u251c\u2500 source.html # Repositorio \u2502 \u251c\u2500 tabs-item.html # Elemento de pesta\u00f1a \u2502 \u251c\u2500 tabs.html # Pesta\u00f1as \u2502 \u251c\u2500 toc-item.html # Elemento de TOC \u2502 \u2514\u2500 toc.html # Tabla de contenido \u251c\u2500 404 .html # P\u00e1gina 404 \u251c\u2500 base.html # Plantilla Base \u2514\u2500 main.html # P\u00e1gina por defecto Sobreescribir una secci\u00f3n Si por ejemplo queremos cambiar el pie de p\u00e1gina, reemplazar footer.html por un archivo partials/footer.html en el directorio apuntado por custom_dir . Sobreescribir bloques de plantila Podemos crear un nuevo archivo mail.html implementando solo los bloques que queramos personalizar. Se respetar\u00e1 el resto del archivo original. Por ejemplo: {% extends \"base.html\" %} {% block htmltitle %} <title>Lorem ipsum dolor sit amet</title> {% endblock %} Material proporciona los siguientes bloques: Nombre Incluye: analytics Integraci\u00f3n con Google Analytics content Contenido de la p\u00e1gina disqus Integraci\u00f3n con disqus extrahead Bloque vac\u00edo para definir etiquetas meta a\u00f1adidas fonts Definici\u00f3n de fuentes footer Pie de p\u00e1gina con navegaci\u00f3n y copyright header Barra de cabecera fija hero Portada htmltitle Etiqueta <title> libs Bibliotecas JavaScript repo Enlace al repositorio en la barra de cabecera scripts Scripts de JavaScript source Archivos fuente enlazados search_box Recuadro de b\u00fasqueda site_meta Meta etiquetas en secci\u00f3n <head> site_name Nombre del sitio en la cabecera site_nav Navegaci\u00f3n y tabla de contenidos social Enlaces a redes sociales styles Hojas de estilo","title":"Material for MkDocs"},{"location":"012Material.html#material-for-mkdocs","text":"MkDocs incluye dos temas est\u00e1ndar, MkDocs y ReadTheDocs . Si queremos buscar otros temas, podemos acudir a la wiki comunitaria para explorar la lista de temas disponibles. Para mis cuadernos, voy a utilizar Material V\u00e9ase su repositorio GitHub aqu\u00ed","title":"Material for MkDocs"},{"location":"012Material.html#guia-rapida","text":"Tenemos el manual de uso aqu\u00ed . Podemos instalarlo en nuestro equipo con el comando pip install mkdocs-material Y activarlo modificando el archivo de configuraci\u00f3n del proyecto mkdocs.yml : theme : name : 'material' \u2026 y al generar el sitio web, veremos el resultado Otra posibilidad es descargarlo directamente de GitHub, acudiendo a su repositorio y pulsando en el bot\u00f3n [clone or download] . Esto resulta \u00fatil si queremos hacer muchas modificaciones en el tema para adaptarlo a nuestro gusto. En ese caso, el archivo de configuraci\u00f3n ser\u00e1: theme : name : null custom_dir : 'mkdocs-material/material'","title":"Gu\u00eda r\u00e1pida"},{"location":"012Material.html#colores","text":"Este tema define los colores de acuerdo al juego definido en la biblioteca material de google . Podemos configurarlo de la siguiente forma: theme : palette : primary : 'indigo' accent : 'indigo' Los nombres de colores son case-insensitive. Los posibles valores son red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey , blue grey y white . Los \u00faltimos cuatro solo pueden usarse como primary . Si hacemos uso de estas opciones de configuraci\u00f3n, se a\u00f1adir\u00e1 un archivo css autom\u00e1ticamente. Tenemos una paleta de colores para experimentar en la gu\u00eda del tema. Pulsar aqu\u00ed El valore por defecto es: indigo .","title":"Colores"},{"location":"012Material.html#fuente","text":"Por defecto la fuente es Roboto y Roboto Mono . V\u00e9ase referencia . Ambas fuentes forman parte de Google Fonts y podemos cambiarlas por otras, por ejemplo, Ubuntu font family . theme : font : text : 'Ubuntu' code : 'Ubuntu Mono' Podemos desactivar las fuentes proporcionadas con: theme : font : false","title":"Fuente"},{"location":"012Material.html#logo","text":"El icono por defecto es: school . Debe tener una resoluci\u00f3n m\u00ednima de 128x128, dejando espacio en los costados, y presentando un contraste suficiente con el color de fondo. La forma de establecer otro icono es poni\u00e9ndolo en la carpeta docs/images , y configur\u00e1ndolo con: theme : logo : 'images/logo.svg' Otra posibilidad es hacer referencia por su nombre a alguno de los definidos en Material Design icon font . Por ejemplo: theme : logo : icon : 'cloud'","title":"Logo"},{"location":"012Material.html#idiomas","text":"Podemos especificar el idioma de la p\u00e1gina con: theme : language : 'es' Siendo \u2018en\u2019 el valor por defecto. Para establecer el idioma para las b\u00fasquedas escribimos: extra : search : language : 'es, en'","title":"Idiomas"},{"location":"012Material.html#favicon","text":"El valor por defecto es assets/images/favicon.png . Puede cambiarse mediante: theme : favicon : 'assets/images/favicon.ico'","title":"Favicon"},{"location":"012Material.html#pestanas","text":"Material contempla la posibilidad de un nivel superior en forma de men\u00fa horizontal. Activarlo con: theme : feature : tabs : true","title":"Pesta\u00f1as"},{"location":"012Material.html#enlace-a-repositorio","text":"Para a\u00f1adir un enlace al repositorio de documentaci\u00f3n, configurar en mkdocs.yml : repo_name : 'squidfunk/mkdocs-material' repo_url : 'https://github.com/squidfunk/mkdocs-material' El nombre del repositorio aparecer\u00e1 junto al recuadro de b\u00fasqueda o en la barra de navefaci\u00f3n, dependiendo del tama\u00f1o de la ventana. Si repo_url apunta a GitHub, BitBucket o GitLab, se mostrar\u00e1 el logo junto al enlace. Para GitHub, tambi\u00e9n el n\u00famero de estrellas y forks. Si el repositorio se ubica en un entorno privado, el logo puede establecerse poniendo extra.repo_icon como github , gitlab o bitbucket . \u00bfPor que hay un bot\u00f3n editar al inicio de cada art\u00edculo? Si asignamos repo_url a GitHub o a BitBucket, repo_name incluye GitHub o BitBucket de forma impl\u00edcita o expl\u00edcita, un bot\u00f3n de edici\u00f3n aparecer\u00e1 al inicio de cada art\u00edculo. Este es el comportamiento autom\u00e1tico que MkDocs implementa. V\u00e9ase la documentaci\u00f3n de MkDocs para m\u00e1s informaci\u00f3n.","title":"Enlace a repositorio"},{"location":"012Material.html#enlaces-a-redes-sociales","text":"Podemos mostrar redes sociales en el pie de p\u00e1gina usando la fuente FontAwesome . El par\u00e1metro type mostrar\u00e1 el nombre del servicio, y link la URL a enlazar: extra : social : - type : 'github' link : 'https://github.com/squidfunk' - type : 'twitter' link : 'https://twitter.com/squidfunk' - type : 'linkedin' link : 'https://linkedin.com/in/squidfunk' Los enlaces se muestran en ese orden, y type debe coincidir con el nombre definido en FontAwesome . Se a\u00f1adir\u00e1 autom\u00e1ticamente fa , por lo que github se convertir\u00e1 en fa fa-github .","title":"Enlaces a redes sociales"},{"location":"012Material.html#google-analytics","text":"MkDocs facilita la integraci\u00f3n con Google Analytics, lo que permite analizar el uso de nuestro repositorio. Podemos activarlo mediante el archivo de configuraci\u00f3n: mkdocs.yml : google_analytics : - 'UA-XXXXXXXX-X' - 'auto'","title":"Google Analytics"},{"location":"012Material.html#disqus","text":"Material for MkDocs est\u00e1 integrado con Disqus , lo que permite una secci\u00f3n de comentarios. En la configuraci\u00f3n tenemos que a\u00f1adir nuestro nombre: extra : disqus : 'miNombre' La secci\u00f3n de comentarios se insertar\u00e1 en todas las p\u00e1ginas excepto index . En la tabla de contenido se generar\u00e1 un enlace a la secci\u00f3n de comentarios. Requerimientos Se debe establecer un valor para site_url Disqus puede establecerse o desactivarse para determinadas p\u00e1ginas mediante metadatos.","title":"Disqus"},{"location":"012Material.html#arquitectura-del-tema","text":"Si queremos hacer modificaciones al tema Material , tendremos que configurar mkdocs.yml como de costumbre: theme : name : 'material' custom_dir : 'tema' La estructura del directorio del tema debe ser reflejo de la del tema original. Todo archivo en la capeta apuntada por custom_dir reemplazar\u00e1 al original con el mismo nombre. Adem\u00e1s, podemos a\u00f1adir nuevos ficheros. La disposici\u00f3n de Material es la siguiente: . \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Imagenes e iconos \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Hojas de estilo \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # 3rd-party \u2502 \u251c\u2500 language/ # Idiomas \u2502 \u251c\u2500 footer.html # Pie de p\u00e1gina \u2502 \u251c\u2500 header.html # Cabecera \u2502 \u251c\u2500 hero.html # Hero teaser \u2502 \u251c\u2500 language.html # Etiquetas \u2502 \u251c\u2500 nav-item.html # Elemento de la barra \u2502 \u251c\u2500 nav.html # Barra de navegaci\u00f3n \u2502 \u251c\u2500 search.html # Recuadro de b\u00fasqueda \u2502 \u251c\u2500 social.html # Redes sociales \u2502 \u251c\u2500 source.html # Repositorio \u2502 \u251c\u2500 tabs-item.html # Elemento de pesta\u00f1a \u2502 \u251c\u2500 tabs.html # Pesta\u00f1as \u2502 \u251c\u2500 toc-item.html # Elemento de TOC \u2502 \u2514\u2500 toc.html # Tabla de contenido \u251c\u2500 404 .html # P\u00e1gina 404 \u251c\u2500 base.html # Plantilla Base \u2514\u2500 main.html # P\u00e1gina por defecto","title":"Arquitectura del tema"},{"location":"012Material.html#sobreescribir-una-seccion","text":"Si por ejemplo queremos cambiar el pie de p\u00e1gina, reemplazar footer.html por un archivo partials/footer.html en el directorio apuntado por custom_dir .","title":"Sobreescribir una secci\u00f3n"},{"location":"012Material.html#sobreescribir-bloques-de-plantila","text":"Podemos crear un nuevo archivo mail.html implementando solo los bloques que queramos personalizar. Se respetar\u00e1 el resto del archivo original. Por ejemplo: {% extends \"base.html\" %} {% block htmltitle %} <title>Lorem ipsum dolor sit amet</title> {% endblock %} Material proporciona los siguientes bloques: Nombre Incluye: analytics Integraci\u00f3n con Google Analytics content Contenido de la p\u00e1gina disqus Integraci\u00f3n con disqus extrahead Bloque vac\u00edo para definir etiquetas meta a\u00f1adidas fonts Definici\u00f3n de fuentes footer Pie de p\u00e1gina con navegaci\u00f3n y copyright header Barra de cabecera fija hero Portada htmltitle Etiqueta <title> libs Bibliotecas JavaScript repo Enlace al repositorio en la barra de cabecera scripts Scripts de JavaScript source Archivos fuente enlazados search_box Recuadro de b\u00fasqueda site_meta Meta etiquetas en secci\u00f3n <head> site_name Nombre del sitio en la cabecera site_nav Navegaci\u00f3n y tabla de contenidos social Enlaces a redes sociales styles Hojas de estilo","title":"Sobreescribir bloques de plantila"}]}